/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

syntax = "proto3";
import "SerializableQueryPlan.proto";
import "WorkerLocation.proto";

service WorkerRPCService {
  rpc DeployQuery (DeployQueryRequest) returns (DeployQueryReply) {}
  rpc UndeployQuery (UndeployQueryRequest) returns (UndeployQueryReply) {}

  rpc RegisterQuery (RegisterQueryRequest) returns (RegisterQueryReply) {}
  rpc UnregisterQuery (UnregisterQueryRequest) returns (UnregisterQueryReply) {}

  rpc StartQuery (StartQueryRequest) returns (StartQueryReply) {}
  rpc StopQuery (StopQueryRequest) returns (StopQueryReply) {}

  rpc RegisterMonitoringPlan (MonitoringRegistrationRequest) returns (MonitoringRegistrationReply) {}
  rpc GetMonitoringData (MonitoringDataRequest) returns (MonitoringDataReply) {}

  rpc InjectEpochBarrier (EpochBarrierNotification) returns (EpochBarrierReply) {}

  rpc BeginBuffer(BufferRequest) returns (BufferReply){}

  rpc UpdateNetworkSink(UpdateNetworkSinkRequest) returns (UpdateNetworkSinkReply){}

  rpc GetLocation(GetLocationRequest) returns (GetLocationReply) {}

  rpc GetReconnectSchedule(GetReconnectScheduleRequest) returns (GetReconnectScheduleReply) {}
  rpc UploadMlModel(MlModelFileUploadRequest) returns(MlModelFileUploadResponse) {}
  rpc UploadMlModelClientStream(stream MlModelFileUploadRequest) returns(MlModelFileUploadResponse) {}
  rpc UploadMlModelServerStream(MlModelFileUploadRequest) returns(stream MlModelFileUploadResponse) {}
}

message DeployQueryRequest {
  NES.SerializableQueryPlan queryPlan = 3;
}

message DeployQueryReply {
  bool success = 1;
}

message UndeployQueryRequest {
  uint64 queryId = 1;
}

message UndeployQueryReply {
  bool success = 1;
}

message RegisterQueryRequest {
  NES.SerializableQueryPlan queryPlan = 3;

}

message RegisterQueryReply {
  bool success = 1;
}

message UnregisterQueryRequest {
  uint64 queryId = 1;
}

message UnregisterQueryReply {
  bool success = 1;
}

message StartQueryRequest {
  uint64 queryId = 1;
}

message StartQueryReply {
  bool success = 1;
}

message StopQueryRequest {
  uint64 queryId = 1;
  uint64 queryTerminationType = 2;
}

message StopQueryReply {
  bool success = 1;
}

message MonitoringRegistrationRequest {
  repeated uint32 metricTypes = 1;
}

message MonitoringRegistrationReply {
}

message MonitoringDataRequest {
    repeated uint32 metricTypes = 1;
}

message MonitoringDataReply {
  string metricsAsJson = 1;
}

message EpochBarrierNotification{
  uint64 timestamp = 1;
  uint64 queryId = 2;
}

message EpochBarrierReply{
  bool success = 1;
}

message UpdateNetworkSinkRequest{
  uint64 newNodeId = 1;
  string newHostname = 2;
  uint32 newPort = 3;
  uint64 querySubPlanId = 4;
  uint64 uniqueNetworkSinkDescriptorId = 5;
}

message UpdateNetworkSinkReply {
  bool success = 1;
}

message BufferRequest {
  uint64 querySubPlanId = 1;
  uint64 uniqueNetworkSinkDescriptorId = 2;
}

message BufferReply {
  bool success = 1;
}

message GetLocationRequest {
}

message GetLocationReply {
  Coordinates coord = 1;
  uint64 timestamp = 2;
}

message GetReconnectScheduleRequest {
  uint64 id = 1;
}

message GetReconnectScheduleReply {
  ReconnectSchedule schedule = 1;
}

enum MlModelFileUploadStatus {
  PENDING = 0;
  IN_PROGRESS = 1;
  SUCCESS = 2;
  FAILED = 3;
}

message MlModelFileUploadRequest {
  oneof request {
    string filename = 1;
    string filetype = 2;
    bytes content = 3;
  }
}

message MlModelFileUploadResponse {
  string filename = 1;
  MlModelFileUploadStatus status = 2;
}