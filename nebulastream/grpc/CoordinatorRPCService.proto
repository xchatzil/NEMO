/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

syntax = "proto3";

import "WorkerLocation.proto";

// The greeting service definition.
service CoordinatorRPCService {
  // Sends a registration request for new worker to the coordinator
  rpc RegisterNode (RegisterNodeRequest) returns (RegisterNodeReply) {}

  // Sends a unregistration request for a worker to the coordinator
  rpc UnregisterNode (UnregisterNodeRequest) returns (UnregisterNodeReply) {}

  // Sends a registration request for a collection of physical sources to the coordinator
  rpc RegisterPhysicalSource (RegisterPhysicalSourcesRequest) returns (RegisterPhysicalSourcesReply) {}

  // Sends a unregistration request for a physical source to the coordinator
  rpc UnregisterPhysicalSource (UnregisterPhysicalSourceRequest) returns (UnregisterPhysicalSourceReply) {}

  // Sends a registration request for a logical source
  rpc RegisterLogicalSource (RegisterLogicalSourceRequest) returns (RegisterLogicalSourceReply) {}

  // Sends a unregistration request for a logical source
  rpc UnregisterLogicalSource (UnregisterLogicalSourceRequest) returns (UnregisterLogicalSourceReply) {}

  // Sends an add new parent request for to the coordinator
  rpc AddParent (AddParentRequest) returns (AddParentReply) {}

  // Sends a remove parent request to the coordinator
  rpc RemoveParent (RemoveParentRequest) returns (RemoveParentReply) {}

  // sends a replace parent request to the coordinator
  rpc ReplaceParent (ReplaceParentRequest) returns (ReplaceParentReply) {}

  // queries for all field nodes within a specified radius around the supplied coordinates
  rpc GetNodesInRange (GetNodesInRangeRequest) returns (GetNodesInRangeReply) {}

  //inform the coordinator about the scheduled reconnect
  rpc SendScheduledReconnect (SendScheduledReconnectRequest) returns (SendScheduledReconnectReply) {}

  //lets a mobile device inform the coordinator about its current location
  rpc SendLocationUpdate (LocationUpdateRequest) returns (LocationUpdateReply) {}

  // send a notification when a query fails to the coordinator
  rpc NotifyQueryFailure (QueryFailureNotification) returns (QueryFailureNotificationReply) {}

  rpc NotifyEpochTermination (EpochBarrierPropagationNotification) returns (EpochBarrierPropagationReply) {}

  // send errors to the coordinator
  rpc SendErrors (SendErrorsMessage) returns (ErrorReply) {}

  rpc RequestSoftStop (RequestSoftStopMessage) returns (StopRequestReply) {}

  rpc notifySourceStopTriggered (SoftStopTriggeredMessage) returns (SoftStopTriggeredReply) {}

  rpc NotifySoftStopCompleted (SoftStopCompletionMessage) returns (SoftStopCompletionReply) {}
}

message RegisterNodeRequest {
  string address = 1;
  uint32 grpcPort = 2;
  uint32 dataPort = 3;
  uint32 numberOfSlots = 4;
  SerializableRegistrationMetrics registrationMetrics = 5;
  Coordinates coordinates = 6;
  NodeType spatialType = 7;
  bool isTfInstalled = 8;
}

message RegisterNodeReply {
  uint64 id = 1;
}

message UnregisterNodeRequest {
  uint64 id = 1;
}

message UnregisterNodeReply {
  bool success = 1;
}

message RegisterPhysicalSourcesRequest {
  uint64 id = 1;
  repeated PhysicalSourceDefinition physicalSources = 2;
}

message PhysicalSourceDefinition {
  string sourceType = 1;
  string physicalSourceName = 2;
  string logicalSourceName = 3;
}

message RegisterPhysicalSourcesReply {
  bool success = 1;
}

message UnregisterPhysicalSourceRequest {
  uint64 id = 1;
  string physicalSourceName = 2;
  string logicalSourceName = 3;
}

message UnregisterPhysicalSourceReply {
  bool success = 1;
}

message RegisterLogicalSourceRequest {
  uint64 id = 1;
  string logicalSourceName = 2;
  string sourceSchema = 3;
}

message RegisterLogicalSourceReply {
  bool success = 1;
}

message UnregisterLogicalSourceRequest {
  uint64 id = 1;
  string logicalSourceName = 2;
}

message UnregisterLogicalSourceReply {
  bool success = 1;
}

message AddParentRequest {
  uint64 childId = 1;
  uint64 parentId = 2;
}

message AddParentReply {
  bool success = 1;
}

message ReplaceParentRequest {
  uint64 childId = 1;
  uint64 oldParent = 2;
  uint64 newParent = 3;
}

message ReplaceParentReply {
  bool success = 1;
}

message RemoveParentRequest {
  uint64 childId = 1;
  uint64  parentId = 2;
}

message RemoveParentReply {
  bool success = 1;
}

message GetNodesInRangeRequest {
  Coordinates coord = 1;
  double radius = 2;
}

message QueryFailureNotification{
  uint64 queryId = 1;
  uint64 subQueryId = 2;
  uint64 workerId = 3;
  uint64 operatorId = 4;
  string errorMsg = 5;
}

message QueryFailureNotificationReply{
  bool success = 1;
}

message EpochBarrierPropagationNotification{
  uint64 timestamp = 1;
  uint64 queryId = 2;
}

message EpochBarrierPropagationReply{
  bool success = 1;
}
message GetNodesInRangeReply{
  repeated WorkerLocationInfo nodes = 1;
}

message SendScheduledReconnectRequest {
  uint64 deviceId = 1;
  SerializableReconnectPrediction reconnect = 2;
}

message SendScheduledReconnectReply {
  bool success = 1;
}

message LocationUpdateRequest {
  uint64 id = 1;
  Coordinates coord = 2;
  uint64 time = 3;
}

message LocationUpdateReply {
  bool success = 1;
}

message SerializableRegistrationMetrics{
  uint64 totalMemoryBytes = 1;
  uint32 cpuCoreNum = 2;
  uint64 totalCPUJiffies = 3;
  int64 cpuPeriodUS = 4;
  int64 cpuQuotaUS = 5;
  bool isMoving = 6;
  bool hasBattery = 7;
}

message SendErrorsMessage{
  uint64 workerId = 1;
  string errorMsg = 2;
}

message ErrorReply{
  bool success = 1;
}

message RequestSoftStopMessage{
  uint64 queryId = 1;
  uint64 subQueryId = 2;
  uint64 sourceId = 3;
}

message StopRequestReply{
  bool success = 1;
}

message SoftStopTriggeredMessage{
  uint64 queryId = 1;
  uint64 querySubPlanId = 2;
  uint64 sourceId = 3;
}

message SoftStopTriggeredReply{
  bool success = 1;
}

message SoftStopCompletionMessage{
  uint64 queryId = 1;
  uint64 querySubPlanId = 2;
}

message SoftStopCompletionReply{
  bool success = 1;
}