
███╗░░██╗███████╗██████╗░██╗░░░██╗██╗░░░░░░█████╗░░██████╗████████╗██████╗░███████╗░█████╗░███╗░░░███╗
████╗░██║██╔════╝██╔══██╗██║░░░██║██║░░░░░██╔══██╗██╔════╝╚══██╔══╝██╔══██╗██╔════╝██╔══██╗████╗░████║
██╔██╗██║█████╗░░██████╦╝██║░░░██║██║░░░░░███████║╚█████╗░░░░██║░░░██████╔╝█████╗░░███████║██╔████╔██║
██║╚████║██╔══╝░░██╔══██╗██║░░░██║██║░░░░░██╔══██║░╚═══██╗░░░██║░░░██╔══██╗██╔══╝░░██╔══██║██║╚██╔╝██║
██║░╚███║███████╗██████╦╝╚██████╔╝███████╗██║░░██║██████╔╝░░░██║░░░██║░░██║███████╗██║░░██║██║░╚═╝░██║
╚═╝░░╚══╝╚══════╝╚═════╝░░╚═════╝░╚══════╝╚═╝░░╚═╝╚═════╝░░░░╚═╝░░░╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝

▒█▀▀█ █▀▀█ █▀▀█ █▀▀█ █▀▀▄ ░▀░ █▀▀▄ █▀▀█ ▀▀█▀▀ █▀▀█ █▀▀█ 
▒█░░░ █░░█ █░░█ █▄▄▀ █░░█ ▀█▀ █░░█ █▄▄█ ░░█░░ █░░█ █▄▄▀ 
▒█▄▄█ ▀▀▀▀ ▀▀▀▀ ▀░▀▀ ▀▀▀░ ▀▀▀ ▀░░▀ ▀░░▀ ░░▀░░ ▀▀▀▀ ▀░▀▀ v0.5.215-SNAPSHOT
[32m[10:02:20.470141] [I] [thread 130475] [nesCoordinatorStarter.cpp:48] [main] start coordinator with Name: restIp
Description: NES ip of the REST server.
Value: 192.168.2.11
Default Value: 127.0.0.1

Name: coordinatorIp
Description: RPC IP address of NES Coordinator.
Value: 192.168.2.11
Default Value: 127.0.0.1

Name: rpcPort
Description: RPC server port of the Coordinator
Value: 4000
Default Value: 4000

Name: restPort
Description: Port exposed for rest endpoints
Value: 8081
Default Value: 8081

Name: dataPort
Description: Data server port of the Coordinator
Value: 0
Default Value: 0

Name: logLevel
Description: The log level (LOG_NONE, LOG_WARNING, LOG_DEBUG, LOG_INFO, LOG_TRACE)
Value: LOG_DEBUG
Default Value: LOG_INFO

Name: enableQueryReconfiguration
Description: Enable reconfiguration of running query plans. (Default: false)
Value: 0
Default Value: 0

Name: enableMonitoring
Description: Enable monitoring
Value: 0
Default Value: 0

Name: configPath
Description: Path to configuration file.
Value: 
Default Value: 

Name: workerId
Description: Worker id.
Value: 0
Default Value: 0

Name: localWorkerIp
Description: Worker IP.
Value: 127.0.0.1
Default Value: 127.0.0.1

Name: coordinatorIp
Description: Server IP of the NES Coordinator to which the NES Worker should connect.
Value: 127.0.0.1
Default Value: 127.0.0.1

Name: rpcPort
Description: RPC server port of the NES Worker.
Value: 0
Default Value: 0

Name: dataPort
Description: Data port of the NES Worker.
Value: 0
Default Value: 0

Name: coordinatorPort
Description: RPC server Port of the NES Coordinator to which the NES Worker should connect. Needs to be set and needs to be the same as rpcPort in Coordinator.
Value: 4000
Default Value: 4000

Name: numberOfSlots
Description: Number of computing slots for the NES Worker.
Value: 65535
Default Value: 65535

Name: numWorkerThreads
Description: Number of worker threads.
Value: 4
Default Value: 1

Name: numberOfBuffersInGlobalBufferManager
Description: Number buffers in global buffer pool.
Value: 1024
Default Value: 1024

Name: numberOfBuffersPerWorker
Description: Number buffers in task local buffer pool.
Value: 128
Default Value: 128

Name: numberOfBuffersInSourceLocalBufferPool
Description: Number buffers in source local buffer pool.
Value: 64
Default Value: 64

Name: bufferSizeInBytes
Description: BufferSizeInBytes.
Value: 32000
Default Value: 4096

Name: parentId
Description: Parent ID of this node.
Value: 0
Default Value: 0

Name: logLevel
Description: The log level (LOG_NONE, LOG_WARNING, LOG_DEBUG, LOG_INFO, LOG_TRACE)
Value: LOG_INFO
Default Value: LOG_INFO

Name: sourcePinList
Description: comma separated list of where to map the sources
Value: 
Default Value: 

Name: workerPinList
Description: comma separated list of where to map the worker
Value: 
Default Value: 

Name: queuePinList
Description: comma separated list of where to map the worker on the queue
Value: 
Default Value: 

Name: numaAwareness
Description: Enable Numa-Aware execution
Value: 0
Default Value: 0

Name: enableMonitoring
Description: Enable monitoring
Value: 0
Default Value: 0

Name: monitoringWaitTime
Description: Sampling period of metrics (ms).
Value: 1000
Default Value: 1000

Name: queryCompilerType
Description: Indicates the type for the query compiler [DEFAULT_QUERY_COMPILER|NAUTILUS_QUERY_COMPILER].
Value: NAUTILUS_QUERY_COMPILER
Default Value: DEFAULT_QUERY_COMPILER

Name: compilationStrategy
Description: Indicates the optimization strategy for the query compiler [FAST|DEBUG|OPTIMIZE|PROXY_INLINING].
Value: OPTIMIZE
Default Value: OPTIMIZE

Name: pipeliningStrategy
Description: Indicates the pipelining strategy for the query compiler [OPERATOR_FUSION|OPERATOR_AT_A_TIME].
Value: OPERATOR_FUSION
Default Value: OPERATOR_FUSION

Name: queryCompilerNautilusBackendConfig
Description: Indicates the nautilus backend for the nautilus query compiler [MLIR_COMPILER|INTERPRETER|BC_INTERPRETER|FLOUNDER_COMPILER].
Value: MLIR_COMPILER
Default Value: MLIR_COMPILER

Name: outputBufferOptimizationLevel
Description: Indicates the OutputBufferAllocationStrategy [ALL|NO|ONLY_INPLACE_OPERATIONS_NO_FALLBACK,|REUSE_INPUT_BUFFER_AND_OMIT_OVERFLOW_CHECK_NO_FALLBACK,|REUSE_INPUT_BUFFER_NO_FALLBACK|OMIT_OVERFLOW_CHECK_NO_FALLBACK]. 
Value: ALL
Default Value: ALL

Name: windowingStrategy
Description: Indicates the windowingStrategy [LEGACY|SLICING|BUCKETING]. 
Value: LEGACY
Default Value: LEGACY

Name: useCompilationCache
Description: Enable use compilation caching
Value: 0
Default Value: 0

Name: numberOfPartitions
Description: Partitions in the hash table
Value: 1
Default Value: 1

Name: pageSize
Description: Page size of hash table
Value: 131072
Default Value: 131072

Name: preAllocPageCnt
Description: Page count of pre allocated pages in each bucket hash table
Value: 1
Default Value: 1

Name: cudaSdkPath
Description: Path to CUDA SDK.
Value: /usr/local/cuda
Default Value: /usr/local/cuda

Name: maxHashTableSize
Description: Maximum size of hash table
Value: 2097152
Default Value: 2097152

Name: joinStrategy
Description: Indicates the windowingStrategy[HASH_JOIN_LOCAL|HASH_JOIN_GLOBAL_LOCKING|HASH_JOIN_GLOBAL_LOCK_FREE|NESTED_LOOP_JOIN]. 
Value: NESTED_LOOP_JOIN
Default Value: NESTED_LOOP_JOIN


Name: physicalSources
Description: Physical sources


Name: nodeSpatialType
Description: specifies if the worker has no known location or if it is a fixed location node or mobile node
Value: NO_LOCATION
Default Value: NO_LOCATION

Name: locationBufferSize
Description: The amount of past locations to be recorded in order to predict the future trajectory
Value: 30
Default Value: 30

Name: locationBufferSaveRate
Description: Determines after how many location updates a new location will be inserted in the location buffer
Value: 4
Default Value: 4

Name: pathDistanceDelta
Description: when deviating further than delta meters from the current predicted path, an update of the prediction will be triggered
Value: 20
Default Value: 20

Name: nodeInfoDownloadRadius
Description: The radius in meters in which nodes will be downloaded
Value: 10000
Default Value: 10000

Name: nodeIndexUpdateThreshold
Description: Trigger download of new node info when the device is less than threshold away from the boundary of the area covered by the current info
Value: 2000
Default Value: 2000

Name: defaultCoverageRadius
Description: The coverage in meters each field node is assumed to have
Value: 1000
Default Value: 1000

Name: pathPredictionLength
Description: The Length of the predicted path to be computed
Value: 10000
Default Value: 10000

Name: speedDifferenceThresholdFactor
Description: The factor by which the speed needs to change to trigger a recalculation of reconnect predictions
Value: 1e-05
Default Value: 1e-05

Name: sendDevicePositionUpdateThreshold
Description: The distance in meters after which the device will report it's new position in meters
Value: 100
Default Value: 100

Name: pushPositionUpdates
Description: determines if position updates should be sent to the coordinator
Value: 1
Default Value: 1

Name: mobilityHandlerUpdateInterval
Description: the time which the thread running at the worker mobility handler will sleep after each iteration
Value: 10000
Default Value: 10000

Name: locationProviderType
Description: the kind of interface which the  mobile worker gets its geolocation info from
Value: BASE
Default Value: BASE

Name: locationProviderConfig
Description: the configuration data for the location interface
Value: 
Default Value: 

Name: locationProviderSimulatedStartTime
Description: The start time to be simulated if device movement is simulated
Value: 0
Default Value: 0


Name: numberOfQueues
Description: Number of processing queues.
Value: 1
Default Value: 1

Name: numberOfThreadsPerQueue
Description: Number of threads per processing queue.
Value: 0
Default Value: 0

Name: numberOfBuffersPerEpoch
Description: Number of tuple buffers allowed in one epoch.
Value: 100
Default Value: 100

Name: queryManagerMode
Description: Which mode the query manager is running in. (Dynamic, Static, NumaAware, Invalid)
Value: Dynamic
Default Value: Dynamic

Name: enableSourceSharing
Description: Enable source sharing
Value: 0
Default Value: 0

Name: healthCheckWaitTime
Description: Number of seconds to wait between health checks
Value: 1
Default Value: 1

Name: configPath
Description: Path to configuration file.
Value: 
Default Value: 


Name: workerConfigPath
Description: Path to a configuration file for the internal worker.
Value: 
Default Value: 

Name: queryBatchSize
Description: The number of queryIdAndCatalogEntryMapping to be processed together
Value: 1
Default Value: 1

Name: queryMergerRule
Description: The rule to be used for performing query merging
Value: DefaultQueryMergerRule
Default Value: DefaultQueryMergerRule

Name: memoryLayoutPolicy
Description: selects the memory layout selection policy can be [FORCE_ROW_LAYOUT|FORCE_COLUMN_LAYOUT]
Value: FORCE_ROW_LAYOUT
Default Value: FORCE_ROW_LAYOUT

Name: performOnlySourceOperatorExpansion
Description: Perform only source operator duplication when applying Logical Source Expansion Rewrite Rule. (Default: false)
Value: 0
Default Value: 0

Name: performDistributedWindowOptimization
Description: Enables the distribution of window aggregations.
Value: 1
Default Value: 1

Name: distributedWindowChildThreshold
Description: Threshold for the distribution of window aggregations.
Value: 1
Default Value: 2

Name: distributedWindowCombinerThreshold
Description: Threshold for the insertion of pre-aggregation operators.
Value: 1
Default Value: 4

Name: performOnlySourceOperatorExpansion
Description: Perform only source operator duplication when applying Logical Source Expansion Rewrite Rule. (Default: false)
Value: 0
Default Value: 0

Name: advanceSemanticValidation
Description: Perform advance semantic validation on the incoming queryIdAndCatalogEntryMapping. (Default: false)
Value: 0
Default Value: 0

Name: enableNemoPlacement
Description: Enables NEMO distributed window rule to use central windows instead of the distributed windows. (Default: false)
Value: 1
Default Value: 0


Name: logicalSources
Description: Logical Sources

Name: healthCheckWaitTime
Description: Number of seconds to wait between health checks
Value: 1
Default Value: 1

Name: restServerCorsAllowedOrigin
Description: The allowed origins to be set in the header of the responses to rest requests
Value: 
Default Value: 

[m
[32m[10:02:20.470340] [I] [thread 130475] [nesCoordinatorStarter.cpp:50] [main] creating coordinator[m
[36m[10:02:20.470617] [D] [thread 130475] [NesCoordinator.cpp:81] [NesCoordinator] NesCoordinator() restIp=192.168.2.11 restPort=8081 rpcIp=192.168.2.11 rpcPort=4000[m
[36m[10:02:20.471786] [D] [thread 130475] [ExecutablePath.cpp:80] [loadRuntimePathConfig] Detected a build dir as a execution location[m
[32m[10:02:20.472314] [I] [thread 130475] [ExecutablePath.cpp:113] [loadRuntimePathConfig] RuntimePathConfig: 
clangBinaryPath: /home/ubuntu/git/nebulastream/build/nes-llvm-16-v2/clang/bin/clang-16
includePaths: 
	/home/ubuntu/git/nebulastream/build/include/nebulastream
libPaths:
	/home/ubuntu/git/nebulastream/build/nes-common/
	/home/ubuntu/git/nebulastream/build/nes-runtime/
	/home/ubuntu/git/nebulastream/build/nes-core/
	/home/ubuntu/git/nebulastream/build/nes-data-types/[m
[36m[10:02:20.473350] [D] [thread 130475] [SourceCatalog.cpp:41] [SourceCatalog] SourceCatalog: construct source catalog[m
[36m[10:02:20.473434] [D] [thread 130475] [SourceCatalog.cpp:31] [addDefaultSources] Sourcecatalog addDefaultSources[m
[36m[10:02:20.474197] [D] [thread 130475] [SourceCatalog.cpp:56] [addLogicalSource] SourceCatalog: Check if logical source default_logical already exist.[m
[36m[10:02:20.474314] [D] [thread 130475] [SourceCatalog.cpp:59] [addLogicalSource] SourceCatalog: add logical source default_logical[m
[36m[10:02:20.474420] [D] [thread 130475] [SourceCatalog.cpp:43] [SourceCatalog] SourceCatalog: construct source catalog successfully[m
[36m[10:02:20.474831] [D] [thread 130475] [SourceCatalogService.cpp:30] [SourceCatalogService] SourceCatalogService()[m
[36m[10:02:20.475013] [D] [thread 130475] [TopologyManagerService.cpp:36] [TopologyManagerService] TopologyManagerService()[m
[36m[10:02:20.527197] [D] [thread 130475] [RequestProcessorService.cpp:62] [RequestProcessorService] QueryRequestProcessorService()[m
[36m[10:02:20.527299] [D] [thread 130475] [TypeInferencePhase.cpp:32] [TypeInferencePhase] TypeInferencePhase()[m
[36m[10:02:20.527876] [D] [thread 130475] [TypeInferencePhase.cpp:32] [TypeInferencePhase] TypeInferencePhase()[m
[36m[10:02:20.528373] [D] [thread 130475] [DefaultPhaseFactory.cpp:55] [createLowerLogicalQueryPlanPhase] Create default lower logical plan phase[m
[36m[10:02:20.528768] [D] [thread 130475] [DefaultPhaseFactory.cpp:79] [createLowerToExecutableQueryPlanPhase] Create lower to executable query plan phase[m
[36m[10:02:20.529071] [D] [thread 130475] [DefaultPhaseFactory.cpp:42] [createPipeliningPhase] Create pipelining phase with fuse policy[m
[36m[10:02:20.529305] [D] [thread 130475] [DefaultPhaseFactory.cpp:61] [createAddScanAndEmitPhase] Create add scan and emit phase[m
[36m[10:02:20.529779] [D] [thread 130475] [BinaryOperatorSortRule.cpp:28] [BinaryOperatorSortRule] BinaryOperatorSortRule()[m
[36m[10:02:20.530992] [D] [thread 130475] [DistributedWindowRule.cpp:36] [DistributedWindowRule] Create DistributedWindowRule with distributedWindowChildThreshold: 1 distributedWindowCombinerThreshold: 1[m
[36m[10:02:20.531106] [D] [thread 130475] [NemoWindowPinningRule.cpp:45] [NemoWindowPinningRule] Create NemoWindowPinningRule with distributedWindowChildThreshold: 1 distributedWindowCombinerThreshold: 1[m
[36m[10:02:20.531477] [D] [thread 130475] [SignatureInferencePhase.cpp:26] [SignatureInferencePhase] SignatureInferencePhase()[m
[36m[10:02:20.531865] [D] [thread 130475] [QueryPlacementPhase.cpp:39] [QueryPlacementPhase] QueryPlacementPhase()[m
[36m[10:02:20.532227] [D] [thread 130475] [QueryUndeploymentPhase.cpp:35] [QueryUndeploymentPhase] QueryUndeploymentPhase()[m
[36m[10:02:20.533307] [D] [thread 130475] [QueryService.cpp:56] [QueryService] QueryService()[m
[36m[10:02:20.533890] [D] [thread 130475] [MonitoringService.cpp:37] [MonitoringService] MonitoringService: Initializing with monitoring= false[m
[36m[10:02:20.534097] [D] [thread 130475] [LatestEntriesMetricStore.cpp:23] [LatestEntriesMetricStore] LatestEntriesMetricStore: Init NewestMetricStore[m
[36m[10:02:20.534439] [D] [thread 130475] [MonitoringManager.cpp:70] [MonitoringManager] MonitoringManager: Init with monitoring= false , storage= NewestEntry [m
[33m[1m[10:02:20.534556] [W] [thread 130475] [MonitoringManager.cpp:194] [registerLogicalMonitoringStreams] MonitoringManager: Monitoring is disabled, registering of logical monitoring streams not possible.[m
[32m[10:02:20.534606] [I] [thread 130475] [nesCoordinatorStarter.cpp:53] [main] Starting Coordinator[m
[36m[10:02:20.534637] [D] [thread 130475] [NesCoordinator.cpp:159] [startCoordinator] NesCoordinator start[m
[36m[10:02:20.535116] [D] [thread 130475] [NesCoordinator.cpp:174] [startCoordinator] NesCoordinator: startCoordinatorRPCServer: Building GRPC Server[m
[32m[10:02:20.535133] [I] [thread 130483] [NesCoordinator.cpp:169] [operator()] NesCoordinator: started queryRequestProcessor[m
[36m[10:02:20.535178] [D] [thread 130483] [RequestProcessorService.cpp:82] [start] QueryRequestProcessorService: Waiting for new query request trigger[m
[36m[10:02:20.535534] [D] [thread 130484] [NesCoordinator.cpp:180] [operator()] NesCoordinator: buildAndStartGRPCServer[m
[36m[10:02:20.542281] [D] [thread 130484] [NesCoordinator.cpp:354] [buildAndStartGRPCServer] NesCoordinator: buildAndStartGRPCServerServer listening on address=192.168.2.11:4000[m
[36m[10:02:20.542307] [D] [thread 130475] [NesCoordinator.cpp:185] [startCoordinator] NesCoordinator:buildAndStartGRPCServer: ready[m
[36m[10:02:20.542353] [D] [thread 130475] [NesCoordinator.cpp:187] [startCoordinator] NesCoordinator: Register Logical sources[m
[36m[10:02:20.542462] [D] [thread 130475] [NesCoordinator.cpp:192] [startCoordinator] NesCoordinator: Finished Registering Logical source[m
[36m[10:02:20.542471] [D] [thread 130475] [NesCoordinator.cpp:195] [startCoordinator] NesCoordinator::startCoordinator: start nes worker[m
[36m[10:02:20.543232] [D] [thread 130475] [NesWorker.cpp:65] [NesWorker] NesWorker: constructed[m
[36m[10:02:20.543510] [D] [thread 130475] [NesWorker.cpp:138] [start] NesWorker: start with blocking false workerId=0 coordinatorIp=192.168.2.11 coordinatorPort=4000 localWorkerIp=192.168.2.11 localWorkerRpcPort=0 localWorkerZmqPort=0 windowStrategy=LEGACY[m
[36m[10:02:20.543558] [D] [thread 130475] [NesWorker.cpp:140] [start] NesWorker::start: start Runtime[m
[36m[10:02:20.543624] [D] [thread 130475] [NesWorker.cpp:147] [start] NesWorker: MonitoringAgent configured with monitoring=false[m
[36m[10:02:20.544117] [D] [thread 130475] [MonitoringPlan.cpp:21] [MonitoringPlan] MonitoringPlan: Init with metrics of size 4[m
[36m[10:02:20.544258] [D] [thread 130475] [MonitoringCatalog.cpp:36] [defaultCatalog] MonitoringCatalog: Init default catalog[m
[32m[10:02:20.544427] [I] [thread 130475] [SystemResourcesReaderFactory.cpp:25] [getSystemResourcesReader] SystemResourcesReaderFactory: Linux detected, return LinuxSystemResourcesReader[m
[32m[10:02:20.545426] [I] [thread 130475] [CpuCollector.cpp:29] [CpuCollector] CpuCollector: Init CpuCollector with schema node_id:INTEGER(64 bits) timestamp:INTEGER(64 bits) coreNum:INTEGER(64 bits) user:INTEGER(64 bits) nice:INTEGER(64 bits) system:INTEGER(64 bits) idle:INTEGER(64 bits) iowait:INTEGER(64 bits) irq:INTEGER(64 bits) softirq:INTEGER(64 bits) steal:INTEGER(64 bits) guest:INTEGER(64 bits) guestnice:INTEGER(64 bits)[m
[32m[10:02:20.545516] [I] [thread 130475] [SystemResourcesReaderFactory.cpp:25] [getSystemResourcesReader] SystemResourcesReaderFactory: Linux detected, return LinuxSystemResourcesReader[m
[32m[10:02:20.545923] [I] [thread 130475] [DiskCollector.cpp:30] [DiskCollector] DiskCollector: Init DiskCollector with schema node_id:INTEGER(64 bits) timestamp:INTEGER(64 bits) F_BSIZE:INTEGER(64 bits) F_FRSIZE:INTEGER(64 bits) F_BLOCKS:INTEGER(64 bits) F_BFREE:INTEGER(64 bits) F_BAVAIL:INTEGER(64 bits)[m
[32m[10:02:20.546028] [I] [thread 130475] [SystemResourcesReaderFactory.cpp:25] [getSystemResourcesReader] SystemResourcesReaderFactory: Linux detected, return LinuxSystemResourcesReader[m
[32m[10:02:20.546770] [I] [thread 130475] [MemoryCollector.cpp:29] [MemoryCollector] MemoryCollector: Init MemoryCollector with schema node_id:INTEGER(64 bits) timestamp:INTEGER(64 bits) TOTAL_RAM:INTEGER(64 bits) TOTAL_SWAP:INTEGER(64 bits) FREE_RAM:INTEGER(64 bits) SHARED_RAM:INTEGER(64 bits) BUFFER_RAM:INTEGER(64 bits) FREE_SWAP:INTEGER(64 bits) TOTAL_HIGH:INTEGER(64 bits) FREE_HIGH:INTEGER(64 bits) PROCS:INTEGER(64 bits) MEM_UNIT:INTEGER(64 bits) LOADS_1MIN:INTEGER(64 bits) LOADS_5MIN:INTEGER(64 bits) LOADS_15MIN:INTEGER(64 bits)[m
[32m[10:02:20.546837] [I] [thread 130475] [SystemResourcesReaderFactory.cpp:25] [getSystemResourcesReader] SystemResourcesReaderFactory: Linux detected, return LinuxSystemResourcesReader[m
[32m[10:02:20.548004] [I] [thread 130475] [NetworkCollector.cpp:30] [NetworkCollector] NetworkCollector: Init NetworkCollector with schema node_id:INTEGER(64 bits) timestamp:INTEGER(64 bits) name:INTEGER(64 bits) rBytes:INTEGER(64 bits) rPackets:INTEGER(64 bits) rErrs:INTEGER(64 bits) rDrop:INTEGER(64 bits) rFifo:INTEGER(64 bits) rFrame:INTEGER(64 bits) rCompressed:INTEGER(64 bits) rMulticast:INTEGER(64 bits) tBytes:INTEGER(64 bits) tPackets:INTEGER(64 bits) tErrs:INTEGER(64 bits) tDrop:INTEGER(64 bits) tFifo:INTEGER(64 bits) tColls:INTEGER(64 bits) tCarrier:INTEGER(64 bits) tCompressed:INTEGER(64 bits)[m
[36m[10:02:20.548548] [D] [thread 130475] [MonitoringCatalog.cpp:28] [MonitoringCatalog] MonitoringCatalog: Init with collector map of size 4[m
[36m[10:02:20.548857] [D] [thread 130475] [MonitoringAgent.cpp:43] [MonitoringAgent] MonitoringAgent: Init with monitoring plan MonitoringPlan:disk(True);memory(True);network(True);runtimeMetrics(True);staticMetrics(True);memory(True);network(True);runtimeMetrics(True);staticMetrics(True); and enabled=false[m
[33m[1m[10:02:20.549005] [W] [thread 130475] [MonitoringAgent.cpp:117] [addMonitoringStreams] MonitoringAgent: Monitoring is disabled, registering of physical monitoring streams not possible.[m
[36m[10:02:20.561224] [D] [thread 130475] [BufferManager.cpp:107] [initialize] NES memory allocation requires 32768000 out of 3975450624 available bytes[m
[36m[10:02:20.573729] [D] [thread 130475] [BufferManager.cpp:160] [initialize] BufferManager configuration bufferSize=32000 numOfBuffers=1024[m
[36m[10:02:20.624194] [D] [thread 130475] [QueryManager.cpp:78] [DynamicQueryManager] QueryManger: use dynamic mode with numThreads= 4[m
[33m[1m[10:02:20.624710] [W] [thread 130475] [NodeEngineBuilder.cpp:291] [createQueryCompilationOptions] The LEGACY window strategy is not supported by Nautilus. Switch to SLICING![m
[36m[10:02:20.624841] [D] [thread 130475] [DefaultPhaseFactory.cpp:55] [createLowerLogicalQueryPlanPhase] Create default lower logical plan phase[m
[36m[10:02:20.625017] [D] [thread 130475] [DefaultPhaseFactory.cpp:79] [createLowerToExecutableQueryPlanPhase] Create lower to executable query plan phase[m
[36m[10:02:20.625148] [D] [thread 130475] [DefaultPhaseFactory.cpp:42] [createPipeliningPhase] Create pipelining phase with fuse policy[m
[36m[10:02:20.625258] [D] [thread 130475] [DefaultPhaseFactory.cpp:61] [createAddScanAndEmitPhase] Create add scan and emit phase[m
[36m[10:02:20.625580] [D] [thread 130475] [NodeEngineBuilder.cpp:238] [build] Creating default OpenCLManager[m
[36m[10:02:20.625692] [D] [thread 130475] [OpenCLManager.cpp:230] [OpenCLManager] OpenCL support was disabled at build time[m
[36m[10:02:20.626117] [D] [thread 130475] [ExchangeProtocol.cpp:30] [ExchangeProtocol] ExchangeProtocol: Initializing ExchangeProtocol()[m
[36m[10:02:20.626340] [D] [thread 130475] [ZmqServer.cpp:69] [ZmqServer] ZmqServer(192.168.2.11:0) Creating ZmqServer()[m
[36m[10:02:20.626456] [D] [thread 130475] [ZmqServer.cpp:78] [start] ZmqServer(192.168.2.11:0): Starting server..[m
[36m[10:02:20.628962] [D] [thread 130489] [ZmqServer.cpp:156] [routerLoop] ZmqServer(192.168.2.11:0):  Trying to bind on tcp://192.168.2.11:0[m
[36m[10:02:20.630560] [D] [thread 130489] [ZmqServer.cpp:161] [routerLoop] ZmqServer(192.168.2.11:0):  Created socket on 192.168.2.11: 0[m
[36m[10:02:20.630714] [D] [thread 130489] [ZmqServer.cpp:176] [routerLoop] ZmqServer: Created socket on 192.168.2.11: 40903[m
[36m[10:02:20.631912] [D] [thread 130492] [ZmqServer.cpp:254] [messageHandlerEventLoop] Created Zmq Handler Thread #0 on 192.168.2.11: 40903[m
[36m[10:02:20.631913] [D] [thread 130493] [ZmqServer.cpp:254] [messageHandlerEventLoop] Created Zmq Handler Thread #1 on 192.168.2.11: 40903[m
[32m[10:02:20.632059] [I] [thread 130475] [NetworkManager.cpp:36] [NetworkManager] NetworkManager: Server started successfully on tcp://192.168.2.11:40903[m
[36m[10:02:20.632159] [D] [thread 130475] [QueryManager.cpp:140] [startThreadPool] startThreadPool: setup thread pool for nodeEngineId= 1699744136  with numThreads= 4[m
[36m[10:02:20.632568] [D] [thread 130475] [ThreadPool.cpp:108] [start] Threadpool: Spawning 4 threads[m
[36m[10:02:20.633723] [D] [thread 130475] [ThreadPool.cpp:152] [start] Threadpool: start return from start[m
[36m[10:02:20.633790] [D] [thread 130475] [NodeEngine.cpp:78] [NodeEngine] NodeEngine(): thread pool successfully started[m
[36m[10:02:20.633835] [D] [thread 130496] [ThreadPool.cpp:147] [operator()] worker 2 with workerId 2 pins to queue 0[m
[36m[10:02:20.633835] [D] [thread 130494] [ThreadPool.cpp:147] [operator()] worker 0 with workerId 1 pins to queue 0[m
[36m[10:02:20.633940] [D] [thread 130475] [NesWorker.cpp:156] [start] NesWorker: Node engine started successfully[m
[36m[10:02:20.633972] [D] [thread 130475] [NesWorker.cpp:164] [start] NesWorker: request startWorkerRPCServer for accepting messages for address=192.168.2.11:0: 0[m
[36m[10:02:20.634085] [D] [thread 130496] [BufferManager.cpp:367] [createLocalBufferPool] availableBuffers.size()=1024 requested buffers=128[m
[36m[10:02:20.634667] [D] [thread 130497] [ThreadPool.cpp:147] [operator()] worker 3 with workerId 3 pins to queue 0[m
[36m[10:02:20.633835] [D] [thread 130495] [ThreadPool.cpp:147] [operator()] worker 1 with workerId 0 pins to queue 0[m
[36m[10:02:20.634846] [D] [thread 130495] [BufferManager.cpp:367] [createLocalBufferPool] availableBuffers.size()=896 requested buffers=128[m
[36m[10:02:20.635377] [D] [thread 130498] [NesWorker.cpp:176] [operator()] NesWorker: buildAndStartGRPCServer[m
[36m[10:02:20.635529] [D] [thread 130497] [BufferManager.cpp:367] [createLocalBufferPool] availableBuffers.size()=768 requested buffers=128[m
[36m[10:02:20.635834] [D] [thread 130498] [WorkerRPCServer.cpp:38] [WorkerRPCServer] WorkerRPCServer::WorkerRPCServer()[m
[36m[10:02:20.636104] [D] [thread 130494] [BufferManager.cpp:367] [createLocalBufferPool] availableBuffers.size()=640 requested buffers=128[m
[36m[10:02:20.639062] [D] [thread 130498] [NesWorker.cpp:117] [buildAndStartGRPCServer] NesWorker: buildAndStartGRPCServer Server listening on address 192.168.2.11:0: 42713[m
[36m[10:02:20.639101] [D] [thread 130475] [NesWorker.cpp:184] [start] NesWorker: startWorkerRPCServer ready for accepting messages for address=192.168.2.11:42713: 42713[m
[36m[10:02:20.639126] [D] [thread 130475] [NesWorker.cpp:187] [start] NesWorker: start with connect[m
[36m[10:02:20.639154] [D] [thread 130475] [NesWorker.cpp:306] [connect] NesWorker::connect() Registering worker with coordinator at 192.168.2.11:4000[m
[36m[10:02:20.639262] [D] [thread 130475] [CoordinatorRPCClient.cpp:152] [CoordinatorRPCClient] CoordinatorRPCClient(): creating channels to address =192.168.2.11:4000[m
[36m[10:02:20.641637] [D] [thread 130498] [CallData.cpp:36] [proceed] RequestInSyncInCreate=[m
[36m[10:02:20.641961] [D] [thread 130475] [CoordinatorRPCClient.cpp:156] [CoordinatorRPCClient] CoordinatorRPCClient::connecting: channel successfully created[m
[33m[1m[10:02:20.643045] [W] [thread 130475] [MonitoringAgent.cpp:96] [getRegistrationMetrics] MonitoringAgent: Metrics disabled. Return empty metric object for registration.[m
[36m[10:02:20.643101] [D] [thread 130475] [RegistrationMetrics.cpp:32] [RegistrationMetrics] RegistrationMetrics: Default ctor[m
[36m[10:02:20.645356] [D] [thread 130475] [CoordinatorRPCClient.cpp:387] [registerWorker] CoordinatorRPCClient::RegisterNodeRequest request=address: "192.168.2.11"
grpcPort: 42713
dataPort: 40903
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:20.658947] [D] [thread 130485] [CoordinatorRPCServer.cpp:50] [RegisterWorker] Received worker registration request address: "192.168.2.11"
grpcPort: 42713
dataPort: 40903
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:20.659261] [D] [thread 130485] [CoordinatorRPCServer.cpp:65] [RegisterWorker] TopologyManagerService::RegisterNode: request =address: "192.168.2.11"
grpcPort: 42713
dataPort: 40903
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:20.659390] [D] [thread 130485] [TopologyManagerService.cpp:52] [registerWorker] TopologyManagerService::registerWorker: topology before insert[m
[33m[1m[10:02:20.659414] [W] [thread 130485] [Topology.cpp:280] [toString] Topology: No root node found[m
[36m[10:02:20.659426] [D] [thread 130485] [TopologyManagerService.cpp:53] [registerWorker] [m
[36m[10:02:20.659446] [D] [thread 130485] [TopologyManagerService.cpp:87] [registerWorker] TopologyManagerService::registerWorker: register node[m
[36m[10:02:20.659490] [D] [thread 130485] [TopologyNode.cpp:43] [create] TopologyNode: Creating node with ID 1 and resources 65535[m
[36m[10:02:20.659703] [D] [thread 130485] [TopologyManagerService.cpp:99] [registerWorker] TopologyManagerService::registerWorker: tree is empty so this becomes new root[m
[32m[10:02:20.659798] [I] [thread 130485] [Topology.cpp:356] [setAsRoot] Topology: Setting physical node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0] as root to the topology.[m
[36m[10:02:20.659924] [D] [thread 130485] [TopologyManagerService.cpp:111] [registerWorker] TopologyManagerService::registerWorker: topology after insert = [m
[36m[10:02:20.660195] [D] [thread 130485] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
[m
[32m[10:02:20.660290] [I] [thread 130485] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 1[m
[36m[10:02:20.660365] [D] [thread 130485] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 1[m
[36m[10:02:20.660413] [D] [thread 130485] [TopologyManagerService.cpp:317] [addGeoLocation] added node is a non field node[m
[36m[10:02:20.660426] [D] [thread 130485] [TopologyManagerService.cpp:322] [addGeoLocation] added node is a non mobile node[m
[36m[10:02:20.660466] [D] [thread 130485] [RegistrationMetrics.cpp:47] [RegistrationMetrics] RegistrationMetrics: Creating from serializable object.[m
[36m[10:02:20.661868] [D] [thread 130485] [CoordinatorRPCServer.cpp:85] [RegisterWorker] CoordinatorRPCServer::RegisterNode: success id=1[m
[36m[10:02:20.663683] [D] [thread 130475] [NesWorker.cpp:334] [connect] NesWorker::connect() Worker registered successfully and got id=1[m
[36m[10:02:20.663765] [D] [thread 130475] [NesWorker.cpp:341] [connect] NesWorker::connect() Persisting workerId=1 in yaml file for the first time.[m
[36m[10:02:20.663876] [D] [thread 130475] [NesWorker.cpp:347] [connect] NesWorker::connect() Persisted workerId=1 successfully in yaml file.[m
[36m[10:02:20.663891] [D] [thread 130475] [NesWorker.cpp:362] [connect] NesWorker::registerWorker rpc register success with id 1[m
[36m[10:02:20.698943] [D] [thread 130475] [NesWorker.cpp:368] [connect] NesWorker start health check[m
[36m[10:02:20.699079] [D] [thread 130475] [WorkerHealthCheckService.cpp:39] [startHealthCheck] WorkerHealthCheckService::startHealthCheck worker id= 1[m
[36m[10:02:20.699095] [D] [thread 130475] [WorkerHealthCheckService.cpp:41] [startHealthCheck] start health checking on worker[m
[36m[10:02:20.699627] [D] [thread 130475] [NesWorker.cpp:247] [start] NesWorker: started, return[m
[36m[10:02:20.699806] [D] [thread 130475] [NesCoordinator.cpp:210] [startCoordinator] NesCoordinator starting rest server[m
[36m[10:02:20.700461] [D] [thread 130475] [NesCoordinator.cpp:239] [startCoordinator] NesCoordinator::startCoordinatorRESTServer: ready[m
[32m[10:02:20.700548] [I] [thread 130502] [RestServer.cpp:64] [start] Starting Oatpp Server on 192.168.2.11:8081[m
[32m[10:02:20.717177] [I] [thread 130502] [RestServer.cpp:166] [run] NebulaStream REST Server listening on port 8081[m
[36m[10:02:20.717335] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:20.731440] [D] [thread 130475] [NesCoordinator.cpp:244] [startCoordinator] NesCoordinator start health check[m
[36m[10:02:20.731540] [D] [thread 130475] [CoordinatortHealthCheckService.cpp:34] [startHealthCheck] CoordinatorHealthCheckService::startHealthCheck[m
[36m[10:02:20.731633] [D] [thread 130475] [CoordinatortHealthCheckService.cpp:36] [startHealthCheck] start health checking on coordinator[m
[36m[10:02:20.732067] [D] [thread 130475] [NesCoordinator.cpp:248] [startCoordinator] NesCoordinator started, join now and waiting for work[m
[36m[10:02:21.718614] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:22.719925] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:23.509924] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:23.511327] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:23.513600] [D] [thread 130506] [SourceCatalogController.hpp:125] [addLogicalSource] SourceCatalogController: addLogicalSource: REST received request to add new Logical Source.[m
[36m[10:02:23.516550] [D] [thread 130506] [SourceCatalogController.hpp:144] [addLogicalSource] SourceCatalogController: addLogicalSource: Try to add new Logical Source debs and Schema::create()->addField(createField("sid",BasicType::UINT64))->addField(createField("ts",BasicType::UINT64))->addField(createField("x",BasicType::INT64))->addField(createField("y",BasicType::INT64))->addField(createField("z",BasicType::INT64))->addField(createField("absolute_v",BasicType::UINT64))->addField(createField("absolute_a",BasicType::UINT64))->addField(createField("vx",BasicType::INT64))->addField(createField("vy",BasicType::INT64))->addField(createField("vz",BasicType::INT64))->addField(createField("ax",BasicType::INT64))->addField(createField("ay",BasicType::INT64))->addField(createField("az",BasicType::INT64));[m
[36m[10:02:23.516692] [D] [thread 130506] [SourceCatalogService.cpp:92] [registerLogicalSource] SourceCatalogService::registerLogicalSource: register logical source=debs schema= Schema::create()->addField(createField("sid",BasicType::UINT64))->addField(createField("ts",BasicType::UINT64))->addField(createField("x",BasicType::INT64))->addField(createField("y",BasicType::INT64))->addField(createField("z",BasicType::INT64))->addField(createField("absolute_v",BasicType::UINT64))->addField(createField("absolute_a",BasicType::UINT64))->addField(createField("vx",BasicType::INT64))->addField(createField("vy",BasicType::INT64))->addField(createField("vz",BasicType::INT64))->addField(createField("ax",BasicType::INT64))->addField(createField("ay",BasicType::INT64))->addField(createField("az",BasicType::INT64));[m
[36m[10:02:23.516821] [D] [thread 130506] [QueryParsingService.cpp:53] [createSchemaFromCode] QueryParsingService : generated code= #include <API/Schema.hpp>
#include <Common/DataTypes/DataTypeFactory.hpp>
namespace NES{
Schema createSchema(){
return Schema::create()->addField(createField("sid",BasicType::UINT64))->addField(createField("ts",BasicType::UINT64))->addField(createField("x",BasicType::INT64))->addField(createField("y",BasicType::INT64))->addField(createField("z",BasicType::INT64))->addField(createField("absolute_v",BasicType::UINT64))->addField(createField("absolute_a",BasicType::UINT64))->addField(createField("vx",BasicType::INT64))->addField(createField("vy",BasicType::INT64))->addField(createField("vz",BasicType::INT64))->addField(createField("ax",BasicType::INT64))->addField(createField("ay",BasicType::INT64))->addField(createField("az",BasicType::INT64));;}
}
[m
[36m[10:02:23.519425] [D] [thread 130507] [File.cpp:27] [createFile] Create File to file:///tmp/query_13-11-2023_10-02-23_5759291.cpp[m
[36m[10:02:23.520738] [D] [thread 130507] [CPPCompilerFlags.cpp:35] [addSharedLibraryFlag] Compile as shared library.[m
[36m[10:02:23.521478] [D] [thread 130507] [CPPCompiler.cpp:127] [compile] Compiler: compile with: '/home/ubuntu/git/nebulastream/build/nes-llvm-16-v2/clang/bin/clang-16 -DFMT_HEADER_ONLY -o/tmp/query_13-11-2023_10-02-23_5759291.so -DNES_COMPILE_TIME_LOG_LEVEL=6 -I/home/ubuntu/git/nebulastream/build/include/nebulastream -L/home/ubuntu/git/nebulastream/build/nes-core/ -L/home/ubuntu/git/nebulastream/build/nes-common/ -L/home/ubuntu/git/nebulastream/build/nes-data-types/ -shared -L/home/ubuntu/git/nebulastream/build/nes-runtime/ -Wparentheses-equality -fpic -fno-trigraphs -std=c++20 -stdlib=libstdc++ /tmp/query_13-11-2023_10-02-23_5759291.cpp'[m
[36m[10:02:24.512570] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[32m[10:02:25.257317] [I] [thread 130507] [CPPCompiler.cpp:166] [compile] [CPPCompiler] Compilation time: 1738.043425ms[m
[36m[10:02:25.259144] [D] [thread 130506] [SourceCatalog.cpp:49] [addLogicalSource] SourceCatalog: schema successfully created[m
[36m[10:02:25.259244] [D] [thread 130506] [SourceCatalog.cpp:56] [addLogicalSource] SourceCatalog: Check if logical source debs already exist.[m
[36m[10:02:25.259281] [D] [thread 130506] [SourceCatalog.cpp:59] [addLogicalSource] SourceCatalog: add logical source debs[m
[36m[10:02:25.259342] [D] [thread 130506] [SourceCatalogController.hpp:146] [addLogicalSource] SourceCatalogController: addLogicalSource: Successfully added new logical Source ? true[m
[36m[10:02:25.473740] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:25.474197] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[32m[10:02:25.474841] [I] [thread 130513] [TopologyManagerService.cpp:246] [getTopologyAsJson] TopologyController: getting topology as JSON[m
[32m[10:02:25.476091] [I] [thread 130513] [TopologyManagerService.cpp:295] [getTopologyAsJson] TopologyController: no more topology node to add[m
[36m[10:02:25.775764] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:25.776241] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[32m[10:02:25.776901] [I] [thread 130514] [TopologyManagerService.cpp:246] [getTopologyAsJson] TopologyController: getting topology as JSON[m
[32m[10:02:25.777484] [I] [thread 130514] [TopologyManagerService.cpp:295] [getTopologyAsJson] TopologyController: no more topology node to add[m
[36m[10:02:25.945615] [D] [thread 130485] [CoordinatorRPCServer.cpp:50] [RegisterWorker] Received worker registration request address: "192.168.2.12"
grpcPort: 35153
dataPort: 39487
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:25.945928] [D] [thread 130485] [CoordinatorRPCServer.cpp:65] [RegisterWorker] TopologyManagerService::RegisterNode: request =address: "192.168.2.12"
grpcPort: 35153
dataPort: 39487
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:25.946011] [D] [thread 130485] [TopologyManagerService.cpp:52] [registerWorker] TopologyManagerService::registerWorker: topology before insert[m
[36m[10:02:25.946261] [D] [thread 130485] [TopologyManagerService.cpp:53] [registerWorker] [m
[36m[10:02:25.946296] [D] [thread 130485] [TopologyManagerService.cpp:87] [registerWorker] TopologyManagerService::registerWorker: register node[m
[36m[10:02:25.946393] [D] [thread 130485] [TopologyNode.cpp:43] [create] TopologyNode: Creating node with ID 2 and resources 65535[m
[36m[10:02:25.946636] [D] [thread 130485] [TopologyManagerService.cpp:102] [registerWorker] TopologyManagerService::registerWorker: add link to the root node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[32m[10:02:25.946755] [I] [thread 130485] [Topology.cpp:36] [addNewTopologyNodeAsChild] Topology: Adding New Node PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0] to the catalog of nodes.[m
[32m[10:02:25.946981] [I] [thread 130485] [Topology.cpp:39] [addNewTopologyNodeAsChild] Topology: Adding Node PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[36m[10:02:25.947220] [D] [thread 130485] [AbstractHealthCheckService.cpp:48] [addNodeToHealthCheck] HealthCheckService: adding node with id 2[m
[36m[10:02:25.980358] [D] [thread 130485] [TopologyManagerService.cpp:111] [registerWorker] TopologyManagerService::registerWorker: topology after insert = [m
[36m[10:02:25.980739] [D] [thread 130485] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0]
[m
[32m[10:02:25.980824] [I] [thread 130485] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 2[m
[36m[10:02:25.980848] [D] [thread 130485] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 2[m
[36m[10:02:25.980886] [D] [thread 130485] [TopologyManagerService.cpp:317] [addGeoLocation] added node is a non field node[m
[36m[10:02:25.980896] [D] [thread 130485] [TopologyManagerService.cpp:322] [addGeoLocation] added node is a non mobile node[m
[36m[10:02:25.980912] [D] [thread 130485] [RegistrationMetrics.cpp:47] [RegistrationMetrics] RegistrationMetrics: Creating from serializable object.[m
[36m[10:02:25.981399] [D] [thread 130485] [CoordinatorRPCServer.cpp:85] [RegisterWorker] CoordinatorRPCServer::RegisterNode: success id=2[m
[36m[10:02:26.776485] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:27.777738] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:28.779040] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:29.531883] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:29.532406] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[32m[10:02:29.533586] [I] [thread 130515] [TopologyManagerService.cpp:246] [getTopologyAsJson] TopologyController: getting topology as JSON[m
[32m[10:02:29.534474] [I] [thread 130515] [TopologyManagerService.cpp:295] [getTopologyAsJson] TopologyController: no more topology node to add[m
[36m[10:02:29.681209] [D] [thread 130485] [CoordinatorRPCServer.cpp:50] [RegisterWorker] Received worker registration request address: "192.168.2.30"
grpcPort: 35153
dataPort: 38503
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:29.681482] [D] [thread 130485] [CoordinatorRPCServer.cpp:65] [RegisterWorker] TopologyManagerService::RegisterNode: request =address: "192.168.2.30"
grpcPort: 35153
dataPort: 38503
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:29.681557] [D] [thread 130485] [TopologyManagerService.cpp:52] [registerWorker] TopologyManagerService::registerWorker: topology before insert[m
[36m[10:02:29.681835] [D] [thread 130485] [TopologyManagerService.cpp:53] [registerWorker] [m
[36m[10:02:29.681867] [D] [thread 130485] [TopologyManagerService.cpp:87] [registerWorker] TopologyManagerService::registerWorker: register node[m
[36m[10:02:29.681953] [D] [thread 130485] [TopologyNode.cpp:43] [create] TopologyNode: Creating node with ID 3 and resources 65535[m
[36m[10:02:29.682168] [D] [thread 130485] [TopologyManagerService.cpp:102] [registerWorker] TopologyManagerService::registerWorker: add link to the root node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[32m[10:02:29.682292] [I] [thread 130485] [Topology.cpp:36] [addNewTopologyNodeAsChild] Topology: Adding New Node PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0] to the catalog of nodes.[m
[32m[10:02:29.682446] [I] [thread 130485] [Topology.cpp:39] [addNewTopologyNodeAsChild] Topology: Adding Node PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[36m[10:02:29.682555] [D] [thread 130485] [AbstractHealthCheckService.cpp:48] [addNodeToHealthCheck] HealthCheckService: adding node with id 3[m
[36m[10:02:29.682658] [D] [thread 130485] [TopologyManagerService.cpp:111] [registerWorker] TopologyManagerService::registerWorker: topology after insert = [m
[36m[10:02:29.682933] [D] [thread 130485] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0]
[m
[32m[10:02:29.683000] [I] [thread 130485] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 3[m
[36m[10:02:29.683031] [D] [thread 130485] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 3[m
[36m[10:02:29.683107] [D] [thread 130485] [TopologyManagerService.cpp:317] [addGeoLocation] added node is a non field node[m
[36m[10:02:29.683135] [D] [thread 130485] [TopologyManagerService.cpp:322] [addGeoLocation] added node is a non mobile node[m
[36m[10:02:29.683162] [D] [thread 130485] [RegistrationMetrics.cpp:47] [RegistrationMetrics] RegistrationMetrics: Creating from serializable object.[m
[36m[10:02:29.683763] [D] [thread 130485] [CoordinatorRPCServer.cpp:85] [RegisterWorker] CoordinatorRPCServer::RegisterNode: success id=3[m
[36m[10:02:30.533680] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:31.534987] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:32.536287] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:33.416967] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:33.417322] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[32m[10:02:33.417881] [I] [thread 130516] [TopologyManagerService.cpp:246] [getTopologyAsJson] TopologyController: getting topology as JSON[m
[32m[10:02:33.418590] [I] [thread 130516] [TopologyManagerService.cpp:295] [getTopologyAsJson] TopologyController: no more topology node to add[m
[36m[10:02:33.561904] [D] [thread 130500] [CoordinatorRPCServer.cpp:50] [RegisterWorker] Received worker registration request address: "192.168.2.31"
grpcPort: 42843
dataPort: 38713
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:33.562169] [D] [thread 130500] [CoordinatorRPCServer.cpp:65] [RegisterWorker] TopologyManagerService::RegisterNode: request =address: "192.168.2.31"
grpcPort: 42843
dataPort: 38713
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:33.562244] [D] [thread 130500] [TopologyManagerService.cpp:52] [registerWorker] TopologyManagerService::registerWorker: topology before insert[m
[36m[10:02:33.562720] [D] [thread 130500] [TopologyManagerService.cpp:53] [registerWorker] [m
[36m[10:02:33.562816] [D] [thread 130500] [TopologyManagerService.cpp:87] [registerWorker] TopologyManagerService::registerWorker: register node[m
[36m[10:02:33.562971] [D] [thread 130500] [TopologyNode.cpp:43] [create] TopologyNode: Creating node with ID 4 and resources 65535[m
[36m[10:02:33.563413] [D] [thread 130500] [TopologyManagerService.cpp:102] [registerWorker] TopologyManagerService::registerWorker: add link to the root node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[32m[10:02:33.563613] [I] [thread 130500] [Topology.cpp:36] [addNewTopologyNodeAsChild] Topology: Adding New Node PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0] to the catalog of nodes.[m
[32m[10:02:33.563802] [I] [thread 130500] [Topology.cpp:39] [addNewTopologyNodeAsChild] Topology: Adding Node PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[36m[10:02:33.564012] [D] [thread 130500] [AbstractHealthCheckService.cpp:48] [addNodeToHealthCheck] HealthCheckService: adding node with id 4[m
[36m[10:02:33.564251] [D] [thread 130500] [TopologyManagerService.cpp:111] [registerWorker] TopologyManagerService::registerWorker: topology after insert = [m
[36m[10:02:33.564984] [D] [thread 130500] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0]
[m
[32m[10:02:33.565233] [I] [thread 130500] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 4[m
[36m[10:02:33.565275] [D] [thread 130500] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 4[m
[36m[10:02:33.565327] [D] [thread 130500] [TopologyManagerService.cpp:317] [addGeoLocation] added node is a non field node[m
[36m[10:02:33.565352] [D] [thread 130500] [TopologyManagerService.cpp:322] [addGeoLocation] added node is a non mobile node[m
[36m[10:02:33.565380] [D] [thread 130500] [RegistrationMetrics.cpp:47] [RegistrationMetrics] RegistrationMetrics: Creating from serializable object.[m
[36m[10:02:33.566469] [D] [thread 130500] [CoordinatorRPCServer.cpp:85] [RegisterWorker] CoordinatorRPCServer::RegisterNode: success id=4[m
[36m[10:02:34.418574] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:35.419865] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:36.421187] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:36.592722] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:36.593228] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[32m[10:02:36.594134] [I] [thread 130517] [TopologyManagerService.cpp:246] [getTopologyAsJson] TopologyController: getting topology as JSON[m
[32m[10:02:36.595684] [I] [thread 130517] [TopologyManagerService.cpp:295] [getTopologyAsJson] TopologyController: no more topology node to add[m
[36m[10:02:36.937158] [D] [thread 130500] [CoordinatorRPCServer.cpp:50] [RegisterWorker] Received worker registration request address: "192.168.2.32"
grpcPort: 34503
dataPort: 37987
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:36.937425] [D] [thread 130500] [CoordinatorRPCServer.cpp:65] [RegisterWorker] TopologyManagerService::RegisterNode: request =address: "192.168.2.32"
grpcPort: 34503
dataPort: 37987
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:36.937499] [D] [thread 130500] [TopologyManagerService.cpp:52] [registerWorker] TopologyManagerService::registerWorker: topology before insert[m
[36m[10:02:36.937869] [D] [thread 130500] [TopologyManagerService.cpp:53] [registerWorker] [m
[36m[10:02:36.937901] [D] [thread 130500] [TopologyManagerService.cpp:87] [registerWorker] TopologyManagerService::registerWorker: register node[m
[36m[10:02:36.937987] [D] [thread 130500] [TopologyNode.cpp:43] [create] TopologyNode: Creating node with ID 5 and resources 65535[m
[36m[10:02:36.938158] [D] [thread 130500] [TopologyManagerService.cpp:102] [registerWorker] TopologyManagerService::registerWorker: add link to the root node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[32m[10:02:36.938248] [I] [thread 130500] [Topology.cpp:36] [addNewTopologyNodeAsChild] Topology: Adding New Node PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0] to the catalog of nodes.[m
[32m[10:02:36.938395] [I] [thread 130500] [Topology.cpp:39] [addNewTopologyNodeAsChild] Topology: Adding Node PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[36m[10:02:36.938478] [D] [thread 130500] [AbstractHealthCheckService.cpp:48] [addNodeToHealthCheck] HealthCheckService: adding node with id 5[m
[36m[10:02:36.938583] [D] [thread 130500] [TopologyManagerService.cpp:111] [registerWorker] TopologyManagerService::registerWorker: topology after insert = [m
[36m[10:02:36.938943] [D] [thread 130500] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0]
[m
[32m[10:02:36.939010] [I] [thread 130500] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 5[m
[36m[10:02:36.939043] [D] [thread 130500] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 5[m
[36m[10:02:36.939089] [D] [thread 130500] [TopologyManagerService.cpp:317] [addGeoLocation] added node is a non field node[m
[36m[10:02:36.939112] [D] [thread 130500] [TopologyManagerService.cpp:322] [addGeoLocation] added node is a non mobile node[m
[36m[10:02:36.939140] [D] [thread 130500] [RegistrationMetrics.cpp:47] [RegistrationMetrics] RegistrationMetrics: Creating from serializable object.[m
[36m[10:02:36.939740] [D] [thread 130500] [CoordinatorRPCServer.cpp:85] [RegisterWorker] CoordinatorRPCServer::RegisterNode: success id=5[m
[36m[10:02:36.974955] [D] [thread 130500] [CoordinatorRPCServer.cpp:121] [RegisterPhysicalSource] CoordinatorRPCServer::RegisterPhysicalSource: request =workerId: 5
physicalSources {
  sourceType: "CSV_SOURCE"
  physicalSourceName: "test_stream4"
  logicalSourceName: "debs"
}
[m
[32m[10:02:36.975054] [I] [thread 130500] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 5[m
[36m[10:02:36.975080] [D] [thread 130500] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 5[m
[36m[10:02:36.975181] [D] [thread 130500] [SourceCatalogService.cpp:51] [registerPhysicalSource] SourceCatalogService::RegisterPhysicalSource: try to register physical node id 5 physical source= test_stream4 logical source= debs[m
[36m[10:02:36.975550] [D] [thread 130500] [SourceCatalog.cpp:89] [addPhysicalSource] SourceCatalog: search for logical source in addPhysicalSource() debs[m
[36m[10:02:36.975630] [D] [thread 130500] [SourceCatalog.cpp:100] [addPhysicalSource] SourceCatalog: logical source debs exists try to add physical source test_stream4[m
[36m[10:02:36.975845] [D] [thread 130500] [SourceCatalog.cpp:123] [addPhysicalSource] SourceCatalog: physical source  test_stream4 does not exist, try to add[m
[36m[10:02:36.975885] [D] [thread 130500] [SourceCatalog.cpp:127] [addPhysicalSource] SourceCatalog: Logical source already exists, add new physical entry[m
[36m[10:02:36.975958] [D] [thread 130500] [SourceCatalog.cpp:136] [addPhysicalSource] SourceCatalog: physical source with id=5 successful added[m
[36m[10:02:36.975983] [D] [thread 130500] [CoordinatorRPCServer.cpp:133] [RegisterPhysicalSource] CoordinatorRPCServer::RegisterPhysicalSource Succeed[m
[36m[10:02:36.979710] [D] [thread 130500] [CoordinatorRPCServer.cpp:205] [ReplaceParent] CoordinatorRPCServer::ReplaceParent: request = childId: 5
oldParent: 1
newParent: 2
[m
[36m[10:02:36.979811] [D] [thread 130500] [TopologyManagerService.cpp:186] [removeParent] TopologyManagerService::removeParent: childId= 5  parentId= 1[m
[32m[10:02:36.979834] [I] [thread 130500] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 5[m
[36m[10:02:36.979856] [D] [thread 130500] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 5[m
[36m[10:02:36.979876] [D] [thread 130500] [TopologyManagerService.cpp:193] [removeParent] TopologyManagerService::removeParent: source node  5  exists[m
[32m[10:02:36.979888] [I] [thread 130500] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 1[m
[36m[10:02:36.979899] [D] [thread 130500] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 1[m
[36m[10:02:36.979913] [D] [thread 130500] [TopologyManagerService.cpp:201] [removeParent] TopologyManagerService::AddParent: sensorParent node  1  exists[m
[36m[10:02:36.979977] [D] [thread 130500] [TopologyManagerService.cpp:218] [removeParent] TopologyManagerService::removeParent: nodes connected[m
[32m[10:02:36.980090] [I] [thread 130500] [Topology.cpp:363] [removeNodeAsChild] Topology: Removing node PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[36m[10:02:36.980135] [D] [thread 130500] [TopologyManagerService.cpp:225] [removeParent] TopologyManagerService::removeParent: successful[m
[36m[10:02:36.980153] [D] [thread 130500] [CoordinatorRPCServer.cpp:209] [ReplaceParent] CoordinatorRPCServer::ReplaceParent success removeParent[m
[36m[10:02:36.980177] [D] [thread 130500] [TopologyManagerService.cpp:147] [addParent] TopologyManagerService::addParent: childId= 5  parentId= 2[m
[32m[10:02:36.980191] [I] [thread 130500] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 5[m
[36m[10:02:36.980205] [D] [thread 130500] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 5[m
[36m[10:02:36.980220] [D] [thread 130500] [TopologyManagerService.cpp:159] [addParent] TopologyManagerService::AddParent: source node 5 exists[m
[32m[10:02:36.980230] [I] [thread 130500] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 2[m
[36m[10:02:36.980242] [D] [thread 130500] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 2[m
[36m[10:02:36.980255] [D] [thread 130500] [TopologyManagerService.cpp:166] [addParent] TopologyManagerService::AddParent: sensorParent node  2  exists[m
[32m[10:02:36.980377] [I] [thread 130500] [Topology.cpp:39] [addNewTopologyNodeAsChild] Topology: Adding Node PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0][m
[36m[10:02:36.980428] [D] [thread 130500] [TopologyManagerService.cpp:177] [addParent] TopologyManagerService::AddParent: created link successfully new topology is=[m
[36m[10:02:36.980644] [D] [thread 130500] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0]
[m
[36m[10:02:36.980664] [D] [thread 130500] [CoordinatorRPCServer.cpp:212] [ReplaceParent] CoordinatorRPCServer::ReplaceParent success addParent topo=[m
[36m[10:02:37.594483] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:38.595769] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:39.597058] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:39.665400] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:39.665917] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[32m[10:02:39.666937] [I] [thread 130518] [TopologyManagerService.cpp:246] [getTopologyAsJson] TopologyController: getting topology as JSON[m
[32m[10:02:39.668677] [I] [thread 130518] [TopologyManagerService.cpp:295] [getTopologyAsJson] TopologyController: no more topology node to add[m
[36m[10:02:39.813657] [D] [thread 130500] [CoordinatorRPCServer.cpp:50] [RegisterWorker] Received worker registration request address: "192.168.2.33"
grpcPort: 46447
dataPort: 37365
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:39.813922] [D] [thread 130500] [CoordinatorRPCServer.cpp:65] [RegisterWorker] TopologyManagerService::RegisterNode: request =address: "192.168.2.33"
grpcPort: 46447
dataPort: 37365
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:39.814001] [D] [thread 130500] [TopologyManagerService.cpp:52] [registerWorker] TopologyManagerService::registerWorker: topology before insert[m
[36m[10:02:39.814414] [D] [thread 130500] [TopologyManagerService.cpp:53] [registerWorker] [m
[36m[10:02:39.814480] [D] [thread 130500] [TopologyManagerService.cpp:87] [registerWorker] TopologyManagerService::registerWorker: register node[m
[36m[10:02:39.814567] [D] [thread 130500] [TopologyNode.cpp:43] [create] TopologyNode: Creating node with ID 6 and resources 65535[m
[36m[10:02:39.814742] [D] [thread 130500] [TopologyManagerService.cpp:102] [registerWorker] TopologyManagerService::registerWorker: add link to the root node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[32m[10:02:39.814830] [I] [thread 130500] [Topology.cpp:36] [addNewTopologyNodeAsChild] Topology: Adding New Node PhysicalNode[id=6, ip=192.168.2.33, resourceCapacity=65535, usedResource=0] to the catalog of nodes.[m
[32m[10:02:39.814973] [I] [thread 130500] [Topology.cpp:39] [addNewTopologyNodeAsChild] Topology: Adding Node PhysicalNode[id=6, ip=192.168.2.33, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[36m[10:02:39.815058] [D] [thread 130500] [AbstractHealthCheckService.cpp:48] [addNodeToHealthCheck] HealthCheckService: adding node with id 6[m
[36m[10:02:39.815162] [D] [thread 130500] [TopologyManagerService.cpp:111] [registerWorker] TopologyManagerService::registerWorker: topology after insert = [m
[36m[10:02:39.815604] [D] [thread 130500] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=6, ip=192.168.2.33, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0]
[m
[32m[10:02:39.815677] [I] [thread 130500] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 6[m
[36m[10:02:39.815728] [D] [thread 130500] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 6[m
[36m[10:02:39.815782] [D] [thread 130500] [TopologyManagerService.cpp:317] [addGeoLocation] added node is a non field node[m
[36m[10:02:39.815806] [D] [thread 130500] [TopologyManagerService.cpp:322] [addGeoLocation] added node is a non mobile node[m
[36m[10:02:39.815834] [D] [thread 130500] [RegistrationMetrics.cpp:47] [RegistrationMetrics] RegistrationMetrics: Creating from serializable object.[m
[36m[10:02:39.816501] [D] [thread 130500] [CoordinatorRPCServer.cpp:85] [RegisterWorker] CoordinatorRPCServer::RegisterNode: success id=6[m
[36m[10:02:39.852645] [D] [thread 130485] [CoordinatorRPCServer.cpp:121] [RegisterPhysicalSource] CoordinatorRPCServer::RegisterPhysicalSource: request =workerId: 6
physicalSources {
  sourceType: "CSV_SOURCE"
  physicalSourceName: "test_stream5"
  logicalSourceName: "debs"
}
[m
[32m[10:02:39.852755] [I] [thread 130485] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 6[m
[36m[10:02:39.852788] [D] [thread 130485] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 6[m
[36m[10:02:39.852863] [D] [thread 130485] [SourceCatalogService.cpp:51] [registerPhysicalSource] SourceCatalogService::RegisterPhysicalSource: try to register physical node id 6 physical source= test_stream5 logical source= debs[m
[36m[10:02:39.853038] [D] [thread 130485] [SourceCatalog.cpp:89] [addPhysicalSource] SourceCatalog: search for logical source in addPhysicalSource() debs[m
[36m[10:02:39.853082] [D] [thread 130485] [SourceCatalog.cpp:100] [addPhysicalSource] SourceCatalog: logical source debs exists try to add physical source test_stream5[m
[36m[10:02:39.853216] [D] [thread 130485] [SourceCatalog.cpp:110] [addPhysicalSource] test node id=5 phyStr=test_stream4[m
[36m[10:02:39.853265] [D] [thread 130485] [SourceCatalog.cpp:123] [addPhysicalSource] SourceCatalog: physical source  test_stream5 does not exist, try to add[m
[36m[10:02:39.853293] [D] [thread 130485] [SourceCatalog.cpp:127] [addPhysicalSource] SourceCatalog: Logical source already exists, add new physical entry[m
[36m[10:02:39.853457] [D] [thread 130485] [SourceCatalog.cpp:136] [addPhysicalSource] SourceCatalog: physical source with id=6 successful added[m
[36m[10:02:39.853554] [D] [thread 130485] [CoordinatorRPCServer.cpp:133] [RegisterPhysicalSource] CoordinatorRPCServer::RegisterPhysicalSource Succeed[m
[36m[10:02:39.858303] [D] [thread 130519] [CoordinatorRPCServer.cpp:205] [ReplaceParent] CoordinatorRPCServer::ReplaceParent: request = childId: 6
oldParent: 1
newParent: 2
[m
[36m[10:02:39.858417] [D] [thread 130519] [TopologyManagerService.cpp:186] [removeParent] TopologyManagerService::removeParent: childId= 6  parentId= 1[m
[32m[10:02:39.858446] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 6[m
[36m[10:02:39.858474] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 6[m
[36m[10:02:39.858500] [D] [thread 130519] [TopologyManagerService.cpp:193] [removeParent] TopologyManagerService::removeParent: source node  6  exists[m
[32m[10:02:39.858516] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 1[m
[36m[10:02:39.858532] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 1[m
[36m[10:02:39.858551] [D] [thread 130519] [TopologyManagerService.cpp:201] [removeParent] TopologyManagerService::AddParent: sensorParent node  1  exists[m
[36m[10:02:39.858621] [D] [thread 130519] [TopologyManagerService.cpp:218] [removeParent] TopologyManagerService::removeParent: nodes connected[m
[32m[10:02:39.858761] [I] [thread 130519] [Topology.cpp:363] [removeNodeAsChild] Topology: Removing node PhysicalNode[id=6, ip=192.168.2.33, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[36m[10:02:39.858799] [D] [thread 130519] [TopologyManagerService.cpp:225] [removeParent] TopologyManagerService::removeParent: successful[m
[36m[10:02:39.858823] [D] [thread 130519] [CoordinatorRPCServer.cpp:209] [ReplaceParent] CoordinatorRPCServer::ReplaceParent success removeParent[m
[36m[10:02:39.858845] [D] [thread 130519] [TopologyManagerService.cpp:147] [addParent] TopologyManagerService::addParent: childId= 6  parentId= 2[m
[32m[10:02:39.858862] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 6[m
[36m[10:02:39.858882] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 6[m
[36m[10:02:39.858902] [D] [thread 130519] [TopologyManagerService.cpp:159] [addParent] TopologyManagerService::AddParent: source node 6 exists[m
[32m[10:02:39.858917] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 2[m
[36m[10:02:39.858932] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 2[m
[36m[10:02:39.858950] [D] [thread 130519] [TopologyManagerService.cpp:166] [addParent] TopologyManagerService::AddParent: sensorParent node  2  exists[m
[32m[10:02:39.859054] [I] [thread 130519] [Topology.cpp:39] [addNewTopologyNodeAsChild] Topology: Adding Node PhysicalNode[id=6, ip=192.168.2.33, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0][m
[36m[10:02:39.859105] [D] [thread 130519] [TopologyManagerService.cpp:177] [addParent] TopologyManagerService::AddParent: created link successfully new topology is=[m
[36m[10:02:39.859433] [D] [thread 130519] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=6, ip=192.168.2.33, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0]
[m
[36m[10:02:39.859461] [D] [thread 130519] [CoordinatorRPCServer.cpp:212] [ReplaceParent] CoordinatorRPCServer::ReplaceParent success addParent topo=[m
[36m[10:02:40.667186] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:41.668502] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:42.637022] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:42.637493] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[32m[10:02:42.638316] [I] [thread 130520] [TopologyManagerService.cpp:246] [getTopologyAsJson] TopologyController: getting topology as JSON[m
[32m[10:02:42.640214] [I] [thread 130520] [TopologyManagerService.cpp:295] [getTopologyAsJson] TopologyController: no more topology node to add[m
[36m[10:02:42.784222] [D] [thread 130519] [CoordinatorRPCServer.cpp:50] [RegisterWorker] Received worker registration request address: "192.168.2.34"
grpcPort: 42085
dataPort: 39601
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:42.784526] [D] [thread 130519] [CoordinatorRPCServer.cpp:65] [RegisterWorker] TopologyManagerService::RegisterNode: request =address: "192.168.2.34"
grpcPort: 42085
dataPort: 39601
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:42.784606] [D] [thread 130519] [TopologyManagerService.cpp:52] [registerWorker] TopologyManagerService::registerWorker: topology before insert[m
[36m[10:02:42.785063] [D] [thread 130519] [TopologyManagerService.cpp:53] [registerWorker] [m
[36m[10:02:42.785127] [D] [thread 130519] [TopologyManagerService.cpp:87] [registerWorker] TopologyManagerService::registerWorker: register node[m
[36m[10:02:42.785196] [D] [thread 130519] [TopologyNode.cpp:43] [create] TopologyNode: Creating node with ID 7 and resources 65535[m
[36m[10:02:42.785440] [D] [thread 130519] [TopologyManagerService.cpp:102] [registerWorker] TopologyManagerService::registerWorker: add link to the root node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[32m[10:02:42.785520] [I] [thread 130519] [Topology.cpp:36] [addNewTopologyNodeAsChild] Topology: Adding New Node PhysicalNode[id=7, ip=192.168.2.34, resourceCapacity=65535, usedResource=0] to the catalog of nodes.[m
[32m[10:02:42.785642] [I] [thread 130519] [Topology.cpp:39] [addNewTopologyNodeAsChild] Topology: Adding Node PhysicalNode[id=7, ip=192.168.2.34, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[36m[10:02:42.785739] [D] [thread 130519] [AbstractHealthCheckService.cpp:48] [addNodeToHealthCheck] HealthCheckService: adding node with id 7[m
[36m[10:02:42.785829] [D] [thread 130519] [TopologyManagerService.cpp:111] [registerWorker] TopologyManagerService::registerWorker: topology after insert = [m
[36m[10:02:42.786176] [D] [thread 130519] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=7, ip=192.168.2.34, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=6, ip=192.168.2.33, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0]
[m
[32m[10:02:42.786259] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 7[m
[36m[10:02:42.786290] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 7[m
[36m[10:02:42.786328] [D] [thread 130519] [TopologyManagerService.cpp:317] [addGeoLocation] added node is a non field node[m
[36m[10:02:42.786346] [D] [thread 130519] [TopologyManagerService.cpp:322] [addGeoLocation] added node is a non mobile node[m
[36m[10:02:42.786367] [D] [thread 130519] [RegistrationMetrics.cpp:47] [RegistrationMetrics] RegistrationMetrics: Creating from serializable object.[m
[36m[10:02:42.786892] [D] [thread 130519] [CoordinatorRPCServer.cpp:85] [RegisterWorker] CoordinatorRPCServer::RegisterNode: success id=7[m
[36m[10:02:42.822277] [D] [thread 130519] [CoordinatorRPCServer.cpp:121] [RegisterPhysicalSource] CoordinatorRPCServer::RegisterPhysicalSource: request =workerId: 7
physicalSources {
  sourceType: "CSV_SOURCE"
  physicalSourceName: "test_stream6"
  logicalSourceName: "debs"
}
[m
[32m[10:02:42.822377] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 7[m
[36m[10:02:42.822407] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 7[m
[36m[10:02:42.822476] [D] [thread 130519] [SourceCatalogService.cpp:51] [registerPhysicalSource] SourceCatalogService::RegisterPhysicalSource: try to register physical node id 7 physical source= test_stream6 logical source= debs[m
[36m[10:02:42.822641] [D] [thread 130519] [SourceCatalog.cpp:89] [addPhysicalSource] SourceCatalog: search for logical source in addPhysicalSource() debs[m
[36m[10:02:42.822681] [D] [thread 130519] [SourceCatalog.cpp:100] [addPhysicalSource] SourceCatalog: logical source debs exists try to add physical source test_stream6[m
[36m[10:02:42.822740] [D] [thread 130519] [SourceCatalog.cpp:110] [addPhysicalSource] test node id=5 phyStr=test_stream4[m
[36m[10:02:42.822764] [D] [thread 130519] [SourceCatalog.cpp:110] [addPhysicalSource] test node id=6 phyStr=test_stream5[m
[36m[10:02:42.822788] [D] [thread 130519] [SourceCatalog.cpp:123] [addPhysicalSource] SourceCatalog: physical source  test_stream6 does not exist, try to add[m
[36m[10:02:42.822811] [D] [thread 130519] [SourceCatalog.cpp:127] [addPhysicalSource] SourceCatalog: Logical source already exists, add new physical entry[m
[36m[10:02:42.822849] [D] [thread 130519] [SourceCatalog.cpp:136] [addPhysicalSource] SourceCatalog: physical source with id=7 successful added[m
[36m[10:02:42.822868] [D] [thread 130519] [CoordinatorRPCServer.cpp:133] [RegisterPhysicalSource] CoordinatorRPCServer::RegisterPhysicalSource Succeed[m
[36m[10:02:42.826573] [D] [thread 130519] [CoordinatorRPCServer.cpp:205] [ReplaceParent] CoordinatorRPCServer::ReplaceParent: request = childId: 7
oldParent: 1
newParent: 3
[m
[36m[10:02:42.826669] [D] [thread 130519] [TopologyManagerService.cpp:186] [removeParent] TopologyManagerService::removeParent: childId= 7  parentId= 1[m
[32m[10:02:42.826694] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 7[m
[36m[10:02:42.826719] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 7[m
[36m[10:02:42.826742] [D] [thread 130519] [TopologyManagerService.cpp:193] [removeParent] TopologyManagerService::removeParent: source node  7  exists[m
[32m[10:02:42.826756] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 1[m
[36m[10:02:42.826770] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 1[m
[36m[10:02:42.826787] [D] [thread 130519] [TopologyManagerService.cpp:201] [removeParent] TopologyManagerService::AddParent: sensorParent node  1  exists[m
[36m[10:02:42.826852] [D] [thread 130519] [TopologyManagerService.cpp:218] [removeParent] TopologyManagerService::removeParent: nodes connected[m
[32m[10:02:42.826975] [I] [thread 130519] [Topology.cpp:363] [removeNodeAsChild] Topology: Removing node PhysicalNode[id=7, ip=192.168.2.34, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[36m[10:02:42.827016] [D] [thread 130519] [TopologyManagerService.cpp:225] [removeParent] TopologyManagerService::removeParent: successful[m
[36m[10:02:42.827037] [D] [thread 130519] [CoordinatorRPCServer.cpp:209] [ReplaceParent] CoordinatorRPCServer::ReplaceParent success removeParent[m
[36m[10:02:42.827056] [D] [thread 130519] [TopologyManagerService.cpp:147] [addParent] TopologyManagerService::addParent: childId= 7  parentId= 3[m
[32m[10:02:42.827071] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 7[m
[36m[10:02:42.827107] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 7[m
[36m[10:02:42.827129] [D] [thread 130519] [TopologyManagerService.cpp:159] [addParent] TopologyManagerService::AddParent: source node 7 exists[m
[32m[10:02:42.827143] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 3[m
[36m[10:02:42.827158] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 3[m
[36m[10:02:42.827174] [D] [thread 130519] [TopologyManagerService.cpp:166] [addParent] TopologyManagerService::AddParent: sensorParent node  3  exists[m
[32m[10:02:42.827280] [I] [thread 130519] [Topology.cpp:39] [addNewTopologyNodeAsChild] Topology: Adding Node PhysicalNode[id=7, ip=192.168.2.34, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0][m
[36m[10:02:42.827329] [D] [thread 130519] [TopologyManagerService.cpp:177] [addParent] TopologyManagerService::AddParent: created link successfully new topology is=[m
[36m[10:02:42.827634] [D] [thread 130519] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=7, ip=192.168.2.34, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=6, ip=192.168.2.33, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0]
[m
[36m[10:02:42.827676] [D] [thread 130519] [CoordinatorRPCServer.cpp:212] [ReplaceParent] CoordinatorRPCServer::ReplaceParent success addParent topo=[m
[36m[10:02:43.638792] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:44.640113] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:45.641418] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:45.794716] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:45.795283] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[32m[10:02:45.796728] [I] [thread 130521] [TopologyManagerService.cpp:246] [getTopologyAsJson] TopologyController: getting topology as JSON[m
[32m[10:02:45.799057] [I] [thread 130521] [TopologyManagerService.cpp:295] [getTopologyAsJson] TopologyController: no more topology node to add[m
[36m[10:02:45.942768] [D] [thread 130519] [CoordinatorRPCServer.cpp:50] [RegisterWorker] Received worker registration request address: "192.168.2.35"
grpcPort: 39705
dataPort: 45831
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:45.942966] [D] [thread 130519] [CoordinatorRPCServer.cpp:65] [RegisterWorker] TopologyManagerService::RegisterNode: request =address: "192.168.2.35"
grpcPort: 39705
dataPort: 45831
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:45.943022] [D] [thread 130519] [TopologyManagerService.cpp:52] [registerWorker] TopologyManagerService::registerWorker: topology before insert[m
[36m[10:02:45.943344] [D] [thread 130519] [TopologyManagerService.cpp:53] [registerWorker] [m
[36m[10:02:45.943383] [D] [thread 130519] [TopologyManagerService.cpp:87] [registerWorker] TopologyManagerService::registerWorker: register node[m
[36m[10:02:45.943428] [D] [thread 130519] [TopologyNode.cpp:43] [create] TopologyNode: Creating node with ID 8 and resources 65535[m
[36m[10:02:45.943543] [D] [thread 130519] [TopologyManagerService.cpp:102] [registerWorker] TopologyManagerService::registerWorker: add link to the root node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[32m[10:02:45.943595] [I] [thread 130519] [Topology.cpp:36] [addNewTopologyNodeAsChild] Topology: Adding New Node PhysicalNode[id=8, ip=192.168.2.35, resourceCapacity=65535, usedResource=0] to the catalog of nodes.[m
[32m[10:02:45.943700] [I] [thread 130519] [Topology.cpp:39] [addNewTopologyNodeAsChild] Topology: Adding Node PhysicalNode[id=8, ip=192.168.2.35, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[36m[10:02:45.943772] [D] [thread 130519] [AbstractHealthCheckService.cpp:48] [addNodeToHealthCheck] HealthCheckService: adding node with id 8[m
[36m[10:02:45.943845] [D] [thread 130519] [TopologyManagerService.cpp:111] [registerWorker] TopologyManagerService::registerWorker: topology after insert = [m
[36m[10:02:45.944126] [D] [thread 130519] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=8, ip=192.168.2.35, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=7, ip=192.168.2.34, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=6, ip=192.168.2.33, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0]
[m
[32m[10:02:45.944198] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 8[m
[36m[10:02:45.944218] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 8[m
[36m[10:02:45.944249] [D] [thread 130519] [TopologyManagerService.cpp:317] [addGeoLocation] added node is a non field node[m
[36m[10:02:45.944263] [D] [thread 130519] [TopologyManagerService.cpp:322] [addGeoLocation] added node is a non mobile node[m
[36m[10:02:45.944279] [D] [thread 130519] [RegistrationMetrics.cpp:47] [RegistrationMetrics] RegistrationMetrics: Creating from serializable object.[m
[36m[10:02:45.944756] [D] [thread 130519] [CoordinatorRPCServer.cpp:85] [RegisterWorker] CoordinatorRPCServer::RegisterNode: success id=8[m
[36m[10:02:45.980142] [D] [thread 130519] [CoordinatorRPCServer.cpp:121] [RegisterPhysicalSource] CoordinatorRPCServer::RegisterPhysicalSource: request =workerId: 8
physicalSources {
  sourceType: "CSV_SOURCE"
  physicalSourceName: "test_stream7"
  logicalSourceName: "debs"
}
[m
[32m[10:02:45.980266] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 8[m
[36m[10:02:45.980307] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 8[m
[36m[10:02:45.980466] [D] [thread 130519] [SourceCatalogService.cpp:51] [registerPhysicalSource] SourceCatalogService::RegisterPhysicalSource: try to register physical node id 8 physical source= test_stream7 logical source= debs[m
[36m[10:02:45.980682] [D] [thread 130519] [SourceCatalog.cpp:89] [addPhysicalSource] SourceCatalog: search for logical source in addPhysicalSource() debs[m
[36m[10:02:45.980739] [D] [thread 130519] [SourceCatalog.cpp:100] [addPhysicalSource] SourceCatalog: logical source debs exists try to add physical source test_stream7[m
[36m[10:02:45.980819] [D] [thread 130519] [SourceCatalog.cpp:110] [addPhysicalSource] test node id=5 phyStr=test_stream4[m
[36m[10:02:45.980854] [D] [thread 130519] [SourceCatalog.cpp:110] [addPhysicalSource] test node id=6 phyStr=test_stream5[m
[36m[10:02:45.980883] [D] [thread 130519] [SourceCatalog.cpp:110] [addPhysicalSource] test node id=7 phyStr=test_stream6[m
[36m[10:02:45.980918] [D] [thread 130519] [SourceCatalog.cpp:123] [addPhysicalSource] SourceCatalog: physical source  test_stream7 does not exist, try to add[m
[36m[10:02:45.980950] [D] [thread 130519] [SourceCatalog.cpp:127] [addPhysicalSource] SourceCatalog: Logical source already exists, add new physical entry[m
[36m[10:02:45.980985] [D] [thread 130519] [SourceCatalog.cpp:136] [addPhysicalSource] SourceCatalog: physical source with id=8 successful added[m
[36m[10:02:45.981010] [D] [thread 130519] [CoordinatorRPCServer.cpp:133] [RegisterPhysicalSource] CoordinatorRPCServer::RegisterPhysicalSource Succeed[m
[36m[10:02:45.985325] [D] [thread 130519] [CoordinatorRPCServer.cpp:205] [ReplaceParent] CoordinatorRPCServer::ReplaceParent: request = childId: 8
oldParent: 1
newParent: 3
[m
[36m[10:02:45.985423] [D] [thread 130519] [TopologyManagerService.cpp:186] [removeParent] TopologyManagerService::removeParent: childId= 8  parentId= 1[m
[32m[10:02:45.985448] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 8[m
[36m[10:02:45.985473] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 8[m
[36m[10:02:45.985497] [D] [thread 130519] [TopologyManagerService.cpp:193] [removeParent] TopologyManagerService::removeParent: source node  8  exists[m
[32m[10:02:45.985510] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 1[m
[36m[10:02:45.985525] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 1[m
[36m[10:02:45.985541] [D] [thread 130519] [TopologyManagerService.cpp:201] [removeParent] TopologyManagerService::AddParent: sensorParent node  1  exists[m
[36m[10:02:45.985609] [D] [thread 130519] [TopologyManagerService.cpp:218] [removeParent] TopologyManagerService::removeParent: nodes connected[m
[32m[10:02:45.985732] [I] [thread 130519] [Topology.cpp:363] [removeNodeAsChild] Topology: Removing node PhysicalNode[id=8, ip=192.168.2.35, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[36m[10:02:45.985829] [D] [thread 130519] [TopologyManagerService.cpp:225] [removeParent] TopologyManagerService::removeParent: successful[m
[36m[10:02:45.985853] [D] [thread 130519] [CoordinatorRPCServer.cpp:209] [ReplaceParent] CoordinatorRPCServer::ReplaceParent success removeParent[m
[36m[10:02:45.985873] [D] [thread 130519] [TopologyManagerService.cpp:147] [addParent] TopologyManagerService::addParent: childId= 8  parentId= 3[m
[32m[10:02:45.985890] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 8[m
[36m[10:02:45.985909] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 8[m
[36m[10:02:45.985928] [D] [thread 130519] [TopologyManagerService.cpp:159] [addParent] TopologyManagerService::AddParent: source node 8 exists[m
[32m[10:02:45.985942] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 3[m
[36m[10:02:45.985956] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 3[m
[36m[10:02:45.985990] [D] [thread 130519] [TopologyManagerService.cpp:166] [addParent] TopologyManagerService::AddParent: sensorParent node  3  exists[m
[32m[10:02:45.986097] [I] [thread 130519] [Topology.cpp:39] [addNewTopologyNodeAsChild] Topology: Adding Node PhysicalNode[id=8, ip=192.168.2.35, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0][m
[36m[10:02:45.986146] [D] [thread 130519] [TopologyManagerService.cpp:177] [addParent] TopologyManagerService::AddParent: created link successfully new topology is=[m
[36m[10:02:45.986480] [D] [thread 130519] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=8, ip=192.168.2.35, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=7, ip=192.168.2.34, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=6, ip=192.168.2.33, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0]
[m
[36m[10:02:45.986508] [D] [thread 130519] [CoordinatorRPCServer.cpp:212] [ReplaceParent] CoordinatorRPCServer::ReplaceParent success addParent topo=[m
[36m[10:02:46.796573] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:47.797814] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:48.799148] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:48.984571] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:48.985002] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[32m[10:02:48.985605] [I] [thread 130522] [TopologyManagerService.cpp:246] [getTopologyAsJson] TopologyController: getting topology as JSON[m
[32m[10:02:48.986803] [I] [thread 130522] [TopologyManagerService.cpp:295] [getTopologyAsJson] TopologyController: no more topology node to add[m
[36m[10:02:49.167566] [D] [thread 130519] [CoordinatorRPCServer.cpp:50] [RegisterWorker] Received worker registration request address: "192.168.2.37"
grpcPort: 38213
dataPort: 34023
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:49.167851] [D] [thread 130519] [CoordinatorRPCServer.cpp:65] [RegisterWorker] TopologyManagerService::RegisterNode: request =address: "192.168.2.37"
grpcPort: 38213
dataPort: 34023
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:49.167937] [D] [thread 130519] [TopologyManagerService.cpp:52] [registerWorker] TopologyManagerService::registerWorker: topology before insert[m
[36m[10:02:49.168575] [D] [thread 130519] [TopologyManagerService.cpp:53] [registerWorker] [m
[36m[10:02:49.168648] [D] [thread 130519] [TopologyManagerService.cpp:87] [registerWorker] TopologyManagerService::registerWorker: register node[m
[36m[10:02:49.168725] [D] [thread 130519] [TopologyNode.cpp:43] [create] TopologyNode: Creating node with ID 9 and resources 65535[m
[36m[10:02:49.168896] [D] [thread 130519] [TopologyManagerService.cpp:102] [registerWorker] TopologyManagerService::registerWorker: add link to the root node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[32m[10:02:49.168989] [I] [thread 130519] [Topology.cpp:36] [addNewTopologyNodeAsChild] Topology: Adding New Node PhysicalNode[id=9, ip=192.168.2.37, resourceCapacity=65535, usedResource=0] to the catalog of nodes.[m
[32m[10:02:49.169170] [I] [thread 130519] [Topology.cpp:39] [addNewTopologyNodeAsChild] Topology: Adding Node PhysicalNode[id=9, ip=192.168.2.37, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[36m[10:02:49.169259] [D] [thread 130519] [AbstractHealthCheckService.cpp:48] [addNodeToHealthCheck] HealthCheckService: adding node with id 9[m
[36m[10:02:49.169363] [D] [thread 130519] [TopologyManagerService.cpp:111] [registerWorker] TopologyManagerService::registerWorker: topology after insert = [m
[36m[10:02:49.169910] [D] [thread 130519] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=9, ip=192.168.2.37, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=8, ip=192.168.2.35, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=7, ip=192.168.2.34, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=6, ip=192.168.2.33, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0]
[m
[32m[10:02:49.169979] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 9[m
[36m[10:02:49.170012] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 9[m
[36m[10:02:49.170059] [D] [thread 130519] [TopologyManagerService.cpp:317] [addGeoLocation] added node is a non field node[m
[36m[10:02:49.170083] [D] [thread 130519] [TopologyManagerService.cpp:322] [addGeoLocation] added node is a non mobile node[m
[36m[10:02:49.170111] [D] [thread 130519] [RegistrationMetrics.cpp:47] [RegistrationMetrics] RegistrationMetrics: Creating from serializable object.[m
[36m[10:02:49.170707] [D] [thread 130519] [CoordinatorRPCServer.cpp:85] [RegisterWorker] CoordinatorRPCServer::RegisterNode: success id=9[m
[36m[10:02:49.206401] [D] [thread 130519] [CoordinatorRPCServer.cpp:121] [RegisterPhysicalSource] CoordinatorRPCServer::RegisterPhysicalSource: request =workerId: 9
physicalSources {
  sourceType: "CSV_SOURCE"
  physicalSourceName: "test_stream8"
  logicalSourceName: "debs"
}
[m
[32m[10:02:49.206483] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 9[m
[36m[10:02:49.206507] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 9[m
[36m[10:02:49.206564] [D] [thread 130519] [SourceCatalogService.cpp:51] [registerPhysicalSource] SourceCatalogService::RegisterPhysicalSource: try to register physical node id 9 physical source= test_stream8 logical source= debs[m
[36m[10:02:49.206703] [D] [thread 130519] [SourceCatalog.cpp:89] [addPhysicalSource] SourceCatalog: search for logical source in addPhysicalSource() debs[m
[36m[10:02:49.206733] [D] [thread 130519] [SourceCatalog.cpp:100] [addPhysicalSource] SourceCatalog: logical source debs exists try to add physical source test_stream8[m
[36m[10:02:49.206782] [D] [thread 130519] [SourceCatalog.cpp:110] [addPhysicalSource] test node id=5 phyStr=test_stream4[m
[36m[10:02:49.206799] [D] [thread 130519] [SourceCatalog.cpp:110] [addPhysicalSource] test node id=6 phyStr=test_stream5[m
[36m[10:02:49.206812] [D] [thread 130519] [SourceCatalog.cpp:110] [addPhysicalSource] test node id=7 phyStr=test_stream6[m
[36m[10:02:49.206825] [D] [thread 130519] [SourceCatalog.cpp:110] [addPhysicalSource] test node id=8 phyStr=test_stream7[m
[36m[10:02:49.206843] [D] [thread 130519] [SourceCatalog.cpp:123] [addPhysicalSource] SourceCatalog: physical source  test_stream8 does not exist, try to add[m
[36m[10:02:49.206876] [D] [thread 130519] [SourceCatalog.cpp:127] [addPhysicalSource] SourceCatalog: Logical source already exists, add new physical entry[m
[36m[10:02:49.206909] [D] [thread 130519] [SourceCatalog.cpp:136] [addPhysicalSource] SourceCatalog: physical source with id=9 successful added[m
[36m[10:02:49.206923] [D] [thread 130519] [CoordinatorRPCServer.cpp:133] [RegisterPhysicalSource] CoordinatorRPCServer::RegisterPhysicalSource Succeed[m
[36m[10:02:49.210504] [D] [thread 130485] [CoordinatorRPCServer.cpp:205] [ReplaceParent] CoordinatorRPCServer::ReplaceParent: request = childId: 9
oldParent: 1
newParent: 4
[m
[36m[10:02:49.210584] [D] [thread 130485] [TopologyManagerService.cpp:186] [removeParent] TopologyManagerService::removeParent: childId= 9  parentId= 1[m
[32m[10:02:49.210603] [I] [thread 130485] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 9[m
[36m[10:02:49.210622] [D] [thread 130485] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 9[m
[36m[10:02:49.210640] [D] [thread 130485] [TopologyManagerService.cpp:193] [removeParent] TopologyManagerService::removeParent: source node  9  exists[m
[32m[10:02:49.210650] [I] [thread 130485] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 1[m
[36m[10:02:49.210660] [D] [thread 130485] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 1[m
[36m[10:02:49.210671] [D] [thread 130485] [TopologyManagerService.cpp:201] [removeParent] TopologyManagerService::AddParent: sensorParent node  1  exists[m
[36m[10:02:49.210726] [D] [thread 130485] [TopologyManagerService.cpp:218] [removeParent] TopologyManagerService::removeParent: nodes connected[m
[32m[10:02:49.210829] [I] [thread 130485] [Topology.cpp:363] [removeNodeAsChild] Topology: Removing node PhysicalNode[id=9, ip=192.168.2.37, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[36m[10:02:49.210883] [D] [thread 130485] [TopologyManagerService.cpp:225] [removeParent] TopologyManagerService::removeParent: successful[m
[36m[10:02:49.210903] [D] [thread 130485] [CoordinatorRPCServer.cpp:209] [ReplaceParent] CoordinatorRPCServer::ReplaceParent success removeParent[m
[36m[10:02:49.210919] [D] [thread 130485] [TopologyManagerService.cpp:147] [addParent] TopologyManagerService::addParent: childId= 9  parentId= 4[m
[32m[10:02:49.210930] [I] [thread 130485] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 9[m
[36m[10:02:49.210943] [D] [thread 130485] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 9[m
[36m[10:02:49.210970] [D] [thread 130485] [TopologyManagerService.cpp:159] [addParent] TopologyManagerService::AddParent: source node 9 exists[m
[32m[10:02:49.211059] [I] [thread 130485] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 4[m
[36m[10:02:49.211089] [D] [thread 130485] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 4[m
[36m[10:02:49.211126] [D] [thread 130485] [TopologyManagerService.cpp:166] [addParent] TopologyManagerService::AddParent: sensorParent node  4  exists[m
[32m[10:02:49.211286] [I] [thread 130485] [Topology.cpp:39] [addNewTopologyNodeAsChild] Topology: Adding Node PhysicalNode[id=9, ip=192.168.2.37, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0][m
[36m[10:02:49.211343] [D] [thread 130485] [TopologyManagerService.cpp:177] [addParent] TopologyManagerService::AddParent: created link successfully new topology is=[m
[36m[10:02:49.211999] [D] [thread 130485] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=9, ip=192.168.2.37, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=8, ip=192.168.2.35, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=7, ip=192.168.2.34, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=6, ip=192.168.2.33, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0]
[m
[36m[10:02:49.212063] [D] [thread 130485] [CoordinatorRPCServer.cpp:212] [ReplaceParent] CoordinatorRPCServer::ReplaceParent success addParent topo=[m
[36m[10:02:49.986214] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:50.987471] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:51.988441] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:52.051725] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:52.052255] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[32m[10:02:52.053358] [I] [thread 130523] [TopologyManagerService.cpp:246] [getTopologyAsJson] TopologyController: getting topology as JSON[m
[32m[10:02:52.055539] [I] [thread 130523] [TopologyManagerService.cpp:295] [getTopologyAsJson] TopologyController: no more topology node to add[m
[36m[10:02:52.200704] [D] [thread 130485] [CoordinatorRPCServer.cpp:50] [RegisterWorker] Received worker registration request address: "192.168.2.38"
grpcPort: 41905
dataPort: 42645
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:52.200930] [D] [thread 130485] [CoordinatorRPCServer.cpp:65] [RegisterWorker] TopologyManagerService::RegisterNode: request =address: "192.168.2.38"
grpcPort: 41905
dataPort: 42645
numberOfSlots: 65535
registrationMetrics {
}
[m
[36m[10:02:52.200998] [D] [thread 130485] [TopologyManagerService.cpp:52] [registerWorker] TopologyManagerService::registerWorker: topology before insert[m
[36m[10:02:52.201468] [D] [thread 130485] [TopologyManagerService.cpp:53] [registerWorker] [m
[36m[10:02:52.201522] [D] [thread 130485] [TopologyManagerService.cpp:87] [registerWorker] TopologyManagerService::registerWorker: register node[m
[36m[10:02:52.201591] [D] [thread 130485] [TopologyNode.cpp:43] [create] TopologyNode: Creating node with ID 10 and resources 65535[m
[36m[10:02:52.201727] [D] [thread 130485] [TopologyManagerService.cpp:102] [registerWorker] TopologyManagerService::registerWorker: add link to the root node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[32m[10:02:52.201798] [I] [thread 130485] [Topology.cpp:36] [addNewTopologyNodeAsChild] Topology: Adding New Node PhysicalNode[id=10, ip=192.168.2.38, resourceCapacity=65535, usedResource=0] to the catalog of nodes.[m
[32m[10:02:52.201909] [I] [thread 130485] [Topology.cpp:39] [addNewTopologyNodeAsChild] Topology: Adding Node PhysicalNode[id=10, ip=192.168.2.38, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[36m[10:02:52.201979] [D] [thread 130485] [AbstractHealthCheckService.cpp:48] [addNodeToHealthCheck] HealthCheckService: adding node with id 10[m
[36m[10:02:52.202065] [D] [thread 130485] [TopologyManagerService.cpp:111] [registerWorker] TopologyManagerService::registerWorker: topology after insert = [m
[36m[10:02:52.202553] [D] [thread 130485] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=10, ip=192.168.2.38, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=9, ip=192.168.2.37, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=8, ip=192.168.2.35, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=7, ip=192.168.2.34, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=6, ip=192.168.2.33, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0]
[m
[32m[10:02:52.202637] [I] [thread 130485] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 10[m
[36m[10:02:52.202666] [D] [thread 130485] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 10[m
[36m[10:02:52.202705] [D] [thread 130485] [TopologyManagerService.cpp:317] [addGeoLocation] added node is a non field node[m
[36m[10:02:52.202723] [D] [thread 130485] [TopologyManagerService.cpp:322] [addGeoLocation] added node is a non mobile node[m
[36m[10:02:52.202746] [D] [thread 130485] [RegistrationMetrics.cpp:47] [RegistrationMetrics] RegistrationMetrics: Creating from serializable object.[m
[36m[10:02:52.203249] [D] [thread 130485] [CoordinatorRPCServer.cpp:85] [RegisterWorker] CoordinatorRPCServer::RegisterNode: success id=10[m
[36m[10:02:52.238533] [D] [thread 130519] [CoordinatorRPCServer.cpp:121] [RegisterPhysicalSource] CoordinatorRPCServer::RegisterPhysicalSource: request =workerId: 10
physicalSources {
  sourceType: "CSV_SOURCE"
  physicalSourceName: "test_stream9"
  logicalSourceName: "debs"
}
[m
[32m[10:02:52.238634] [I] [thread 130519] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 10[m
[36m[10:02:52.238664] [D] [thread 130519] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 10[m
[36m[10:02:52.238736] [D] [thread 130519] [SourceCatalogService.cpp:51] [registerPhysicalSource] SourceCatalogService::RegisterPhysicalSource: try to register physical node id 10 physical source= test_stream9 logical source= debs[m
[36m[10:02:52.238903] [D] [thread 130519] [SourceCatalog.cpp:89] [addPhysicalSource] SourceCatalog: search for logical source in addPhysicalSource() debs[m
[36m[10:02:52.238944] [D] [thread 130519] [SourceCatalog.cpp:100] [addPhysicalSource] SourceCatalog: logical source debs exists try to add physical source test_stream9[m
[36m[10:02:52.239186] [D] [thread 130519] [SourceCatalog.cpp:110] [addPhysicalSource] test node id=5 phyStr=test_stream4[m
[36m[10:02:52.239226] [D] [thread 130519] [SourceCatalog.cpp:110] [addPhysicalSource] test node id=6 phyStr=test_stream5[m
[36m[10:02:52.239250] [D] [thread 130519] [SourceCatalog.cpp:110] [addPhysicalSource] test node id=7 phyStr=test_stream6[m
[36m[10:02:52.239359] [D] [thread 130519] [SourceCatalog.cpp:110] [addPhysicalSource] test node id=8 phyStr=test_stream7[m
[36m[10:02:52.239404] [D] [thread 130519] [SourceCatalog.cpp:110] [addPhysicalSource] test node id=9 phyStr=test_stream8[m
[36m[10:02:52.239508] [D] [thread 130519] [SourceCatalog.cpp:123] [addPhysicalSource] SourceCatalog: physical source  test_stream9 does not exist, try to add[m
[36m[10:02:52.239610] [D] [thread 130519] [SourceCatalog.cpp:127] [addPhysicalSource] SourceCatalog: Logical source already exists, add new physical entry[m
[36m[10:02:52.239804] [D] [thread 130519] [SourceCatalog.cpp:136] [addPhysicalSource] SourceCatalog: physical source with id=10 successful added[m
[36m[10:02:52.239901] [D] [thread 130519] [CoordinatorRPCServer.cpp:133] [RegisterPhysicalSource] CoordinatorRPCServer::RegisterPhysicalSource Succeed[m
[36m[10:02:52.243978] [D] [thread 130524] [CoordinatorRPCServer.cpp:205] [ReplaceParent] CoordinatorRPCServer::ReplaceParent: request = childId: 10
oldParent: 1
newParent: 4
[m
[36m[10:02:52.244086] [D] [thread 130524] [TopologyManagerService.cpp:186] [removeParent] TopologyManagerService::removeParent: childId= 10  parentId= 1[m
[32m[10:02:52.244113] [I] [thread 130524] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 10[m
[36m[10:02:52.244139] [D] [thread 130524] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 10[m
[36m[10:02:52.244163] [D] [thread 130524] [TopologyManagerService.cpp:193] [removeParent] TopologyManagerService::removeParent: source node  10  exists[m
[32m[10:02:52.244177] [I] [thread 130524] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 1[m
[36m[10:02:52.244191] [D] [thread 130524] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 1[m
[36m[10:02:52.244208] [D] [thread 130524] [TopologyManagerService.cpp:201] [removeParent] TopologyManagerService::AddParent: sensorParent node  1  exists[m
[36m[10:02:52.244274] [D] [thread 130524] [TopologyManagerService.cpp:218] [removeParent] TopologyManagerService::removeParent: nodes connected[m
[32m[10:02:52.244447] [I] [thread 130524] [Topology.cpp:363] [removeNodeAsChild] Topology: Removing node PhysicalNode[id=10, ip=192.168.2.38, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0][m
[36m[10:02:52.244487] [D] [thread 130524] [TopologyManagerService.cpp:225] [removeParent] TopologyManagerService::removeParent: successful[m
[36m[10:02:52.244509] [D] [thread 130524] [CoordinatorRPCServer.cpp:209] [ReplaceParent] CoordinatorRPCServer::ReplaceParent success removeParent[m
[36m[10:02:52.244529] [D] [thread 130524] [TopologyManagerService.cpp:147] [addParent] TopologyManagerService::addParent: childId= 10  parentId= 4[m
[32m[10:02:52.244545] [I] [thread 130524] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 10[m
[36m[10:02:52.244562] [D] [thread 130524] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 10[m
[36m[10:02:52.244594] [D] [thread 130524] [TopologyManagerService.cpp:159] [addParent] TopologyManagerService::AddParent: source node 10 exists[m
[32m[10:02:52.244612] [I] [thread 130524] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 4[m
[36m[10:02:52.244627] [D] [thread 130524] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 4[m
[36m[10:02:52.244644] [D] [thread 130524] [TopologyManagerService.cpp:166] [addParent] TopologyManagerService::AddParent: sensorParent node  4  exists[m
[32m[10:02:52.244749] [I] [thread 130524] [Topology.cpp:39] [addNewTopologyNodeAsChild] Topology: Adding Node PhysicalNode[id=10, ip=192.168.2.38, resourceCapacity=65535, usedResource=0] as child to the node PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0][m
[36m[10:02:52.244798] [D] [thread 130524] [TopologyManagerService.cpp:177] [addParent] TopologyManagerService::AddParent: created link successfully new topology is=[m
[36m[10:02:52.245204] [D] [thread 130524] [Topology.cpp:317] [print] Topology print:
PhysicalNode[id=1, ip=192.168.2.11, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=10, ip=192.168.2.38, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=9, ip=192.168.2.37, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=8, ip=192.168.2.35, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=7, ip=192.168.2.34, resourceCapacity=65535, usedResource=0]
|--PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=6, ip=192.168.2.33, resourceCapacity=65535, usedResource=0]
|  |--PhysicalNode[id=5, ip=192.168.2.32, resourceCapacity=65535, usedResource=0]
[m
[36m[10:02:52.245247] [D] [thread 130524] [CoordinatorRPCServer.cpp:212] [ReplaceParent] CoordinatorRPCServer::ReplaceParent success addParent topo=[m
[36m[10:02:53.053559] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:54.054843] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:54.215914] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:54.216462] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[32m[10:02:54.217348] [I] [thread 130525] [TopologyManagerService.cpp:246] [getTopologyAsJson] TopologyController: getting topology as JSON[m
[32m[10:02:54.220224] [I] [thread 130525] [TopologyManagerService.cpp:295] [getTopologyAsJson] TopologyController: no more topology node to add[m
[36m[10:02:55.217720] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:55.566088] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:55.567282] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:55.709089] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:55.709757] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:55.711685] [D] [thread 130530] [QueryController.hpp:223] [submitQuery] QueryController: handlePost -execute-query: Params: userQuery= Query::from("debs").project(Attribute("sid"), Attribute("ts"), Attribute("absolute_v")).window(TumblingWindow::of(EventTime(Attribute("ts")), Minutes(1))).byKey(Attribute("sid")).apply(Min(Attribute("absolute_v"))).sink(FileSinkDescriptor::create("/home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out","CSV_FORMAT","APPEND", true));, strategyName= BottomUp, faultTolerance= NONE, lineage= NONE[m
[32m[10:02:55.711820] [I] [thread 130530] [QueryService.cpp:69] [validateAndQueueAddQueryRequest] QueryService: Validating and registering the user query.[m
[32m[10:02:55.711849] [I] [thread 130530] [QueryService.cpp:73] [validateAndQueueAddQueryRequest] QueryService: check validation of a query.[m
[36m[10:02:55.711903] [D] [thread 130530] [SyntacticQueryValidation.cpp:40] [validate] SyntacticQueryValidation: parse C++ query from query string.[m
[36m[10:02:55.712007] [D] [thread 130530] [QueryParsingService.cpp:94] [createQueryFromCodeString]  QueryParsingService: source name = "debs"[m
[36m[10:02:55.712083] [D] [thread 130530] [QueryParsingService.cpp:100] [createQueryFromCodeString] QueryParsingService: parsed query = return Query::from("debs").project(Attribute("sid"), Attribute("ts"), Attribute("absolute_v")).window(TumblingWindow::of(EventTime(Attribute("ts")), Minutes(1))).byKey(Attribute("sid")).apply(Min(Attribute("absolute_v"))).sink(FileSinkDescriptor::create("/home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out","CSV_FORMAT","APPEND", true));[m
[36m[10:02:55.712153] [D] [thread 130530] [QueryParsingService.cpp:104] [createQueryFromCodeString] QueryParsingService: query code
#include <API/QueryAPI.hpp>
namespace NES{
Query createQuery(){
return Query::from("debs").project(Attribute("sid"), Attribute("ts"), Attribute("absolute_v")).window(TumblingWindow::of(EventTime(Attribute("ts")), Minutes(1))).byKey(Attribute("sid")).apply(Min(Attribute("absolute_v"))).sink(FileSinkDescriptor::create("/home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out","CSV_FORMAT","APPEND", true));
}
}
[m
[36m[10:02:55.713618] [D] [thread 130531] [File.cpp:27] [createFile] Create File to file:///tmp/query_13-11-2023_10-02-55_9025200.cpp[m
[36m[10:02:55.714184] [D] [thread 130531] [CPPCompilerFlags.cpp:35] [addSharedLibraryFlag] Compile as shared library.[m
[36m[10:02:55.714271] [D] [thread 130531] [CPPCompilerFlags.cpp:64] [enableProfilingFlags] Compilation Time tracing is activated open: chrome://tracing/[m
[36m[10:02:55.714638] [D] [thread 130531] [CPPCompiler.cpp:127] [compile] Compiler: compile with: '/home/ubuntu/git/nebulastream/build/nes-llvm-16-v2/clang/bin/clang-16 -DNES_COMPILE_TIME_LOG_LEVEL=6 -fno-trigraphs -fpic -Wparentheses-equality -L/home/ubuntu/git/nebulastream/build/nes-runtime/ -std=c++20 -stdlib=libstdc++ -shared -L/home/ubuntu/git/nebulastream/build/nes-data-types/ -ftime-trace -L/home/ubuntu/git/nebulastream/build/nes-common/ -L/home/ubuntu/git/nebulastream/build/nes-core/ -o/tmp/query_13-11-2023_10-02-55_9025200.so -I/home/ubuntu/git/nebulastream/build/include/nebulastream -DFMT_HEADER_ONLY /tmp/query_13-11-2023_10-02-55_9025200.cpp'[m
[36m[10:02:56.711087] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:57.712387] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[32m[10:02:58.693462] [I] [thread 130531] [CPPCompiler.cpp:166] [compile] [CPPCompiler] Compilation time: 2979.962238ms[m
[36m[10:02:58.693808] [D] [thread 130530] [Query.cpp:231] [from] Query: create new Query with source debs[m
[36m[10:02:58.693879] [D] [thread 130530] [QueryPlanBuilder.cpp:43] [createQueryPlan] QueryPlanBuilder: create query plan for input source  debs[m
[32m[10:02:58.694259] [I] [thread 130530] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 1[m
[36m[10:02:58.694968] [D] [thread 130530] [Query.cpp:237] [project] Query: add projection to query[m
[36m[10:02:58.695053] [D] [thread 130530] [QueryPlanBuilder.cpp:51] [addProjection] QueryPlanBuilder: add projection operator to query plan[m
[32m[10:02:58.695147] [I] [thread 130530] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 2[m
[36m[10:02:58.695363] [D] [thread 130530] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator PROJECTION(2, schema=) as new root of the plan.[m
[36m[10:02:58.695584] [D] [thread 130530] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:02:58.695658] [D] [thread 130530] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[36m[10:02:58.696577] [D] [thread 130530] [WindowedQuery.cpp:122] [windowByKey] Query: add keyed window operator[m
[36m[10:02:58.697110] [D] [thread 130530] [WindowedQuery.cpp:142] [windowByKey] add default watermark strategy as non is provided[m
[32m[10:02:58.697586] [I] [thread 130530] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 3[m
[36m[10:02:58.697762] [D] [thread 130530] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator WATERMARKASSIGNER(3) as new root of the plan.[m
[36m[10:02:58.697998] [D] [thread 130530] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:02:58.698037] [D] [thread 130530] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[32m[10:02:58.698652] [I] [thread 130530] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 4[m
[36m[10:02:58.698846] [D] [thread 130530] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator WINDOW AGGREGATION(OP-4, Min;) as new root of the plan.[m
[36m[10:02:58.699081] [D] [thread 130530] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:02:58.699119] [D] [thread 130530] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[36m[10:02:58.699433] [D] [thread 130530] [Query.cpp:353] [sink] Query: add sink operator to query[m
[32m[10:02:58.699603] [I] [thread 130530] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 5[m
[36m[10:02:58.699809] [D] [thread 130530] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator SINK(5: {FileSinkDescriptor()}) as new root of the plan.[m
[36m[10:02:58.700030] [D] [thread 130530] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:02:58.700067] [D] [thread 130530] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[36m[10:02:58.701186] [D] [thread 130530] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.701412] [D] [thread 130530] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.701577] [D] [thread 130530] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[36m[10:02:58.701875] [D] [thread 130530] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.701982] [D] [thread 130530] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.702018] [D] [thread 130530] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[36m[10:02:58.702147] [D] [thread 130530] [TypeInferencePhase.cpp:32] [TypeInferencePhase] TypeInferencePhase()[m
[36m[10:02:58.702266] [D] [thread 130530] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.702360] [D] [thread 130530] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.702398] [D] [thread 130530] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[36m[10:02:58.703163] [D] [thread 130530] [TypeInferencePhase.cpp:76] [execute] TypeInferencePhase: update source descriptor for source debs with schema: debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.703225] [D] [thread 130530] [QueryPlan.cpp:69] [getSinkOperators] QueryPlan: Get all sink operators by traversing all the root nodes.[m
[36m[10:02:58.703343] [D] [thread 130530] [QueryPlan.cpp:75] [getSinkOperators] QueryPlan: Found 1 sink operators.[m
[36m[10:02:58.704388] [D] [thread 130530] [ProjectionLogicalOperatorNode.cpp:54] [inferSchema] proj input=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)  outputSchema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits) this proj=PROJECTION(2, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits))[m
[36m[10:02:58.705007] [D] [thread 130530] [WindowLogicalOperatorNode.cpp:70] [inferSchema] WindowLogicalOperatorNode: TypeInferencePhase: infer types for window operator with input schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.705783] [D] [thread 130530] [TypeInferencePhase.cpp:90] [execute] TypeInferencePhase: we inferred all schemas[m
[32m[10:02:58.706407] [I] [thread 130530] [QueryCatalog.cpp:55] [createNewEntry] QueryCatalog: Creating query catalog entry for query with id 1[m
[32m[10:02:58.707229] [I] [thread 130530] [RequestQueue.cpp:25] [add] QueryRequestQueue: Adding a new query request : RunQueryRequest { QueryId: 1, QueryPlan: SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(3)
      PROJECTION(2, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(1,debs,LogicalSourceDescriptor(debs, ))
, QueryPlacementStrategy: BottomUp}[m
[32m[10:02:58.707300] [I] [thread 130530] [RequestQueue.cpp:28] [add] QueryCatalog: Marking that new request is available to be scheduled[m
[32m[10:02:58.707345] [I] [thread 130483] [RequestQueue.cpp:41] [getNextBatch] QueryRequestQueue: Fetching Queries to Schedule[m
[32m[10:02:58.707451] [I] [thread 130483] [RequestQueue.cpp:52] [getNextBatch] QueryRequestQueue: Optimizing 1 queryIdAndCatalogEntryMapping.[m
[32m[10:02:58.707482] [I] [thread 130483] [RequestProcessorService.cpp:91] [start] QueryProcessingService: Calling GlobalQueryPlanUpdatePhase[m
[32m[10:02:58.707720] [I] [thread 130483] [GlobalQueryPlanUpdatePhase.cpp:150] [processAddQueryRequest] QueryProcessingService: Request received for optimizing and deploying of the query 1[m
[36m[10:02:58.707855] [D] [thread 130483] [GlobalQueryPlanUpdatePhase.cpp:156] [processAddQueryRequest] QueryProcessingService: Performing Query type inference phase for query:  1[m
[36m[10:02:58.707885] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.707955] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.707996] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[36m[10:02:58.708047] [D] [thread 130483] [QueryPlan.cpp:69] [getSinkOperators] QueryPlan: Get all sink operators by traversing all the root nodes.[m
[36m[10:02:58.708085] [D] [thread 130483] [QueryPlan.cpp:75] [getSinkOperators] QueryPlan: Found 1 sink operators.[m
[36m[10:02:58.708808] [D] [thread 130483] [ProjectionLogicalOperatorNode.cpp:54] [inferSchema] proj input=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)  outputSchema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits) this proj=PROJECTION(2, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits))[m
[36m[10:02:58.709244] [D] [thread 130483] [WindowLogicalOperatorNode.cpp:70] [inferSchema] WindowLogicalOperatorNode: TypeInferencePhase: infer types for window operator with input schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.709650] [D] [thread 130483] [TypeInferencePhase.cpp:90] [execute] TypeInferencePhase: we inferred all schemas[m
[36m[10:02:58.709723] [D] [thread 130483] [GlobalQueryPlanUpdatePhase.cpp:160] [processAddQueryRequest] QueryProcessingService: Performing query choose memory layout phase:  1[m
[36m[10:02:58.709748] [D] [thread 130483] [MemoryLayoutSelectionPhase.cpp:28] [execute] Select Row Layout[m
[36m[10:02:58.709996] [D] [thread 130483] [GlobalQueryPlanUpdatePhase.cpp:164] [processAddQueryRequest] QueryProcessingService: Performing Query rewrite phase for query:  1[m
[32m[10:02:58.710041] [I] [thread 130483] [QueryPlan.cpp:221] [copy] QueryPlan: make copy of this query plan[m
[32m[10:02:58.710245] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 5[m
[32m[10:02:58.710560] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 4[m
[32m[10:02:58.710854] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 3[m
[32m[10:02:58.711053] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 2[m
[32m[10:02:58.711280] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 1[m
[36m[10:02:58.711579] [D] [thread 130483] [RenameSourceToProjectOperatorRule.cpp:27] [apply] RenameSourceToProjectOperatorRule: Convert all Rename Source operator to the project operator[m
[36m[10:02:58.711962] [D] [thread 130483] [ProjectBeforeUnionOperatorRule.cpp:32] [apply] Before applying ProjectBeforeUnionOperatorRule to the query plan: SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(3)
      PROJECTION(2, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(1,debs,LogicalSourceDescriptor(debs, ))
[m
[36m[10:02:58.712244] [D] [thread 130483] [ProjectBeforeUnionOperatorRule.cpp:52] [apply] After applying ProjectBeforeUnionOperatorRule to the query plan: SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(3)
      PROJECTION(2, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(1,debs,LogicalSourceDescriptor(debs, ))
[m
[32m[10:02:58.712481] [I] [thread 130483] [FilterSplitUpRule.cpp:30] [apply] Applying FilterSplitUpRule to query SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(3)
      PROJECTION(2, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(1,debs,LogicalSourceDescriptor(debs, ))
[m
[36m[10:02:58.712656] [D] [thread 130483] [FilterSplitUpRule.cpp:38] [apply] FilterSplitUpRule: Sort all filter nodes in increasing order of the operator id[m
[32m[10:02:58.712685] [I] [thread 130483] [QueryPlan.cpp:221] [copy] QueryPlan: make copy of this query plan[m
[32m[10:02:58.712793] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 5[m
[32m[10:02:58.712957] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 4[m
[32m[10:02:58.713189] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 3[m
[32m[10:02:58.713388] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 2[m
[36m[10:02:58.713579] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[32m[10:02:58.713794] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 1[m
[36m[10:02:58.714069] [D] [thread 130483] [FilterSplitUpRule.cpp:46] [apply] FilterSplitUpRule: Iterate over all the filter operators to split them[m
[32m[10:02:58.714336] [I] [thread 130483] [FilterPushDownRule.cpp:50] [apply] Applying FilterPushDownRule to query SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(3)
      PROJECTION(2, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(1,debs,LogicalSourceDescriptor(debs, ))
[m
[36m[10:02:58.714406] [D] [thread 130483] [FilterPushDownRule.cpp:58] [apply] FilterPushDownRule: Sort all filter nodes in increasing order of the operator id[m
[32m[10:02:58.714421] [I] [thread 130483] [QueryPlan.cpp:221] [copy] QueryPlan: make copy of this query plan[m
[32m[10:02:58.714506] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 5[m
[32m[10:02:58.714639] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 4[m
[32m[10:02:58.714866] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 3[m
[32m[10:02:58.715067] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 2[m
[32m[10:02:58.715295] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 1[m
[36m[10:02:58.715555] [D] [thread 130483] [FilterPushDownRule.cpp:66] [apply] FilterPushDownRule: Iterate over all the filter operators to push them down in the query plan[m
[32m[10:02:58.715763] [I] [thread 130483] [FilterPushDownRule.cpp:71] [apply] FilterPushDownRule: Return the updated query plan SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(3)
      PROJECTION(2, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(1,debs,LogicalSourceDescriptor(debs, ))
[m
[32m[10:02:58.715959] [I] [thread 130483] [FilterMergeRule.cpp:27] [apply] Applying FilterMergeRule to query SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(3)
      PROJECTION(2, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(1,debs,LogicalSourceDescriptor(debs, ))
[m
[36m[10:02:58.716109] [D] [thread 130483] [FilterMergeRule.cpp:30] [apply] FilterMergeRule: Identified 0 filter nodes in the query plan[m
[36m[10:02:58.716279] [D] [thread 130483] [FilterMergeRule.cpp:31] [apply] Query before applying the rule: SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(3)
      PROJECTION(2, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(1,debs,LogicalSourceDescriptor(debs, ))
[m
[36m[10:02:58.716467] [D] [thread 130483] [FilterMergeRule.cpp:77] [apply] Query after applying the rule: SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(3)
      PROJECTION(2, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(1,debs,LogicalSourceDescriptor(debs, ))
[m
[36m[10:02:58.716633] [D] [thread 130483] [PredicateReorderingRule.cpp:28] [apply] PredicateReorderingRule: Identified 0 filter nodes in the query plan[m
[36m[10:02:58.716796] [D] [thread 130483] [PredicateReorderingRule.cpp:29] [apply] Query before applying the rule: SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(3)
      PROJECTION(2, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(1,debs,LogicalSourceDescriptor(debs, ))
[m
[36m[10:02:58.716971] [D] [thread 130483] [PredicateReorderingRule.cpp:87] [apply] Query after applying the rule: SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(3)
      PROJECTION(2, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(1,debs,LogicalSourceDescriptor(debs, ))
[m
[36m[10:02:58.717100] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.717155] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.717196] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[36m[10:02:58.717244] [D] [thread 130483] [QueryPlan.cpp:69] [getSinkOperators] QueryPlan: Get all sink operators by traversing all the root nodes.[m
[36m[10:02:58.717294] [D] [thread 130483] [QueryPlan.cpp:75] [getSinkOperators] QueryPlan: Found 1 sink operators.[m
[36m[10:02:58.717958] [D] [thread 130483] [ProjectionLogicalOperatorNode.cpp:54] [inferSchema] proj input=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)  outputSchema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits) this proj=PROJECTION(2, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits))[m
[36m[10:02:58.718354] [D] [thread 130483] [WindowLogicalOperatorNode.cpp:70] [inferSchema] WindowLogicalOperatorNode: TypeInferencePhase: infer types for window operator with input schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.718750] [D] [thread 130483] [TypeInferencePhase.cpp:90] [execute] TypeInferencePhase: we inferred all schemas[m
[32m[10:02:58.718822] [I] [thread 130483] [SignatureInferencePhase.cpp:59] [execute] Skipping signature creation[m
[32m[10:02:58.719057] [I] [thread 130483] [LogicalSourceExpansionRule.cpp:49] [apply] LogicalSourceExpansionRule: Plan before
SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(3)
      PROJECTION(2, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(1,debs,LogicalSourceDescriptor(debs, ))
[m
[36m[10:02:58.719093] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.719144] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.719181] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[32m[10:02:58.719815] [I] [thread 130483] [OperatorNode.cpp:46] [duplicate] OperatorNode: Create copy of the operator[m
[32m[10:02:58.719905] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 1[m
[36m[10:02:58.720004] [D] [thread 130483] [OperatorNode.cpp:49] [duplicate] OperatorNode: copy all parents[m
[36m[10:02:58.720026] [D] [thread 130483] [OperatorNode.cpp:66] [getDuplicateOfParent] OperatorNode: create copy of the input operator[m
[32m[10:02:58.720077] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 2[m
[36m[10:02:58.720142] [D] [thread 130483] [OperatorNode.cpp:66] [getDuplicateOfParent] OperatorNode: create copy of the input operator[m
[32m[10:02:58.720179] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 3[m
[36m[10:02:58.720582] [D] [thread 130483] [OperatorNode.cpp:56] [duplicate] OperatorNode: copy all children[m
[32m[10:02:58.721095] [I] [thread 130483] [OperatorNode.cpp:46] [duplicate] OperatorNode: Create copy of the operator[m
[32m[10:02:58.721175] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 1[m
[36m[10:02:58.721257] [D] [thread 130483] [OperatorNode.cpp:49] [duplicate] OperatorNode: copy all parents[m
[36m[10:02:58.721285] [D] [thread 130483] [OperatorNode.cpp:66] [getDuplicateOfParent] OperatorNode: create copy of the input operator[m
[32m[10:02:58.721335] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 2[m
[36m[10:02:58.721397] [D] [thread 130483] [OperatorNode.cpp:66] [getDuplicateOfParent] OperatorNode: create copy of the input operator[m
[32m[10:02:58.721444] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 3[m
[36m[10:02:58.721783] [D] [thread 130483] [OperatorNode.cpp:56] [duplicate] OperatorNode: copy all children[m
[32m[10:02:58.722118] [I] [thread 130483] [OperatorNode.cpp:46] [duplicate] OperatorNode: Create copy of the operator[m
[32m[10:02:58.722187] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 1[m
[36m[10:02:58.722256] [D] [thread 130483] [OperatorNode.cpp:49] [duplicate] OperatorNode: copy all parents[m
[36m[10:02:58.722272] [D] [thread 130483] [OperatorNode.cpp:66] [getDuplicateOfParent] OperatorNode: create copy of the input operator[m
[32m[10:02:58.722316] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 2[m
[36m[10:02:58.722388] [D] [thread 130483] [OperatorNode.cpp:66] [getDuplicateOfParent] OperatorNode: create copy of the input operator[m
[32m[10:02:58.722423] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 3[m
[36m[10:02:58.722760] [D] [thread 130483] [OperatorNode.cpp:56] [duplicate] OperatorNode: copy all children[m
[32m[10:02:58.723097] [I] [thread 130483] [OperatorNode.cpp:46] [duplicate] OperatorNode: Create copy of the operator[m
[32m[10:02:58.723163] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 1[m
[36m[10:02:58.723231] [D] [thread 130483] [OperatorNode.cpp:49] [duplicate] OperatorNode: copy all parents[m
[36m[10:02:58.723248] [D] [thread 130483] [OperatorNode.cpp:66] [getDuplicateOfParent] OperatorNode: create copy of the input operator[m
[32m[10:02:58.723289] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 2[m
[36m[10:02:58.723346] [D] [thread 130483] [OperatorNode.cpp:66] [getDuplicateOfParent] OperatorNode: create copy of the input operator[m
[32m[10:02:58.723377] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 3[m
[36m[10:02:58.723685] [D] [thread 130483] [OperatorNode.cpp:56] [duplicate] OperatorNode: copy all children[m
[32m[10:02:58.724009] [I] [thread 130483] [OperatorNode.cpp:46] [duplicate] OperatorNode: Create copy of the operator[m
[32m[10:02:58.724073] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 1[m
[36m[10:02:58.724138] [D] [thread 130483] [OperatorNode.cpp:49] [duplicate] OperatorNode: copy all parents[m
[36m[10:02:58.724160] [D] [thread 130483] [OperatorNode.cpp:66] [getDuplicateOfParent] OperatorNode: create copy of the input operator[m
[32m[10:02:58.724201] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 2[m
[36m[10:02:58.724259] [D] [thread 130483] [OperatorNode.cpp:66] [getDuplicateOfParent] OperatorNode: create copy of the input operator[m
[32m[10:02:58.724344] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 3[m
[36m[10:02:58.724702] [D] [thread 130483] [OperatorNode.cpp:56] [duplicate] OperatorNode: copy all children[m
[32m[10:02:58.725066] [I] [thread 130483] [OperatorNode.cpp:46] [duplicate] OperatorNode: Create copy of the operator[m
[32m[10:02:58.725134] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 1[m
[36m[10:02:58.725202] [D] [thread 130483] [OperatorNode.cpp:49] [duplicate] OperatorNode: copy all parents[m
[36m[10:02:58.725219] [D] [thread 130483] [OperatorNode.cpp:66] [getDuplicateOfParent] OperatorNode: create copy of the input operator[m
[32m[10:02:58.725261] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 2[m
[36m[10:02:58.725319] [D] [thread 130483] [OperatorNode.cpp:66] [getDuplicateOfParent] OperatorNode: create copy of the input operator[m
[32m[10:02:58.725350] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 3[m
[36m[10:02:58.725654] [D] [thread 130483] [OperatorNode.cpp:56] [duplicate] OperatorNode: copy all children[m
[36m[10:02:58.726608] [D] [thread 130483] [LogicalSourceExpansionRule.cpp:151] [apply] LogicalSourceExpansionRule: Plan after
SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(8)
      PROJECTION(7, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(6,debs,LogicalSourceDescriptor(debs, test_stream4))
    WATERMARKASSIGNER(11)
      PROJECTION(10, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(9,debs,LogicalSourceDescriptor(debs, test_stream5))
    WATERMARKASSIGNER(14)
      PROJECTION(13, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(12,debs,LogicalSourceDescriptor(debs, test_stream6))
    WATERMARKASSIGNER(17)
      PROJECTION(16, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(15,debs,LogicalSourceDescriptor(debs, test_stream7))
    WATERMARKASSIGNER(20)
      PROJECTION(19, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(18,debs,LogicalSourceDescriptor(debs, test_stream8))
    WATERMARKASSIGNER(23)
      PROJECTION(22, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(21,debs,LogicalSourceDescriptor(debs, test_stream9))
[m
[32m[10:02:58.726737] [I] [thread 130483] [DistributedJoinRule.cpp:31] [apply] DistributeJoinRule: Apply DistributeJoinRule.[m
[36m[10:02:58.727251] [D] [thread 130483] [DistributedJoinRule.cpp:32] [apply] DistributeJoinRule::apply: plan before replace
SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(8)
      PROJECTION(7, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(6,debs,LogicalSourceDescriptor(debs, test_stream4))
    WATERMARKASSIGNER(11)
      PROJECTION(10, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(9,debs,LogicalSourceDescriptor(debs, test_stream5))
    WATERMARKASSIGNER(14)
      PROJECTION(13, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(12,debs,LogicalSourceDescriptor(debs, test_stream6))
    WATERMARKASSIGNER(17)
      PROJECTION(16, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(15,debs,LogicalSourceDescriptor(debs, test_stream7))
    WATERMARKASSIGNER(20)
      PROJECTION(19, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(18,debs,LogicalSourceDescriptor(debs, test_stream8))
    WATERMARKASSIGNER(23)
      PROJECTION(22, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(21,debs,LogicalSourceDescriptor(debs, test_stream9))
[m
[36m[10:02:58.727560] [D] [thread 130483] [DistributedJoinRule.cpp:55] [apply] DistributeJoinRule::apply: no join operator in query[m
[36m[10:02:58.728061] [D] [thread 130483] [DistributedJoinRule.cpp:58] [apply] DistributeJoinRule::apply: plan after replace
SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(8)
      PROJECTION(7, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(6,debs,LogicalSourceDescriptor(debs, test_stream4))
    WATERMARKASSIGNER(11)
      PROJECTION(10, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(9,debs,LogicalSourceDescriptor(debs, test_stream5))
    WATERMARKASSIGNER(14)
      PROJECTION(13, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(12,debs,LogicalSourceDescriptor(debs, test_stream6))
    WATERMARKASSIGNER(17)
      PROJECTION(16, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(15,debs,LogicalSourceDescriptor(debs, test_stream7))
    WATERMARKASSIGNER(20)
      PROJECTION(19, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(18,debs,LogicalSourceDescriptor(debs, test_stream8))
    WATERMARKASSIGNER(23)
      PROJECTION(22, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(21,debs,LogicalSourceDescriptor(debs, test_stream9))
[m
[36m[10:02:58.728124] [D] [thread 130483] [NemoWindowPinningRule.cpp:58] [apply] NemoWindowPinningRule: Apply NemoWindowPinningRule.[m
[36m[10:02:58.728623] [D] [thread 130483] [NemoWindowPinningRule.cpp:59] [apply] NemoWindowPinningRule::apply: plan before replace
SINK(5: {FileSinkDescriptor()})
  WINDOW AGGREGATION(OP-4, Min;)
    WATERMARKASSIGNER(8)
      PROJECTION(7, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(6,debs,LogicalSourceDescriptor(debs, test_stream4))
    WATERMARKASSIGNER(11)
      PROJECTION(10, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(9,debs,LogicalSourceDescriptor(debs, test_stream5))
    WATERMARKASSIGNER(14)
      PROJECTION(13, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(12,debs,LogicalSourceDescriptor(debs, test_stream6))
    WATERMARKASSIGNER(17)
      PROJECTION(16, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(15,debs,LogicalSourceDescriptor(debs, test_stream7))
    WATERMARKASSIGNER(20)
      PROJECTION(19, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(18,debs,LogicalSourceDescriptor(debs, test_stream8))
    WATERMARKASSIGNER(23)
      PROJECTION(22, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(21,debs,LogicalSourceDescriptor(debs, test_stream9))
[m
[36m[10:02:58.728988] [D] [thread 130483] [NemoWindowPinningRule.cpp:68] [apply] NemoWindowPinningRule::apply: found 1 window operators[m
[36m[10:02:58.729070] [D] [thread 130483] [NemoWindowPinningRule.cpp:70] [apply] NemoWindowPinningRule::apply: window operator WINDOW AGGREGATION(OP-4, Min;)[m
[36m[10:02:58.729116] [D] [thread 130483] [NemoWindowPinningRule.cpp:99] [pinWindowOperators] NemoWindowPinningRule::apply: introduce new distributed window operator for window WINDOW AGGREGATION(OP-4, Min;)[m
[32m[10:02:58.729238] [I] [thread 130483] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 5[m
[36m[10:02:58.729272] [D] [thread 130483] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 5[m
[32m[10:02:58.729655] [I] [thread 130483] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 6[m
[36m[10:02:58.729686] [D] [thread 130483] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 6[m
[32m[10:02:58.729874] [I] [thread 130483] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 7[m
[36m[10:02:58.729913] [D] [thread 130483] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 7[m
[32m[10:02:58.730109] [I] [thread 130483] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 8[m
[36m[10:02:58.730126] [D] [thread 130483] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 8[m
[32m[10:02:58.730213] [I] [thread 130483] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 9[m
[36m[10:02:58.730227] [D] [thread 130483] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 9[m
[32m[10:02:58.730310] [I] [thread 130483] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 10[m
[36m[10:02:58.730324] [D] [thread 130483] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 10[m
[32m[10:02:58.730826] [I] [thread 130483] [Node.cpp:198] [removeChildren] Node: Removing all children for current node[m
[32m[10:02:58.730888] [I] [thread 130483] [Node.cpp:204] [removeChildren] Node: Removed node as child of this node[m
[32m[10:02:58.730900] [I] [thread 130483] [Node.cpp:204] [removeChildren] Node: Removed node as child of this node[m
[32m[10:02:58.730909] [I] [thread 130483] [Node.cpp:204] [removeChildren] Node: Removed node as child of this node[m
[32m[10:02:58.730918] [I] [thread 130483] [Node.cpp:204] [removeChildren] Node: Removed node as child of this node[m
[32m[10:02:58.730927] [I] [thread 130483] [Node.cpp:204] [removeChildren] Node: Removed node as child of this node[m
[32m[10:02:58.730935] [I] [thread 130483] [Node.cpp:204] [removeChildren] Node: Removed node as child of this node[m
[32m[10:02:58.730944] [I] [thread 130483] [Node.cpp:187] [removeAllParent] Node: Removing all parents for current node[m
[32m[10:02:58.730955] [I] [thread 130483] [Node.cpp:193] [removeAllParent] Node: Removed node as parent of this node[m
[32m[10:02:58.730971] [I] [thread 130483] [Node.cpp:198] [removeChildren] Node: Removing all children for current node[m
[32m[10:02:58.731104] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 24[m
[36m[10:02:58.731352] [D] [thread 130483] [NemoWindowPinningRule.cpp:112] [pinWindowOperators] NemoWindowPinningRule::apply: newNode=CENTRALWINDOW(24) old node=WINDOW AGGREGATION(OP-4, Min;)[m
[32m[10:02:58.731590] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 25[m
[36m[10:02:58.731726] [D] [thread 130483] [NemoWindowPinningRule.cpp:112] [pinWindowOperators] NemoWindowPinningRule::apply: newNode=CENTRALWINDOW(25) old node=WINDOW AGGREGATION(OP-4, Min;)[m
[32m[10:02:58.731912] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 26[m
[36m[10:02:58.732005] [D] [thread 130483] [NemoWindowPinningRule.cpp:112] [pinWindowOperators] NemoWindowPinningRule::apply: newNode=CENTRALWINDOW(26) old node=WINDOW AGGREGATION(OP-4, Min;)[m
[36m[10:02:58.732708] [D] [thread 130483] [NemoWindowPinningRule.cpp:121] [pinWindowOperators] DistributedWindowRule: Plan after
SINK(5: {FileSinkDescriptor()})
  CENTRALWINDOW(24)
    WATERMARKASSIGNER(8)
      PROJECTION(7, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(6,debs,LogicalSourceDescriptor(debs, test_stream4))
    WATERMARKASSIGNER(11)
      PROJECTION(10, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(9,debs,LogicalSourceDescriptor(debs, test_stream5))
  CENTRALWINDOW(25)
    WATERMARKASSIGNER(14)
      PROJECTION(13, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(12,debs,LogicalSourceDescriptor(debs, test_stream6))
    WATERMARKASSIGNER(17)
      PROJECTION(16, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(15,debs,LogicalSourceDescriptor(debs, test_stream7))
  CENTRALWINDOW(26)
    WATERMARKASSIGNER(20)
      PROJECTION(19, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(18,debs,LogicalSourceDescriptor(debs, test_stream8))
    WATERMARKASSIGNER(23)
      PROJECTION(22, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(21,debs,LogicalSourceDescriptor(debs, test_stream9))
[m
[36m[10:02:58.733264] [D] [thread 130483] [NemoWindowPinningRule.cpp:87] [apply] NemoWindowPinningRule::apply: plan after replace
SINK(5: {FileSinkDescriptor()})
  CENTRALWINDOW(24)
    WATERMARKASSIGNER(8)
      PROJECTION(7, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(6,debs,LogicalSourceDescriptor(debs, test_stream4))
    WATERMARKASSIGNER(11)
      PROJECTION(10, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(9,debs,LogicalSourceDescriptor(debs, test_stream5))
  CENTRALWINDOW(25)
    WATERMARKASSIGNER(14)
      PROJECTION(13, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(12,debs,LogicalSourceDescriptor(debs, test_stream6))
    WATERMARKASSIGNER(17)
      PROJECTION(16, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(15,debs,LogicalSourceDescriptor(debs, test_stream7))
  CENTRALWINDOW(26)
    WATERMARKASSIGNER(20)
      PROJECTION(19, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(18,debs,LogicalSourceDescriptor(debs, test_stream8))
    WATERMARKASSIGNER(23)
      PROJECTION(22, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(21,debs,LogicalSourceDescriptor(debs, test_stream9))
[m
[36m[10:02:58.733512] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.733621] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.733686] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 6 source operators.[m
[36m[10:02:58.733739] [D] [thread 130483] [QueryPlan.cpp:69] [getSinkOperators] QueryPlan: Get all sink operators by traversing all the root nodes.[m
[36m[10:02:58.733775] [D] [thread 130483] [QueryPlan.cpp:75] [getSinkOperators] QueryPlan: Found 1 sink operators.[m
[36m[10:02:58.734365] [D] [thread 130483] [ProjectionLogicalOperatorNode.cpp:54] [inferSchema] proj input=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)  outputSchema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits) this proj=PROJECTION(7, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits))[m
[36m[10:02:58.735111] [D] [thread 130483] [ProjectionLogicalOperatorNode.cpp:54] [inferSchema] proj input=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)  outputSchema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits) this proj=PROJECTION(10, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits))[m
[36m[10:02:58.735408] [D] [thread 130483] [CentralWindowOperator.cpp:70] [inferSchema] SliceCreationOperator: TypeInferencePhase: infer types for window operator with input schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[32m[10:02:58.735629] [I] [thread 130483] [CentralWindowOperator.cpp:112] [inferSchema] Add the following field to the output schema of the NonKeyedWindow debs$absolute_v[m
[32m[10:02:58.735739] [I] [thread 130483] [CentralWindowOperator.cpp:116] [inferSchema] The final output schema is debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.736292] [D] [thread 130483] [ProjectionLogicalOperatorNode.cpp:54] [inferSchema] proj input=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)  outputSchema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits) this proj=PROJECTION(13, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits))[m
[36m[10:02:58.737013] [D] [thread 130483] [ProjectionLogicalOperatorNode.cpp:54] [inferSchema] proj input=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)  outputSchema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits) this proj=PROJECTION(16, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits))[m
[36m[10:02:58.737311] [D] [thread 130483] [CentralWindowOperator.cpp:70] [inferSchema] SliceCreationOperator: TypeInferencePhase: infer types for window operator with input schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[32m[10:02:58.737516] [I] [thread 130483] [CentralWindowOperator.cpp:112] [inferSchema] Add the following field to the output schema of the NonKeyedWindow debs$absolute_v[m
[32m[10:02:58.737629] [I] [thread 130483] [CentralWindowOperator.cpp:116] [inferSchema] The final output schema is debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.738161] [D] [thread 130483] [ProjectionLogicalOperatorNode.cpp:54] [inferSchema] proj input=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)  outputSchema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits) this proj=PROJECTION(19, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits))[m
[36m[10:02:58.738857] [D] [thread 130483] [ProjectionLogicalOperatorNode.cpp:54] [inferSchema] proj input=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)  outputSchema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits) this proj=PROJECTION(22, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits))[m
[36m[10:02:58.739135] [D] [thread 130483] [CentralWindowOperator.cpp:70] [inferSchema] SliceCreationOperator: TypeInferencePhase: infer types for window operator with input schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[32m[10:02:58.739328] [I] [thread 130483] [CentralWindowOperator.cpp:112] [inferSchema] Add the following field to the output schema of the NonKeyedWindow debs$absolute_v[m
[32m[10:02:58.739434] [I] [thread 130483] [CentralWindowOperator.cpp:116] [inferSchema] The final output schema is debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.739550] [D] [thread 130483] [TypeInferencePhase.cpp:90] [execute] TypeInferencePhase: we inferred all schemas[m
[36m[10:02:58.740368] [D] [thread 130483] [GlobalQueryPlanUpdatePhase.cpp:196] [processAddQueryRequest] QueryProcessingService: Performing query choose memory layout phase:  1[m
[36m[10:02:58.740416] [D] [thread 130483] [MemoryLayoutSelectionPhase.cpp:28] [execute] Select Row Layout[m
[36m[10:02:58.740765] [D] [thread 130483] [GlobalQueryPlanUpdatePhase.cpp:203] [processAddQueryRequest] QueryProcessingService: Performing Query type inference phase for query:  1[m
[36m[10:02:58.740878] [D] [thread 130483] [GlobalQueryPlanUpdatePhase.cpp:207] [processAddQueryRequest] QueryProcessingService: Applying Query Merger Rules as Query Merging is enabled.[m
[36m[10:02:58.740898] [D] [thread 130483] [QueryMergerPhase.cpp:72] [execute] QueryMergerPhase: Executing query merger phase.[m
[32m[10:02:58.740953] [I] [thread 130483] [GlobalQueryPlan.cpp:173] [createNewSharedQueryPlan] Create new shared query plan[m
[32m[10:02:58.740995] [I] [thread 130483] [QueryPlan.cpp:221] [copy] QueryPlan: make copy of this query plan[m
[32m[10:02:58.741107] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 5[m
[32m[10:02:58.741270] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 24[m
[32m[10:02:58.741688] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 25[m
[32m[10:02:58.741964] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 26[m
[32m[10:02:58.742183] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 8[m
[32m[10:02:58.742356] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 11[m
[32m[10:02:58.742494] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 14[m
[32m[10:02:58.742622] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 17[m
[32m[10:02:58.742755] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 20[m
[32m[10:02:58.742867] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 23[m
[32m[10:02:58.743062] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 7[m
[32m[10:02:58.743300] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 10[m
[32m[10:02:58.743495] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 13[m
[32m[10:02:58.743678] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 16[m
[32m[10:02:58.743858] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 19[m
[32m[10:02:58.744034] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 22[m
[32m[10:02:58.744236] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 6[m
[32m[10:02:58.744558] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 9[m
[32m[10:02:58.744798] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 12[m
[32m[10:02:58.745009] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 15[m
[32m[10:02:58.745226] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 18[m
[32m[10:02:58.745469] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 21[m
[36m[10:02:58.746176] [D] [thread 130483] [QueryPlan.cpp:120] [getLeafOperators] QueryPlan: Get all leaf nodes in the query plan.[m
[36m[10:02:58.746234] [D] [thread 130483] [QueryPlan.cpp:124] [getLeafOperators] QueryPlan: Iterate over all root nodes to find the operator.[m
[36m[10:02:58.746341] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746385] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746424] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746447] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746517] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746539] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746559] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746578] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746598] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746618] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746637] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746656] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746677] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746697] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746716] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746736] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746756] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746767] [D] [thread 130483] [QueryPlan.cpp:136] [getLeafOperators] QueryPlan: Found leaf node. Adding to the collection of leaf nodes.[m
[36m[10:02:58.746796] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746808] [D] [thread 130483] [QueryPlan.cpp:136] [getLeafOperators] QueryPlan: Found leaf node. Adding to the collection of leaf nodes.[m
[36m[10:02:58.746839] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746851] [D] [thread 130483] [QueryPlan.cpp:136] [getLeafOperators] QueryPlan: Found leaf node. Adding to the collection of leaf nodes.[m
[36m[10:02:58.746871] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746883] [D] [thread 130483] [QueryPlan.cpp:136] [getLeafOperators] QueryPlan: Found leaf node. Adding to the collection of leaf nodes.[m
[36m[10:02:58.746899] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746910] [D] [thread 130483] [QueryPlan.cpp:136] [getLeafOperators] QueryPlan: Found leaf node. Adding to the collection of leaf nodes.[m
[36m[10:02:58.746946] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.746960] [D] [thread 130483] [QueryPlan.cpp:136] [getLeafOperators] QueryPlan: Found leaf node. Adding to the collection of leaf nodes.[m
[36m[10:02:58.748190] [D] [thread 130483] [GlobalQueryPlanUpdatePhase.cpp:123] [execute] GlobalQueryPlanUpdatePhase: Successfully updated global query plan[m
[36m[10:02:58.748222] [D] [thread 130483] [GlobalQueryPlan.cpp:88] [getSharedQueryPlansToDeploy] GlobalQueryPlan: Get the shared query plans to deploy.[m
[36m[10:02:58.748291] [D] [thread 130483] [GlobalQueryPlan.cpp:97] [getSharedQueryPlansToDeploy] GlobalQueryPlan: Found 1 Shared Query plan to be deployed.[m
[36m[10:02:58.748311] [D] [thread 130483] [RequestProcessorService.cpp:106] [start] QueryProcessingService: Updating Query Plan with global query id : 1[m
[36m[10:02:58.748351] [D] [thread 130483] [RequestProcessorService.cpp:111] [start] QueryProcessingService: Shared Query Plan is new.[m
[36m[10:02:58.748367] [D] [thread 130483] [RequestProcessorService.cpp:115] [start] QueryProcessingService: Performing Operator placement for shared query plan[m
[32m[10:02:58.748394] [I] [thread 130483] [QueryPlacementPhase.cpp:54] [execute] QueryPlacementPhase: Perform query placement phase for shared query plan 1[m
[36m[10:02:58.749219] [D] [thread 130483] [QueryPlacementPhase.cpp:70] [execute] QueryPlacementPhase: Perform query placement for query plan
SINK(5: {FileSinkDescriptor()})
  CENTRALWINDOW(24)
    WATERMARKASSIGNER(8)
      PROJECTION(7, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(6,debs,LogicalSourceDescriptor(debs, test_stream4))
    WATERMARKASSIGNER(11)
      PROJECTION(10, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(9,debs,LogicalSourceDescriptor(debs, test_stream5))
  CENTRALWINDOW(25)
    WATERMARKASSIGNER(14)
      PROJECTION(13, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(12,debs,LogicalSourceDescriptor(debs, test_stream6))
    WATERMARKASSIGNER(17)
      PROJECTION(16, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(15,debs,LogicalSourceDescriptor(debs, test_stream7))
  CENTRALWINDOW(26)
    WATERMARKASSIGNER(20)
      PROJECTION(19, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(18,debs,LogicalSourceDescriptor(debs, test_stream8))
    WATERMARKASSIGNER(23)
      PROJECTION(22, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
        SOURCE(21,debs,LogicalSourceDescriptor(debs, test_stream9))
[m
[36m[10:02:58.749252] [D] [thread 130483] [QueryPlan.cpp:120] [getLeafOperators] QueryPlan: Get all leaf nodes in the query plan.[m
[36m[10:02:58.749266] [D] [thread 130483] [QueryPlan.cpp:124] [getLeafOperators] QueryPlan: Iterate over all root nodes to find the operator.[m
[36m[10:02:58.749320] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749357] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749378] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749398] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749418] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749437] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749465] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749486] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749506] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749526] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749545] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749565] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749585] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749607] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749627] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749647] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749668] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749679] [D] [thread 130483] [QueryPlan.cpp:136] [getLeafOperators] QueryPlan: Found leaf node. Adding to the collection of leaf nodes.[m
[36m[10:02:58.749710] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749722] [D] [thread 130483] [QueryPlan.cpp:136] [getLeafOperators] QueryPlan: Found leaf node. Adding to the collection of leaf nodes.[m
[36m[10:02:58.749746] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749758] [D] [thread 130483] [QueryPlan.cpp:136] [getLeafOperators] QueryPlan: Found leaf node. Adding to the collection of leaf nodes.[m
[36m[10:02:58.749777] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749790] [D] [thread 130483] [QueryPlan.cpp:136] [getLeafOperators] QueryPlan: Found leaf node. Adding to the collection of leaf nodes.[m
[36m[10:02:58.749806] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749817] [D] [thread 130483] [QueryPlan.cpp:136] [getLeafOperators] QueryPlan: Found leaf node. Adding to the collection of leaf nodes.[m
[36m[10:02:58.749837] [D] [thread 130483] [QueryPlan.cpp:133] [getLeafOperators] QueryPlan: Inserting operator in collection of already visited node.[m
[36m[10:02:58.749850] [D] [thread 130483] [QueryPlan.cpp:136] [getLeafOperators] QueryPlan: Found leaf node. Adding to the collection of leaf nodes.[m
[36m[10:02:58.750056] [D] [thread 130483] [BottomUpStrategy.cpp:50] [updateGlobalExecutionPlan] Perform placement of the pinned and all their downstream operators.[m
[32m[10:02:58.750102] [I] [thread 130483] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 5[m
[36m[10:02:58.750122] [D] [thread 130483] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 5[m
[32m[10:02:58.750200] [I] [thread 130483] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 6[m
[36m[10:02:58.750213] [D] [thread 130483] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 6[m
[32m[10:02:58.750247] [I] [thread 130483] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 7[m
[36m[10:02:58.750258] [D] [thread 130483] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 7[m
[32m[10:02:58.750278] [I] [thread 130483] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 8[m
[36m[10:02:58.750289] [D] [thread 130483] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 8[m
[32m[10:02:58.750306] [I] [thread 130483] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 9[m
[36m[10:02:58.750317] [D] [thread 130483] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 9[m
[32m[10:02:58.750337] [I] [thread 130483] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 10[m
[36m[10:02:58.750347] [D] [thread 130483] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 10[m
[32m[10:02:58.750367] [I] [thread 130483] [Topology.cpp:345] [findNodeWithId] Topology: Finding a physical node with id 1[m
[36m[10:02:58.750378] [D] [thread 130483] [Topology.cpp:347] [findNodeWithId] Topology: Found a physical node with id 1[m
[32m[10:02:58.750447] [I] [thread 130483] [Topology.cpp:73] [findPathBetween] Topology: Finding path between set of start and destination nodes[m
[36m[10:02:58.750654] [D] [thread 130483] [Topology.cpp:232] [find] Topology: found the destination node[m
[36m[10:02:58.750818] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.750927] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.751013] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.751198] [D] [thread 130483] [Topology.cpp:232] [find] Topology: found the destination node[m
[36m[10:02:58.751263] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.751324] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.751415] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.751538] [D] [thread 130483] [Topology.cpp:232] [find] Topology: found the destination node[m
[36m[10:02:58.751595] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.751653] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.751718] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.751823] [D] [thread 130483] [Topology.cpp:232] [find] Topology: found the destination node[m
[36m[10:02:58.751873] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.751929] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.752011] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.752114] [D] [thread 130483] [Topology.cpp:232] [find] Topology: found the destination node[m
[36m[10:02:58.752164] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.752218] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.752282] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.752427] [D] [thread 130483] [Topology.cpp:232] [find] Topology: found the destination node[m
[36m[10:02:58.752498] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.752578] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.752653] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[32m[10:02:58.752703] [I] [thread 130483] [Topology.cpp:98] [mergeSubGraphs] Topology: Merge 6 sub-graphs to create a single sub-graph[m
[36m[10:02:58.752712] [D] [thread 130483] [Topology.cpp:100] [mergeSubGraphs] Topology: Compute a map storing number of times a node occurred in different sub-graphs[m
[36m[10:02:58.753048] [D] [thread 130483] [Topology.cpp:120] [mergeSubGraphs] Topology: Iterate over each sub-graph and compute a single merged sub-graph[m
[36m[10:02:58.753065] [D] [thread 130483] [Topology.cpp:125] [mergeSubGraphs] Topology: Check if the node already present in the new merged graph and add a copy of the node if not present[m
[36m[10:02:58.753134] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.753148] [D] [thread 130483] [Topology.cpp:128] [mergeSubGraphs] Topology: Add the start node to the list of start nodes for the new merged graph[m
[36m[10:02:58.753176] [D] [thread 130483] [Topology.cpp:132] [mergeSubGraphs] Topology: Iterate over the ancestry of the start node and add the eligible nodes to new merged graph[m
[36m[10:02:58.753247] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.753352] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.753390] [D] [thread 130483] [Topology.cpp:125] [mergeSubGraphs] Topology: Check if the node already present in the new merged graph and add a copy of the node if not present[m
[36m[10:02:58.753434] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.753445] [D] [thread 130483] [Topology.cpp:128] [mergeSubGraphs] Topology: Add the start node to the list of start nodes for the new merged graph[m
[36m[10:02:58.753482] [D] [thread 130483] [Topology.cpp:132] [mergeSubGraphs] Topology: Iterate over the ancestry of the start node and add the eligible nodes to new merged graph[m
[36m[10:02:58.753546] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.753607] [D] [thread 130483] [Topology.cpp:125] [mergeSubGraphs] Topology: Check if the node already present in the new merged graph and add a copy of the node if not present[m
[36m[10:02:58.753656] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.753667] [D] [thread 130483] [Topology.cpp:128] [mergeSubGraphs] Topology: Add the start node to the list of start nodes for the new merged graph[m
[36m[10:02:58.753687] [D] [thread 130483] [Topology.cpp:132] [mergeSubGraphs] Topology: Iterate over the ancestry of the start node and add the eligible nodes to new merged graph[m
[33m[1m[10:02:58.753728] [W] [thread 130483] [Node.cpp:101] [addParent] Node: the node is already part of its parents so ignore add parent operation.[m
[36m[10:02:58.753743] [D] [thread 130483] [Topology.cpp:125] [mergeSubGraphs] Topology: Check if the node already present in the new merged graph and add a copy of the node if not present[m
[36m[10:02:58.753787] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.753798] [D] [thread 130483] [Topology.cpp:128] [mergeSubGraphs] Topology: Add the start node to the list of start nodes for the new merged graph[m
[36m[10:02:58.753812] [D] [thread 130483] [Topology.cpp:132] [mergeSubGraphs] Topology: Iterate over the ancestry of the start node and add the eligible nodes to new merged graph[m
[36m[10:02:58.753883] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.753937] [D] [thread 130483] [Topology.cpp:125] [mergeSubGraphs] Topology: Check if the node already present in the new merged graph and add a copy of the node if not present[m
[36m[10:02:58.753982] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.753994] [D] [thread 130483] [Topology.cpp:128] [mergeSubGraphs] Topology: Add the start node to the list of start nodes for the new merged graph[m
[36m[10:02:58.754013] [D] [thread 130483] [Topology.cpp:132] [mergeSubGraphs] Topology: Iterate over the ancestry of the start node and add the eligible nodes to new merged graph[m
[33m[1m[10:02:58.754054] [W] [thread 130483] [Node.cpp:101] [addParent] Node: the node is already part of its parents so ignore add parent operation.[m
[36m[10:02:58.754068] [D] [thread 130483] [Topology.cpp:125] [mergeSubGraphs] Topology: Check if the node already present in the new merged graph and add a copy of the node if not present[m
[36m[10:02:58.754110] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 0 of 65535[m
[36m[10:02:58.754122] [D] [thread 130483] [Topology.cpp:128] [mergeSubGraphs] Topology: Add the start node to the list of start nodes for the new merged graph[m
[36m[10:02:58.754135] [D] [thread 130483] [Topology.cpp:132] [mergeSubGraphs] Topology: Iterate over the ancestry of the start node and add the eligible nodes to new merged graph[m
[33m[1m[10:02:58.754174] [W] [thread 130483] [Node.cpp:101] [addParent] Node: the node is already part of its parents so ignore add parent operation.[m
[36m[10:02:58.754250] [D] [thread 130483] [Node.cpp:422] [getAllRootNodes] Node: Get all root nodes for this node[m
[36m[10:02:58.754263] [D] [thread 130483] [Node.cpp:435] [getAllRootNodes] Node: Iterating over all parents to find more root nodes[m
[36m[10:02:58.754270] [D] [thread 130483] [Node.cpp:422] [getAllRootNodes] Node: Get all root nodes for this node[m
[36m[10:02:58.754277] [D] [thread 130483] [Node.cpp:426] [getAllRootNodes] Node: Inserting this node to the collection[m
[36m[10:02:58.754295] [D] [thread 130483] [Node.cpp:443] [getAllRootNodes] Node: Found 1 leaf nodes[m
[36m[10:02:58.754313] [D] [thread 130483] [Node.cpp:438] [getAllRootNodes] Node: inserting parent nodes into the collection of parent nodes[m
[36m[10:02:58.754339] [D] [thread 130483] [Node.cpp:443] [getAllRootNodes] Node: Found 1 leaf nodes[m
[36m[10:02:58.754502] [D] [thread 130483] [BottomUpStrategy.cpp:74] [pinOperators] BottomUpStrategy: Get the all source operators for performing the placement.[m
[36m[10:02:58.754571] [D] [thread 130483] [BottomUpStrategy.cpp:77] [pinOperators] BottomUpStrategy: Get the topology node for source operator SOURCE(6,debs,LogicalSourceDescriptor(debs, test_stream4)) placement.[m
[36m[10:02:58.754636] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place SOURCE(6,debs,LogicalSourceDescriptor(debs, test_stream4))[m
[36m[10:02:58.754670] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.754781] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place PROJECTION(7, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))[m
[36m[10:02:58.754798] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.754871] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place WATERMARKASSIGNER(8)[m
[36m[10:02:58.754887] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.754926] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place CENTRALWINDOW(24)[m
[36m[10:02:58.754942] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[36m[10:02:58.754961] [D] [thread 130483] [BasePlacementStrategy.cpp:672] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: Get topology nodes with children operators[m
[33m[1m[10:02:58.755009] [W] [thread 130483] [BasePlacementStrategy.cpp:676] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: unable to find topology for child operator.[m
[33m[1m[10:02:58.755028] [W] [thread 130483] [BottomUpStrategy.cpp:125] [identifyPinningLocation] BottomUpStrategy: No topology node isOperatorAPinnedDownStreamOperator where child operators are placed.[m
[36m[10:02:58.755063] [D] [thread 130483] [BottomUpStrategy.cpp:77] [pinOperators] BottomUpStrategy: Get the topology node for source operator SOURCE(9,debs,LogicalSourceDescriptor(debs, test_stream5)) placement.[m
[36m[10:02:58.755112] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place SOURCE(9,debs,LogicalSourceDescriptor(debs, test_stream5))[m
[36m[10:02:58.755129] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.755207] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place PROJECTION(10, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))[m
[36m[10:02:58.755223] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.755270] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place WATERMARKASSIGNER(11)[m
[36m[10:02:58.755285] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.755322] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place CENTRALWINDOW(24)[m
[36m[10:02:58.755337] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[36m[10:02:58.755349] [D] [thread 130483] [BasePlacementStrategy.cpp:672] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: Get topology nodes with children operators[m
[36m[10:02:58.755393] [D] [thread 130483] [BasePlacementStrategy.cpp:683] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: returning list of topology nodes where children operators are placed[m
[36m[10:02:58.755446] [D] [thread 130483] [Topology.cpp:391] [findCommonAncestor] Topology: find common node for a set of topology nodes.[m
[36m[10:02:58.755460] [D] [thread 130483] [Topology.cpp:408] [findCommonAncestor] Topology: Selecting a start node to identify the common ancestor.[m
[36m[10:02:58.755605] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place SINK(5: {FileSinkDescriptor()})[m
[36m[10:02:58.755627] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[36m[10:02:58.755645] [D] [thread 130483] [BasePlacementStrategy.cpp:672] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: Get topology nodes with children operators[m
[36m[10:02:58.755705] [D] [thread 130483] [BasePlacementStrategy.cpp:683] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: returning list of topology nodes where children operators are placed[m
[36m[10:02:58.755726] [D] [thread 130483] [Topology.cpp:391] [findCommonAncestor] Topology: find common node for a set of topology nodes.[m
[36m[10:02:58.755736] [D] [thread 130483] [Topology.cpp:408] [findCommonAncestor] Topology: Selecting a start node to identify the common ancestor.[m
[36m[10:02:58.755854] [D] [thread 130483] [BottomUpStrategy.cpp:197] [identifyPinningLocation] BottomUpStrategy: Found pinned downstream operator. Skipping placement of further operators.[m
[36m[10:02:58.755901] [D] [thread 130483] [BottomUpStrategy.cpp:77] [pinOperators] BottomUpStrategy: Get the topology node for source operator SOURCE(12,debs,LogicalSourceDescriptor(debs, test_stream6)) placement.[m
[36m[10:02:58.755935] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place SOURCE(12,debs,LogicalSourceDescriptor(debs, test_stream6))[m
[36m[10:02:58.755952] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.756037] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place PROJECTION(13, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))[m
[36m[10:02:58.756053] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.756111] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place WATERMARKASSIGNER(14)[m
[36m[10:02:58.756126] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.756163] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place CENTRALWINDOW(25)[m
[36m[10:02:58.756190] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[36m[10:02:58.756203] [D] [thread 130483] [BasePlacementStrategy.cpp:672] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: Get topology nodes with children operators[m
[33m[1m[10:02:58.756244] [W] [thread 130483] [BasePlacementStrategy.cpp:676] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: unable to find topology for child operator.[m
[33m[1m[10:02:58.756261] [W] [thread 130483] [BottomUpStrategy.cpp:125] [identifyPinningLocation] BottomUpStrategy: No topology node isOperatorAPinnedDownStreamOperator where child operators are placed.[m
[36m[10:02:58.756294] [D] [thread 130483] [BottomUpStrategy.cpp:77] [pinOperators] BottomUpStrategy: Get the topology node for source operator SOURCE(15,debs,LogicalSourceDescriptor(debs, test_stream7)) placement.[m
[36m[10:02:58.756387] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place SOURCE(15,debs,LogicalSourceDescriptor(debs, test_stream7))[m
[36m[10:02:58.756410] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.756496] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place PROJECTION(16, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))[m
[36m[10:02:58.756514] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.756569] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place WATERMARKASSIGNER(17)[m
[36m[10:02:58.756584] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.756622] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place CENTRALWINDOW(25)[m
[36m[10:02:58.756637] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[36m[10:02:58.756649] [D] [thread 130483] [BasePlacementStrategy.cpp:672] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: Get topology nodes with children operators[m
[36m[10:02:58.756702] [D] [thread 130483] [BasePlacementStrategy.cpp:683] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: returning list of topology nodes where children operators are placed[m
[36m[10:02:58.756730] [D] [thread 130483] [Topology.cpp:391] [findCommonAncestor] Topology: find common node for a set of topology nodes.[m
[36m[10:02:58.756742] [D] [thread 130483] [Topology.cpp:408] [findCommonAncestor] Topology: Selecting a start node to identify the common ancestor.[m
[36m[10:02:58.756866] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place SINK(5: {FileSinkDescriptor()})[m
[36m[10:02:58.756887] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[36m[10:02:58.756898] [D] [thread 130483] [BasePlacementStrategy.cpp:672] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: Get topology nodes with children operators[m
[36m[10:02:58.756946] [D] [thread 130483] [BasePlacementStrategy.cpp:683] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: returning list of topology nodes where children operators are placed[m
[36m[10:02:58.756964] [D] [thread 130483] [Topology.cpp:391] [findCommonAncestor] Topology: find common node for a set of topology nodes.[m
[36m[10:02:58.756974] [D] [thread 130483] [Topology.cpp:408] [findCommonAncestor] Topology: Selecting a start node to identify the common ancestor.[m
[36m[10:02:58.757079] [D] [thread 130483] [BottomUpStrategy.cpp:197] [identifyPinningLocation] BottomUpStrategy: Found pinned downstream operator. Skipping placement of further operators.[m
[36m[10:02:58.757121] [D] [thread 130483] [BottomUpStrategy.cpp:77] [pinOperators] BottomUpStrategy: Get the topology node for source operator SOURCE(18,debs,LogicalSourceDescriptor(debs, test_stream8)) placement.[m
[36m[10:02:58.757155] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place SOURCE(18,debs,LogicalSourceDescriptor(debs, test_stream8))[m
[36m[10:02:58.757170] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.757252] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place PROJECTION(19, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))[m
[36m[10:02:58.757268] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.757321] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place WATERMARKASSIGNER(20)[m
[36m[10:02:58.757336] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.757373] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place CENTRALWINDOW(26)[m
[36m[10:02:58.757405] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[36m[10:02:58.757460] [D] [thread 130483] [BasePlacementStrategy.cpp:672] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: Get topology nodes with children operators[m
[33m[1m[10:02:58.757510] [W] [thread 130483] [BasePlacementStrategy.cpp:676] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: unable to find topology for child operator.[m
[33m[1m[10:02:58.757569] [W] [thread 130483] [BottomUpStrategy.cpp:125] [identifyPinningLocation] BottomUpStrategy: No topology node isOperatorAPinnedDownStreamOperator where child operators are placed.[m
[36m[10:02:58.757610] [D] [thread 130483] [BottomUpStrategy.cpp:77] [pinOperators] BottomUpStrategy: Get the topology node for source operator SOURCE(21,debs,LogicalSourceDescriptor(debs, test_stream9)) placement.[m
[36m[10:02:58.757646] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place SOURCE(21,debs,LogicalSourceDescriptor(debs, test_stream9))[m
[36m[10:02:58.757662] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.757742] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place PROJECTION(22, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))[m
[36m[10:02:58.757758] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.757807] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place WATERMARKASSIGNER(23)[m
[36m[10:02:58.757821] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.757860] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place CENTRALWINDOW(26)[m
[36m[10:02:58.757874] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[36m[10:02:58.757886] [D] [thread 130483] [BasePlacementStrategy.cpp:672] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: Get topology nodes with children operators[m
[36m[10:02:58.757932] [D] [thread 130483] [BasePlacementStrategy.cpp:683] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: returning list of topology nodes where children operators are placed[m
[36m[10:02:58.757955] [D] [thread 130483] [Topology.cpp:391] [findCommonAncestor] Topology: find common node for a set of topology nodes.[m
[36m[10:02:58.757966] [D] [thread 130483] [Topology.cpp:408] [findCommonAncestor] Topology: Selecting a start node to identify the common ancestor.[m
[36m[10:02:58.758083] [D] [thread 130483] [BottomUpStrategy.cpp:116] [identifyPinningLocation] BottomUpStrategy: Place SINK(5: {FileSinkDescriptor()})[m
[36m[10:02:58.758101] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[36m[10:02:58.758112] [D] [thread 130483] [BasePlacementStrategy.cpp:672] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: Get topology nodes with children operators[m
[36m[10:02:58.758161] [D] [thread 130483] [BasePlacementStrategy.cpp:683] [getTopologyNodesForChildrenOperators] BasePlacementStrategy: returning list of topology nodes where children operators are placed[m
[36m[10:02:58.758180] [D] [thread 130483] [Topology.cpp:391] [findCommonAncestor] Topology: find common node for a set of topology nodes.[m
[36m[10:02:58.758190] [D] [thread 130483] [Topology.cpp:408] [findCommonAncestor] Topology: Selecting a start node to identify the common ancestor.[m
[36m[10:02:58.758322] [D] [thread 130483] [BottomUpStrategy.cpp:197] [identifyPinningLocation] BottomUpStrategy: Found pinned downstream operator. Skipping placement of further operators.[m
[36m[10:02:58.758337] [D] [thread 130483] [BottomUpStrategy.cpp:103] [pinOperators] BottomUpStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.758350] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.758402] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.758438] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 5 exists[m
[36m[10:02:58.758667] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator SOURCE(6,debs,LogicalSourceDescriptor(debs, test_stream4)) on execution node with id 5[m
[36m[10:02:58.758688] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[33m[1m[10:02:58.758719] [W] [thread 130483] [ExecutionNode.cpp:42] [getQuerySubPlans] ExecutionNode : Unable to find query sub plan with id 1[m
[32m[10:02:58.758915] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 6[m
[36m[10:02:58.759106] [D] [thread 130483] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator SOURCE(6,debs,LogicalSourceDescriptor(debs, test_stream4)) as new root of the plan.[m
[36m[10:02:58.759125] [D] [thread 130483] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:02:58.759132] [D] [thread 130483] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[36m[10:02:58.759162] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.759174] [D] [thread 130483] [ExecutionNode.cpp:116] [addNewQuerySubPlan] ExecutionNode: Creating a new entry of query sub plans and assigning to the id :  1[m
[36m[10:02:58.759306] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  5[m
[36m[10:02:58.759388] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.759426] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 5 already scheduled[m
[36m[10:02:58.759437] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 5 to the query Id index.[m
[36m[10:02:58.759526] [D] [thread 130483] [GlobalExecutionPlan.cpp:188] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Query Id 1 does not exists adding a new entry with execution node 5[m
[36m[10:02:58.759704] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.759727] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.759754] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 5[m
[36m[10:02:58.759776] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.759833] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.759980] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.760015] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 5 exists[m
[36m[10:02:58.760068] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 5 exists[m
[36m[10:02:58.760080] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  5[m
[36m[10:02:58.760157] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator PROJECTION(7, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)) on execution node with id 5[m
[36m[10:02:58.760170] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.760188] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.760221] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.760235] [D] [thread 130483] [QueryPlan.cpp:157] [hasOperatorWithId] QueryPlan: Unable to find operator with matching Id[m
[36m[10:02:58.760272] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.760283] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.760386] [D] [thread 130483] [ExecutionNode.cpp:124] [updateQuerySubPlans] ExecutionNode: Updating the query sub plan with id :1 to the collection of query sub plans[m
[36m[10:02:58.760402] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.760436] [D] [thread 130483] [ExecutionNode.cpp:127] [updateQuerySubPlans] ExecutionNode: Updated the query sub plan with id : 1 to the collection of query sub plans[m
[32m[10:02:58.760554] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 7[m
[36m[10:02:58.760747] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.760769] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.760786] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 6 exists in the query plan or not[m
[36m[10:02:58.760796] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 6 in the query plan[m
[36m[10:02:58.760981] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator SOURCE(6,debs,LogicalSourceDescriptor(debs, test_stream4)) as root operator.[m
[36m[10:02:58.761046] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.761063] [D] [thread 130483] [ExecutionNode.cpp:111] [addNewQuerySubPlan] ExecutionNode: Adding a new entry to the collection of query sub plans after assigning the id :  1[m
[36m[10:02:58.761101] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  5[m
[36m[10:02:58.761119] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.761151] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 5 already scheduled[m
[36m[10:02:58.761162] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 5 to the query Id index.[m
[36m[10:02:58.761275] [D] [thread 130483] [GlobalExecutionPlan.cpp:200] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Skipping as execution node 5 already mapped to the query Id 1[m
[36m[10:02:58.761336] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.761356] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.761373] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 5[m
[36m[10:02:58.761394] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.761446] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.761520] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.761540] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 5 exists[m
[36m[10:02:58.761589] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 5 exists[m
[36m[10:02:58.761602] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  5[m
[36m[10:02:58.761632] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator WATERMARKASSIGNER(8) on execution node with id 5[m
[36m[10:02:58.761644] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.761657] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.761681] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.761708] [D] [thread 130483] [QueryPlan.cpp:157] [hasOperatorWithId] QueryPlan: Unable to find operator with matching Id[m
[36m[10:02:58.761734] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.761745] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.761835] [D] [thread 130483] [ExecutionNode.cpp:124] [updateQuerySubPlans] ExecutionNode: Updating the query sub plan with id :1 to the collection of query sub plans[m
[36m[10:02:58.761847] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.761866] [D] [thread 130483] [ExecutionNode.cpp:127] [updateQuerySubPlans] ExecutionNode: Updated the query sub plan with id : 1 to the collection of query sub plans[m
[32m[10:02:58.761938] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 8[m
[36m[10:02:58.762117] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.762138] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.762149] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 7 exists in the query plan or not[m
[36m[10:02:58.762158] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 7 in the query plan[m
[36m[10:02:58.762341] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator PROJECTION(7, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)) as root operator.[m
[36m[10:02:58.762418] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.762434] [D] [thread 130483] [ExecutionNode.cpp:111] [addNewQuerySubPlan] ExecutionNode: Adding a new entry to the collection of query sub plans after assigning the id :  1[m
[36m[10:02:58.762469] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  5[m
[36m[10:02:58.762488] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.762503] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 5 already scheduled[m
[36m[10:02:58.762512] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 5 to the query Id index.[m
[36m[10:02:58.762567] [D] [thread 130483] [GlobalExecutionPlan.cpp:200] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Skipping as execution node 5 already mapped to the query Id 1[m
[36m[10:02:58.762607] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.762623] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.762639] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 5[m
[36m[10:02:58.762658] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.762705] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.762768] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[33m[1m[10:02:58.762788] [W] [thread 130483] [BasePlacementStrategy.cpp:170] [placePinnedOperators] BasePlacementStrategy: Upstream operators are not placed yet. Skipping the placement.[m
[36m[10:02:58.762797] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.762810] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.762818] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.762866] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.762885] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 6 exists[m
[36m[10:02:58.762972] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator SOURCE(9,debs,LogicalSourceDescriptor(debs, test_stream5)) on execution node with id 6[m
[36m[10:02:58.762987] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[33m[1m[10:02:58.762998] [W] [thread 130483] [ExecutionNode.cpp:42] [getQuerySubPlans] ExecutionNode : Unable to find query sub plan with id 1[m
[32m[10:02:58.763088] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 9[m
[36m[10:02:58.763255] [D] [thread 130483] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator SOURCE(9,debs,LogicalSourceDescriptor(debs, test_stream5)) as new root of the plan.[m
[36m[10:02:58.763274] [D] [thread 130483] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:02:58.763282] [D] [thread 130483] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[36m[10:02:58.763321] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.763334] [D] [thread 130483] [ExecutionNode.cpp:116] [addNewQuerySubPlan] ExecutionNode: Creating a new entry of query sub plans and assigning to the id :  1[m
[36m[10:02:58.763394] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  6[m
[36m[10:02:58.763426] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.763443] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 6 already scheduled[m
[36m[10:02:58.763452] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 6 to the query Id index.[m
[36m[10:02:58.763514] [D] [thread 130483] [GlobalExecutionPlan.cpp:194] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Adding execution node 6 to the query Id 1[m
[36m[10:02:58.763594] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.763613] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.763630] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 6[m
[36m[10:02:58.763649] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.763701] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.763838] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.763859] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 6 exists[m
[36m[10:02:58.763901] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 6 exists[m
[36m[10:02:58.763913] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  6[m
[36m[10:02:58.763981] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator PROJECTION(10, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)) on execution node with id 6[m
[36m[10:02:58.763994] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.764006] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.764031] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.764043] [D] [thread 130483] [QueryPlan.cpp:157] [hasOperatorWithId] QueryPlan: Unable to find operator with matching Id[m
[36m[10:02:58.764075] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.764085] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.764137] [D] [thread 130483] [ExecutionNode.cpp:124] [updateQuerySubPlans] ExecutionNode: Updating the query sub plan with id :1 to the collection of query sub plans[m
[36m[10:02:58.764148] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.764167] [D] [thread 130483] [ExecutionNode.cpp:127] [updateQuerySubPlans] ExecutionNode: Updated the query sub plan with id : 1 to the collection of query sub plans[m
[32m[10:02:58.764256] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 10[m
[36m[10:02:58.764462] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.764486] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.764499] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 9 exists in the query plan or not[m
[36m[10:02:58.764508] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 9 in the query plan[m
[36m[10:02:58.764714] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator SOURCE(9,debs,LogicalSourceDescriptor(debs, test_stream5)) as root operator.[m
[36m[10:02:58.764828] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.764847] [D] [thread 130483] [ExecutionNode.cpp:111] [addNewQuerySubPlan] ExecutionNode: Adding a new entry to the collection of query sub plans after assigning the id :  1[m
[36m[10:02:58.764888] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  6[m
[36m[10:02:58.764907] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.764921] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 6 already scheduled[m
[36m[10:02:58.764930] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 6 to the query Id index.[m
[36m[10:02:58.764985] [D] [thread 130483] [GlobalExecutionPlan.cpp:200] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Skipping as execution node 6 already mapped to the query Id 1[m
[36m[10:02:58.765027] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.765044] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.765059] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 6[m
[36m[10:02:58.765079] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.765128] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.765194] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.765227] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 6 exists[m
[36m[10:02:58.765276] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 6 exists[m
[36m[10:02:58.765289] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  6[m
[36m[10:02:58.765320] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator WATERMARKASSIGNER(11) on execution node with id 6[m
[36m[10:02:58.765332] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.765344] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.765365] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.765386] [D] [thread 130483] [QueryPlan.cpp:157] [hasOperatorWithId] QueryPlan: Unable to find operator with matching Id[m
[36m[10:02:58.765411] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.765422] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.765509] [D] [thread 130483] [ExecutionNode.cpp:124] [updateQuerySubPlans] ExecutionNode: Updating the query sub plan with id :1 to the collection of query sub plans[m
[36m[10:02:58.765521] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.765554] [D] [thread 130483] [ExecutionNode.cpp:127] [updateQuerySubPlans] ExecutionNode: Updated the query sub plan with id : 1 to the collection of query sub plans[m
[32m[10:02:58.765629] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 11[m
[36m[10:02:58.765808] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.765829] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.765842] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 10 exists in the query plan or not[m
[36m[10:02:58.765851] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 10 in the query plan[m
[36m[10:02:58.766045] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator PROJECTION(10, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)) as root operator.[m
[36m[10:02:58.766122] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.766139] [D] [thread 130483] [ExecutionNode.cpp:111] [addNewQuerySubPlan] ExecutionNode: Adding a new entry to the collection of query sub plans after assigning the id :  1[m
[36m[10:02:58.766181] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  6[m
[36m[10:02:58.766200] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.766215] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 6 already scheduled[m
[36m[10:02:58.766224] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 6 to the query Id index.[m
[36m[10:02:58.766281] [D] [thread 130483] [GlobalExecutionPlan.cpp:200] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Skipping as execution node 6 already mapped to the query Id 1[m
[36m[10:02:58.766324] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.766341] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.766370] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 6[m
[36m[10:02:58.766392] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.766444] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.766514] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[36m[10:02:58.766537] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 2 exists[m
[36m[10:02:58.766630] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator CENTRALWINDOW(24) on execution node with id 2[m
[36m[10:02:58.766644] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[33m[1m[10:02:58.766656] [W] [thread 130483] [ExecutionNode.cpp:42] [getQuerySubPlans] ExecutionNode : Unable to find query sub plan with id 1[m
[32m[10:02:58.766768] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 24[m
[36m[10:02:58.766971] [D] [thread 130483] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator CENTRALWINDOW(24) as new root of the plan.[m
[36m[10:02:58.766988] [D] [thread 130483] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:02:58.766996] [D] [thread 130483] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[36m[10:02:58.767019] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.767030] [D] [thread 130483] [ExecutionNode.cpp:116] [addNewQuerySubPlan] ExecutionNode: Creating a new entry of query sub plans and assigning to the id :  1[m
[36m[10:02:58.767081] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  2[m
[36m[10:02:58.767115] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.767182] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 2 already scheduled[m
[36m[10:02:58.767194] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 2 to the query Id index.[m
[36m[10:02:58.767253] [D] [thread 130483] [GlobalExecutionPlan.cpp:194] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Adding execution node 2 to the query Id 1[m
[36m[10:02:58.767315] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.767333] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.767349] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 2[m
[36m[10:02:58.767379] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.767433] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.767512] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[33m[1m[10:02:58.767532] [W] [thread 130483] [BasePlacementStrategy.cpp:170] [placePinnedOperators] BasePlacementStrategy: Upstream operators are not placed yet. Skipping the placement.[m
[36m[10:02:58.767541] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.767554] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.767562] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.767570] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.767621] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.767639] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 7 exists[m
[36m[10:02:58.767729] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator SOURCE(12,debs,LogicalSourceDescriptor(debs, test_stream6)) on execution node with id 7[m
[36m[10:02:58.767744] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[33m[1m[10:02:58.767756] [W] [thread 130483] [ExecutionNode.cpp:42] [getQuerySubPlans] ExecutionNode : Unable to find query sub plan with id 1[m
[32m[10:02:58.767851] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 12[m
[36m[10:02:58.768025] [D] [thread 130483] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator SOURCE(12,debs,LogicalSourceDescriptor(debs, test_stream6)) as new root of the plan.[m
[36m[10:02:58.768043] [D] [thread 130483] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:02:58.768050] [D] [thread 130483] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[36m[10:02:58.768073] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.768084] [D] [thread 130483] [ExecutionNode.cpp:116] [addNewQuerySubPlan] ExecutionNode: Creating a new entry of query sub plans and assigning to the id :  1[m
[36m[10:02:58.768133] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  7[m
[36m[10:02:58.768159] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.768174] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 7 already scheduled[m
[36m[10:02:58.768183] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 7 to the query Id index.[m
[36m[10:02:58.768234] [D] [thread 130483] [GlobalExecutionPlan.cpp:194] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Adding execution node 7 to the query Id 1[m
[36m[10:02:58.768288] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.768306] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.768348] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 7[m
[36m[10:02:58.768372] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.768422] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.768551] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.768570] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 7 exists[m
[36m[10:02:58.768612] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 7 exists[m
[36m[10:02:58.768638] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  7[m
[36m[10:02:58.768710] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator PROJECTION(13, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)) on execution node with id 7[m
[36m[10:02:58.768724] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.768738] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.768764] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.768818] [D] [thread 130483] [QueryPlan.cpp:157] [hasOperatorWithId] QueryPlan: Unable to find operator with matching Id[m
[36m[10:02:58.768857] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.768868] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.768927] [D] [thread 130483] [ExecutionNode.cpp:124] [updateQuerySubPlans] ExecutionNode: Updating the query sub plan with id :1 to the collection of query sub plans[m
[36m[10:02:58.768939] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.768959] [D] [thread 130483] [ExecutionNode.cpp:127] [updateQuerySubPlans] ExecutionNode: Updated the query sub plan with id : 1 to the collection of query sub plans[m
[32m[10:02:58.769070] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 13[m
[36m[10:02:58.769254] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.769317] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.769334] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 12 exists in the query plan or not[m
[36m[10:02:58.769343] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 12 in the query plan[m
[36m[10:02:58.769527] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator SOURCE(12,debs,LogicalSourceDescriptor(debs, test_stream6)) as root operator.[m
[36m[10:02:58.769578] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.769595] [D] [thread 130483] [ExecutionNode.cpp:111] [addNewQuerySubPlan] ExecutionNode: Adding a new entry to the collection of query sub plans after assigning the id :  1[m
[36m[10:02:58.769635] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  7[m
[36m[10:02:58.769655] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.769670] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 7 already scheduled[m
[36m[10:02:58.769679] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 7 to the query Id index.[m
[36m[10:02:58.769738] [D] [thread 130483] [GlobalExecutionPlan.cpp:200] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Skipping as execution node 7 already mapped to the query Id 1[m
[36m[10:02:58.769781] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.769799] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.769862] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 7[m
[36m[10:02:58.769886] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.769939] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.770009] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.770028] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 7 exists[m
[36m[10:02:58.770077] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 7 exists[m
[36m[10:02:58.770090] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  7[m
[36m[10:02:58.770122] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator WATERMARKASSIGNER(14) on execution node with id 7[m
[36m[10:02:58.770134] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.770163] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.770189] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.770211] [D] [thread 130483] [QueryPlan.cpp:157] [hasOperatorWithId] QueryPlan: Unable to find operator with matching Id[m
[36m[10:02:58.770238] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.770249] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.770339] [D] [thread 130483] [ExecutionNode.cpp:124] [updateQuerySubPlans] ExecutionNode: Updating the query sub plan with id :1 to the collection of query sub plans[m
[36m[10:02:58.770359] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.770379] [D] [thread 130483] [ExecutionNode.cpp:127] [updateQuerySubPlans] ExecutionNode: Updated the query sub plan with id : 1 to the collection of query sub plans[m
[32m[10:02:58.770449] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 14[m
[36m[10:02:58.770624] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.770645] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.770658] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 13 exists in the query plan or not[m
[36m[10:02:58.770667] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 13 in the query plan[m
[36m[10:02:58.770852] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator PROJECTION(13, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)) as root operator.[m
[36m[10:02:58.770929] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.770945] [D] [thread 130483] [ExecutionNode.cpp:111] [addNewQuerySubPlan] ExecutionNode: Adding a new entry to the collection of query sub plans after assigning the id :  1[m
[36m[10:02:58.770982] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  7[m
[36m[10:02:58.771000] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.771016] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 7 already scheduled[m
[36m[10:02:58.771025] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 7 to the query Id index.[m
[36m[10:02:58.771080] [D] [thread 130483] [GlobalExecutionPlan.cpp:200] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Skipping as execution node 7 already mapped to the query Id 1[m
[36m[10:02:58.771122] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.771139] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.771154] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 7[m
[36m[10:02:58.771174] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.771220] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.771283] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[33m[1m[10:02:58.771304] [W] [thread 130483] [BasePlacementStrategy.cpp:170] [placePinnedOperators] BasePlacementStrategy: Upstream operators are not placed yet. Skipping the placement.[m
[36m[10:02:58.771327] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.771342] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.771350] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.771406] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.771425] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 8 exists[m
[36m[10:02:58.771530] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator SOURCE(15,debs,LogicalSourceDescriptor(debs, test_stream7)) on execution node with id 8[m
[36m[10:02:58.771544] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[33m[1m[10:02:58.771557] [W] [thread 130483] [ExecutionNode.cpp:42] [getQuerySubPlans] ExecutionNode : Unable to find query sub plan with id 1[m
[32m[10:02:58.771657] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 15[m
[36m[10:02:58.771834] [D] [thread 130483] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator SOURCE(15,debs,LogicalSourceDescriptor(debs, test_stream7)) as new root of the plan.[m
[36m[10:02:58.771850] [D] [thread 130483] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:02:58.771858] [D] [thread 130483] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[36m[10:02:58.771881] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.771892] [D] [thread 130483] [ExecutionNode.cpp:116] [addNewQuerySubPlan] ExecutionNode: Creating a new entry of query sub plans and assigning to the id :  1[m
[36m[10:02:58.771946] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  8[m
[36m[10:02:58.771974] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.771990] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 8 already scheduled[m
[36m[10:02:58.772000] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 8 to the query Id index.[m
[36m[10:02:58.772057] [D] [thread 130483] [GlobalExecutionPlan.cpp:194] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Adding execution node 8 to the query Id 1[m
[36m[10:02:58.772104] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.772122] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.772138] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 8[m
[36m[10:02:58.772158] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.772209] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.772367] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.772392] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 8 exists[m
[36m[10:02:58.772440] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 8 exists[m
[36m[10:02:58.772453] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  8[m
[36m[10:02:58.772538] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator PROJECTION(16, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)) on execution node with id 8[m
[36m[10:02:58.772552] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.772565] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.772591] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.772603] [D] [thread 130483] [QueryPlan.cpp:157] [hasOperatorWithId] QueryPlan: Unable to find operator with matching Id[m
[36m[10:02:58.772636] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.772647] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.772697] [D] [thread 130483] [ExecutionNode.cpp:124] [updateQuerySubPlans] ExecutionNode: Updating the query sub plan with id :1 to the collection of query sub plans[m
[36m[10:02:58.772708] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.772725] [D] [thread 130483] [ExecutionNode.cpp:127] [updateQuerySubPlans] ExecutionNode: Updated the query sub plan with id : 1 to the collection of query sub plans[m
[32m[10:02:58.772860] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 16[m
[36m[10:02:58.773040] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.773059] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.773071] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 15 exists in the query plan or not[m
[36m[10:02:58.773080] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 15 in the query plan[m
[36m[10:02:58.773253] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator SOURCE(15,debs,LogicalSourceDescriptor(debs, test_stream7)) as root operator.[m
[36m[10:02:58.773306] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.773329] [D] [thread 130483] [ExecutionNode.cpp:111] [addNewQuerySubPlan] ExecutionNode: Adding a new entry to the collection of query sub plans after assigning the id :  1[m
[36m[10:02:58.773371] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  8[m
[36m[10:02:58.773390] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.773404] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 8 already scheduled[m
[36m[10:02:58.773413] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 8 to the query Id index.[m
[36m[10:02:58.773469] [D] [thread 130483] [GlobalExecutionPlan.cpp:200] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Skipping as execution node 8 already mapped to the query Id 1[m
[36m[10:02:58.773512] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.773529] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.773556] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 8[m
[36m[10:02:58.773578] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.773626] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.773692] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.773711] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 8 exists[m
[36m[10:02:58.773758] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 8 exists[m
[36m[10:02:58.773770] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  8[m
[36m[10:02:58.773801] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator WATERMARKASSIGNER(17) on execution node with id 8[m
[36m[10:02:58.773813] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.773857] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.773883] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.773907] [D] [thread 130483] [QueryPlan.cpp:157] [hasOperatorWithId] QueryPlan: Unable to find operator with matching Id[m
[36m[10:02:58.773933] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.773944] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.774035] [D] [thread 130483] [ExecutionNode.cpp:124] [updateQuerySubPlans] ExecutionNode: Updating the query sub plan with id :1 to the collection of query sub plans[m
[36m[10:02:58.774047] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.774066] [D] [thread 130483] [ExecutionNode.cpp:127] [updateQuerySubPlans] ExecutionNode: Updated the query sub plan with id : 1 to the collection of query sub plans[m
[32m[10:02:58.774138] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 17[m
[36m[10:02:58.774314] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.774333] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.774346] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 16 exists in the query plan or not[m
[36m[10:02:58.774355] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 16 in the query plan[m
[36m[10:02:58.774539] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator PROJECTION(16, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)) as root operator.[m
[36m[10:02:58.774617] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.774633] [D] [thread 130483] [ExecutionNode.cpp:111] [addNewQuerySubPlan] ExecutionNode: Adding a new entry to the collection of query sub plans after assigning the id :  1[m
[36m[10:02:58.774671] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  8[m
[36m[10:02:58.774691] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.774707] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 8 already scheduled[m
[36m[10:02:58.774716] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 8 to the query Id index.[m
[36m[10:02:58.774773] [D] [thread 130483] [GlobalExecutionPlan.cpp:200] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Skipping as execution node 8 already mapped to the query Id 1[m
[36m[10:02:58.774818] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.774834] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.774851] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 8[m
[36m[10:02:58.774871] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.774919] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.774987] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[36m[10:02:58.775009] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 3 exists[m
[36m[10:02:58.775133] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator CENTRALWINDOW(25) on execution node with id 3[m
[36m[10:02:58.775189] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[33m[1m[10:02:58.775202] [W] [thread 130483] [ExecutionNode.cpp:42] [getQuerySubPlans] ExecutionNode : Unable to find query sub plan with id 1[m
[32m[10:02:58.775332] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 25[m
[36m[10:02:58.775527] [D] [thread 130483] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator CENTRALWINDOW(25) as new root of the plan.[m
[36m[10:02:58.775546] [D] [thread 130483] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:02:58.775553] [D] [thread 130483] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[36m[10:02:58.775576] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.775588] [D] [thread 130483] [ExecutionNode.cpp:116] [addNewQuerySubPlan] ExecutionNode: Creating a new entry of query sub plans and assigning to the id :  1[m
[36m[10:02:58.775642] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  3[m
[36m[10:02:58.775675] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.775691] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 3 already scheduled[m
[36m[10:02:58.775713] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 3 to the query Id index.[m
[36m[10:02:58.775771] [D] [thread 130483] [GlobalExecutionPlan.cpp:194] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Adding execution node 3 to the query Id 1[m
[36m[10:02:58.775821] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.775838] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.775853] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 3[m
[36m[10:02:58.775872] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.775922] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.775999] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[33m[1m[10:02:58.776022] [W] [thread 130483] [BasePlacementStrategy.cpp:170] [placePinnedOperators] BasePlacementStrategy: Upstream operators are not placed yet. Skipping the placement.[m
[36m[10:02:58.776030] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.776044] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.776109] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.776119] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.776182] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.776202] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 9 exists[m
[36m[10:02:58.776298] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator SOURCE(18,debs,LogicalSourceDescriptor(debs, test_stream8)) on execution node with id 9[m
[36m[10:02:58.776312] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[33m[1m[10:02:58.776357] [W] [thread 130483] [ExecutionNode.cpp:42] [getQuerySubPlans] ExecutionNode : Unable to find query sub plan with id 1[m
[32m[10:02:58.776462] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 18[m
[36m[10:02:58.776648] [D] [thread 130483] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator SOURCE(18,debs,LogicalSourceDescriptor(debs, test_stream8)) as new root of the plan.[m
[36m[10:02:58.776665] [D] [thread 130483] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:02:58.776673] [D] [thread 130483] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[36m[10:02:58.776696] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.776707] [D] [thread 130483] [ExecutionNode.cpp:116] [addNewQuerySubPlan] ExecutionNode: Creating a new entry of query sub plans and assigning to the id :  1[m
[36m[10:02:58.776760] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  9[m
[36m[10:02:58.776790] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.776806] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 9 already scheduled[m
[36m[10:02:58.776815] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 9 to the query Id index.[m
[36m[10:02:58.776870] [D] [thread 130483] [GlobalExecutionPlan.cpp:194] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Adding execution node 9 to the query Id 1[m
[36m[10:02:58.776921] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.776938] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.776954] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 9[m
[36m[10:02:58.776974] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.777027] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.777153] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.777177] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 9 exists[m
[36m[10:02:58.777219] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 9 exists[m
[36m[10:02:58.777231] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  9[m
[36m[10:02:58.777300] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator PROJECTION(19, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)) on execution node with id 9[m
[36m[10:02:58.777313] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.777326] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.777352] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.777364] [D] [thread 130483] [QueryPlan.cpp:157] [hasOperatorWithId] QueryPlan: Unable to find operator with matching Id[m
[36m[10:02:58.777396] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.777407] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.777462] [D] [thread 130483] [ExecutionNode.cpp:124] [updateQuerySubPlans] ExecutionNode: Updating the query sub plan with id :1 to the collection of query sub plans[m
[36m[10:02:58.777473] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.777491] [D] [thread 130483] [ExecutionNode.cpp:127] [updateQuerySubPlans] ExecutionNode: Updated the query sub plan with id : 1 to the collection of query sub plans[m
[32m[10:02:58.777575] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 19[m
[36m[10:02:58.777737] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.777756] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.777768] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 18 exists in the query plan or not[m
[36m[10:02:58.777778] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 18 in the query plan[m
[36m[10:02:58.777978] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator SOURCE(18,debs,LogicalSourceDescriptor(debs, test_stream8)) as root operator.[m
[36m[10:02:58.778033] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.778050] [D] [thread 130483] [ExecutionNode.cpp:111] [addNewQuerySubPlan] ExecutionNode: Adding a new entry to the collection of query sub plans after assigning the id :  1[m
[36m[10:02:58.778088] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  9[m
[36m[10:02:58.778106] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.778137] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 9 already scheduled[m
[36m[10:02:58.778148] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 9 to the query Id index.[m
[36m[10:02:58.778206] [D] [thread 130483] [GlobalExecutionPlan.cpp:200] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Skipping as execution node 9 already mapped to the query Id 1[m
[36m[10:02:58.778250] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.778268] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.778283] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 9[m
[36m[10:02:58.778304] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.778351] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.778418] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.778437] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 9 exists[m
[36m[10:02:58.778482] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 9 exists[m
[36m[10:02:58.778494] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  9[m
[36m[10:02:58.778524] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator WATERMARKASSIGNER(20) on execution node with id 9[m
[36m[10:02:58.778536] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.778548] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.778569] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.778588] [D] [thread 130483] [QueryPlan.cpp:157] [hasOperatorWithId] QueryPlan: Unable to find operator with matching Id[m
[36m[10:02:58.778613] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.778623] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.778707] [D] [thread 130483] [ExecutionNode.cpp:124] [updateQuerySubPlans] ExecutionNode: Updating the query sub plan with id :1 to the collection of query sub plans[m
[36m[10:02:58.778719] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.778736] [D] [thread 130483] [ExecutionNode.cpp:127] [updateQuerySubPlans] ExecutionNode: Updated the query sub plan with id : 1 to the collection of query sub plans[m
[32m[10:02:58.778805] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 20[m
[36m[10:02:58.778971] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.778991] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.779019] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 19 exists in the query plan or not[m
[36m[10:02:58.779029] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 19 in the query plan[m
[36m[10:02:58.779214] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator PROJECTION(19, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)) as root operator.[m
[36m[10:02:58.779291] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.779308] [D] [thread 130483] [ExecutionNode.cpp:111] [addNewQuerySubPlan] ExecutionNode: Adding a new entry to the collection of query sub plans after assigning the id :  1[m
[36m[10:02:58.779347] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  9[m
[36m[10:02:58.779365] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.779379] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 9 already scheduled[m
[36m[10:02:58.779388] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 9 to the query Id index.[m
[36m[10:02:58.779444] [D] [thread 130483] [GlobalExecutionPlan.cpp:200] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Skipping as execution node 9 already mapped to the query Id 1[m
[36m[10:02:58.779485] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.779503] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.779518] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 9[m
[36m[10:02:58.779539] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.779598] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.779669] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[33m[1m[10:02:58.779689] [W] [thread 130483] [BasePlacementStrategy.cpp:170] [placePinnedOperators] BasePlacementStrategy: Upstream operators are not placed yet. Skipping the placement.[m
[36m[10:02:58.779698] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.779710] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.779718] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.779766] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.779784] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 10 exists[m
[36m[10:02:58.779870] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator SOURCE(21,debs,LogicalSourceDescriptor(debs, test_stream9)) on execution node with id 10[m
[36m[10:02:58.779898] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[33m[1m[10:02:58.779911] [W] [thread 130483] [ExecutionNode.cpp:42] [getQuerySubPlans] ExecutionNode : Unable to find query sub plan with id 1[m
[32m[10:02:58.780006] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 21[m
[36m[10:02:58.780173] [D] [thread 130483] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator SOURCE(21,debs,LogicalSourceDescriptor(debs, test_stream9)) as new root of the plan.[m
[36m[10:02:58.780190] [D] [thread 130483] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:02:58.780198] [D] [thread 130483] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[36m[10:02:58.780220] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.780231] [D] [thread 130483] [ExecutionNode.cpp:116] [addNewQuerySubPlan] ExecutionNode: Creating a new entry of query sub plans and assigning to the id :  1[m
[36m[10:02:58.780284] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  10[m
[36m[10:02:58.780312] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.780356] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 10 already scheduled[m
[36m[10:02:58.780367] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 10 to the query Id index.[m
[36m[10:02:58.780428] [D] [thread 130483] [GlobalExecutionPlan.cpp:194] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Adding execution node 10 to the query Id 1[m
[36m[10:02:58.780487] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.780505] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.780522] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 10[m
[36m[10:02:58.780544] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.780598] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.780736] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.780765] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 10 exists[m
[36m[10:02:58.780807] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 10 exists[m
[36m[10:02:58.780875] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  10[m
[36m[10:02:58.780953] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator PROJECTION(22, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)) on execution node with id 10[m
[36m[10:02:58.780972] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.781016] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.781045] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.781058] [D] [thread 130483] [QueryPlan.cpp:157] [hasOperatorWithId] QueryPlan: Unable to find operator with matching Id[m
[36m[10:02:58.781091] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.781102] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.781163] [D] [thread 130483] [ExecutionNode.cpp:124] [updateQuerySubPlans] ExecutionNode: Updating the query sub plan with id :1 to the collection of query sub plans[m
[36m[10:02:58.781175] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.781194] [D] [thread 130483] [ExecutionNode.cpp:127] [updateQuerySubPlans] ExecutionNode: Updated the query sub plan with id : 1 to the collection of query sub plans[m
[32m[10:02:58.781278] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 22[m
[36m[10:02:58.781452] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.781470] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.781483] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 21 exists in the query plan or not[m
[36m[10:02:58.781491] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 21 in the query plan[m
[36m[10:02:58.781663] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator SOURCE(21,debs,LogicalSourceDescriptor(debs, test_stream9)) as root operator.[m
[36m[10:02:58.781712] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.781727] [D] [thread 130483] [ExecutionNode.cpp:111] [addNewQuerySubPlan] ExecutionNode: Adding a new entry to the collection of query sub plans after assigning the id :  1[m
[36m[10:02:58.781764] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  10[m
[36m[10:02:58.781784] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.781799] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 10 already scheduled[m
[36m[10:02:58.781808] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 10 to the query Id index.[m
[36m[10:02:58.781865] [D] [thread 130483] [GlobalExecutionPlan.cpp:200] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Skipping as execution node 10 already mapped to the query Id 1[m
[36m[10:02:58.781909] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.781926] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.781942] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 10[m
[36m[10:02:58.781963] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.782010] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.782078] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children false or has multiple parent false[m
[36m[10:02:58.782096] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 10 exists[m
[36m[10:02:58.782142] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 10 exists[m
[36m[10:02:58.782154] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  10[m
[36m[10:02:58.782184] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator WATERMARKASSIGNER(23) on execution node with id 10[m
[36m[10:02:58.782196] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.782207] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.782227] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.782248] [D] [thread 130483] [QueryPlan.cpp:157] [hasOperatorWithId] QueryPlan: Unable to find operator with matching Id[m
[36m[10:02:58.782273] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.782283] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.782387] [D] [thread 130483] [ExecutionNode.cpp:124] [updateQuerySubPlans] ExecutionNode: Updating the query sub plan with id :1 to the collection of query sub plans[m
[36m[10:02:58.782406] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.782426] [D] [thread 130483] [ExecutionNode.cpp:127] [updateQuerySubPlans] ExecutionNode: Updated the query sub plan with id : 1 to the collection of query sub plans[m
[32m[10:02:58.782495] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 23[m
[36m[10:02:58.782664] [D] [thread 130483] [QueryPlan.cpp:145] [hasOperatorWithId] QueryPlan: Checking if the operator exists in the query plan or not[m
[36m[10:02:58.782683] [D] [thread 130483] [QueryPlan.cpp:148] [hasOperatorWithId] QueryPlan: Found operator 1 in the query plan[m
[36m[10:02:58.782695] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 22 exists in the query plan or not[m
[36m[10:02:58.782704] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 22 in the query plan[m
[36m[10:02:58.782888] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator PROJECTION(22, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)) as root operator.[m
[36m[10:02:58.782967] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.782983] [D] [thread 130483] [ExecutionNode.cpp:111] [addNewQuerySubPlan] ExecutionNode: Adding a new entry to the collection of query sub plans after assigning the id :  1[m
[36m[10:02:58.783018] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  10[m
[36m[10:02:58.783036] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.783050] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 10 already scheduled[m
[36m[10:02:58.783059] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 10 to the query Id index.[m
[36m[10:02:58.783113] [D] [thread 130483] [GlobalExecutionPlan.cpp:200] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Skipping as execution node 10 already mapped to the query Id 1[m
[36m[10:02:58.783154] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.783171] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.783187] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 10[m
[36m[10:02:58.783207] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.783254] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.783318] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[36m[10:02:58.783341] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 4 exists[m
[36m[10:02:58.783453] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator CENTRALWINDOW(26) on execution node with id 4[m
[36m[10:02:58.783468] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[33m[1m[10:02:58.783479] [W] [thread 130483] [ExecutionNode.cpp:42] [getQuerySubPlans] ExecutionNode : Unable to find query sub plan with id 1[m
[32m[10:02:58.783574] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 26[m
[36m[10:02:58.783770] [D] [thread 130483] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator CENTRALWINDOW(26) as new root of the plan.[m
[36m[10:02:58.783786] [D] [thread 130483] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:02:58.783794] [D] [thread 130483] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[36m[10:02:58.783816] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.783828] [D] [thread 130483] [ExecutionNode.cpp:116] [addNewQuerySubPlan] ExecutionNode: Creating a new entry of query sub plans and assigning to the id :  1[m
[36m[10:02:58.783882] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  4[m
[36m[10:02:58.783912] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.783928] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 4 already scheduled[m
[36m[10:02:58.783937] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 4 to the query Id index.[m
[36m[10:02:58.783989] [D] [thread 130483] [GlobalExecutionPlan.cpp:194] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Adding execution node 4 to the query Id 1[m
[36m[10:02:58.784039] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.784056] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.784072] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 4[m
[36m[10:02:58.784092] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.784142] [D] [thread 130483] [BasePlacementStrategy.cpp:134] [placePinnedOperators] BasePlacementStrategy: Place all pinned upstream operators.[m
[36m[10:02:58.784211] [D] [thread 130483] [OperatorNode.cpp:37] [hasMultipleChildrenOrParents] OperatorNode: has multiple children true or has multiple parent false[m
[36m[10:02:58.784236] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 1 exists[m
[36m[10:02:58.784376] [D] [thread 130483] [BasePlacementStrategy.cpp:693] [getCandidateQueryPlanForOperator] BasePlacementStrategy: Get candidate query plan for the operator SINK(5: {FileSinkDescriptor()}) on execution node with id 1[m
[36m[10:02:58.784396] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[33m[1m[10:02:58.784407] [W] [thread 130483] [ExecutionNode.cpp:42] [getQuerySubPlans] ExecutionNode : Unable to find query sub plan with id 1[m
[32m[10:02:58.784499] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 5[m
[36m[10:02:58.784676] [D] [thread 130483] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator SINK(5: {FileSinkDescriptor()}) as new root of the plan.[m
[36m[10:02:58.784692] [D] [thread 130483] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:02:58.784700] [D] [thread 130483] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[36m[10:02:58.784721] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.784732] [D] [thread 130483] [ExecutionNode.cpp:116] [addNewQuerySubPlan] ExecutionNode: Creating a new entry of query sub plans and assigning to the id :  1[m
[36m[10:02:58.784783] [D] [thread 130483] [GlobalExecutionPlan.cpp:81] [addExecutionNode] GlobalExecutionPlan: Added Execution node with id  1[m
[36m[10:02:58.784814] [D] [thread 130483] [GlobalExecutionPlan.cpp:169] [scheduleExecutionNode] GlobalExecutionPlan: Schedule execution node for deployment[m
[33m[1m[10:02:58.784829] [W] [thread 130483] [GlobalExecutionPlan.cpp:175] [scheduleExecutionNode] GlobalExecutionPlan: Execution node 1 already scheduled[m
[36m[10:02:58.784839] [D] [thread 130483] [GlobalExecutionPlan.cpp:181] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Mapping execution node 1 to the query Id index.[m
[36m[10:02:58.784893] [D] [thread 130483] [GlobalExecutionPlan.cpp:194] [mapExecutionNodeToQueryId] GlobalExecutionPlan: Adding execution node 1 to the query Id 1[m
[36m[10:02:58.784942] [D] [thread 130483] [BasePlacementStrategy.cpp:239] [placePinnedOperators] BasePlacementStrategy: Reducing the node remaining CPU capacity by 1[m
[36m[10:02:58.784960] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[32m[10:02:58.784975] [I] [thread 130483] [Topology.cpp:369] [reduceResources] Topology: Reduce 1 resources from node with id 1[m
[36m[10:02:58.784994] [D] [thread 130483] [TopologyNode.cpp:67] [reduceResources] TopologyNode: Reducing resources 1 of 65535[m
[36m[10:02:58.785015] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.785032] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.785040] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.785048] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.785057] [D] [thread 130483] [BasePlacementStrategy.cpp:268] [placePinnedOperators] BasePlacementStrategy: Finished placing query operators into the global execution plan[m
[36m[10:02:58.785073] [D] [thread 130483] [GlobalExecutionPlan.cpp:159] [getAsString] GlobalExecutionPlan: Get Execution plan as string[m
[32m[10:02:58.785116] [I] [thread 130483] [BasePlacementStrategy.cpp:361] [addNetworkSourceAndSinkOperators] [m
[36m[10:02:58.785139] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.785199] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 7 exists in the query plan or not[m
[36m[10:02:58.785241] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.785267] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 8 exists in the query plan or not[m
[36m[10:02:58.785279] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 8 in the query plan[m
[36m[10:02:58.785297] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.785455] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.785481] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.785503] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 0 source operators.[m
[36m[10:02:58.785551] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.785622] [D] [thread 130483] [Topology.cpp:545] [findNodesBetween] Topology: iterate over parent of the source node and find path between its parent and destination nodes.[m
[36m[10:02:58.785655] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.785663] [D] [thread 130483] [Topology.cpp:536] [findNodesBetween] Topology: Both source and destination are same node.[m
[36m[10:02:58.785782] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 5 exists[m
[36m[10:02:58.785863] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 5 exists[m
[36m[10:02:58.785876] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  5[m
[36m[10:02:58.785898] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.785914] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.785944] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 8 exists in the query plan or not[m
[36m[10:02:58.785956] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 8 in the query plan[m
[32m[10:02:58.786141] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 29[m
[36m[10:02:58.786336] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator WATERMARKASSIGNER(8) as root operator.[m
[36m[10:02:58.786416] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 2 exists[m
[36m[10:02:58.786463] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 2 exists[m
[36m[10:02:58.786487] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  2[m
[36m[10:02:58.786507] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.786521] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[32m[10:02:58.786711] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 27[m
[36m[10:02:58.786760] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 24 exists in the query plan or not[m
[36m[10:02:58.786787] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 24 in the query plan[m
[36m[10:02:58.786949] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 5 exists[m
[36m[10:02:58.786967] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  5[m
[36m[10:02:58.786980] [D] [thread 130483] [GlobalExecutionPlan.cpp:49] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Adding Execution node as parent to the execution node with id  5[m
[36m[10:02:58.786994] [D] [thread 130483] [Node.cpp:387] [containAsParent] Node: Checking if the input node is contained in the parent list[m
[36m[10:02:58.787023] [D] [thread 130483] [GlobalExecutionPlan.cpp:56] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Added Execution node with id  2[m
[36m[10:02:58.787055] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.787105] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 10 exists in the query plan or not[m
[36m[10:02:58.787156] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.787183] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 11 exists in the query plan or not[m
[36m[10:02:58.787194] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 11 in the query plan[m
[36m[10:02:58.787211] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.787343] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.787388] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.787424] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[36m[10:02:58.787464] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.787528] [D] [thread 130483] [Topology.cpp:545] [findNodesBetween] Topology: iterate over parent of the source node and find path between its parent and destination nodes.[m
[36m[10:02:58.787542] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.787549] [D] [thread 130483] [Topology.cpp:536] [findNodesBetween] Topology: Both source and destination are same node.[m
[36m[10:02:58.787618] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 6 exists[m
[36m[10:02:58.787690] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 6 exists[m
[36m[10:02:58.787703] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  6[m
[36m[10:02:58.787720] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.787736] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.787766] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 11 exists in the query plan or not[m
[36m[10:02:58.787779] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 11 in the query plan[m
[32m[10:02:58.787854] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 32[m
[36m[10:02:58.788015] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator WATERMARKASSIGNER(11) as root operator.[m
[36m[10:02:58.788084] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 2 exists[m
[36m[10:02:58.788126] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 2 exists[m
[36m[10:02:58.788138] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  2[m
[36m[10:02:58.788153] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.788165] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[32m[10:02:58.788268] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 30[m
[36m[10:02:58.788307] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 24 exists in the query plan or not[m
[36m[10:02:58.788343] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 24 in the query plan[m
[36m[10:02:58.788503] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 6 exists[m
[36m[10:02:58.788520] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  6[m
[36m[10:02:58.788532] [D] [thread 130483] [GlobalExecutionPlan.cpp:49] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Adding Execution node as parent to the execution node with id  6[m
[36m[10:02:58.788542] [D] [thread 130483] [Node.cpp:387] [containAsParent] Node: Checking if the input node is contained in the parent list[m
[36m[10:02:58.788588] [D] [thread 130483] [GlobalExecutionPlan.cpp:56] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Added Execution node with id  2[m
[36m[10:02:58.788651] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.788795] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.788814] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.788834] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 0 source operators.[m
[36m[10:02:58.788873] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.788928] [D] [thread 130483] [Topology.cpp:545] [findNodesBetween] Topology: iterate over parent of the source node and find path between its parent and destination nodes.[m
[36m[10:02:58.788942] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.788949] [D] [thread 130483] [Topology.cpp:536] [findNodesBetween] Topology: Both source and destination are same node.[m
[36m[10:02:58.789011] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 2 exists[m
[36m[10:02:58.789130] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 2 exists[m
[36m[10:02:58.789145] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  2[m
[36m[10:02:58.789162] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.789178] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.789206] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 24 exists in the query plan or not[m
[36m[10:02:58.789220] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 24 in the query plan[m
[32m[10:02:58.789290] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 35[m
[36m[10:02:58.789449] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator CENTRALWINDOW(24) as root operator.[m
[36m[10:02:58.789521] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 1 exists[m
[36m[10:02:58.789564] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 1 exists[m
[36m[10:02:58.789576] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  1[m
[36m[10:02:58.789591] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.789604] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[32m[10:02:58.789726] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 33[m
[36m[10:02:58.789767] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 5 exists in the query plan or not[m
[36m[10:02:58.789790] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 5 in the query plan[m
[36m[10:02:58.789924] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 2 exists[m
[36m[10:02:58.789941] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  2[m
[36m[10:02:58.789954] [D] [thread 130483] [GlobalExecutionPlan.cpp:49] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Adding Execution node as parent to the execution node with id  2[m
[36m[10:02:58.789964] [D] [thread 130483] [Node.cpp:387] [containAsParent] Node: Checking if the input node is contained in the parent list[m
[36m[10:02:58.789989] [D] [thread 130483] [GlobalExecutionPlan.cpp:56] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Added Execution node with id  1[m
[36m[10:02:58.790029] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.790077] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 13 exists in the query plan or not[m
[36m[10:02:58.790114] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.790141] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 14 exists in the query plan or not[m
[36m[10:02:58.790152] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 14 in the query plan[m
[36m[10:02:58.790169] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.790276] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.790296] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.790359] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 0 source operators.[m
[36m[10:02:58.790394] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.790459] [D] [thread 130483] [Topology.cpp:545] [findNodesBetween] Topology: iterate over parent of the source node and find path between its parent and destination nodes.[m
[36m[10:02:58.790474] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.790481] [D] [thread 130483] [Topology.cpp:536] [findNodesBetween] Topology: Both source and destination are same node.[m
[36m[10:02:58.790545] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 7 exists[m
[36m[10:02:58.790610] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 7 exists[m
[36m[10:02:58.790623] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  7[m
[36m[10:02:58.790640] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.790662] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.790693] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 14 exists in the query plan or not[m
[36m[10:02:58.790705] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 14 in the query plan[m
[32m[10:02:58.790777] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 38[m
[36m[10:02:58.790932] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator WATERMARKASSIGNER(14) as root operator.[m
[36m[10:02:58.791006] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 3 exists[m
[36m[10:02:58.791047] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 3 exists[m
[36m[10:02:58.791059] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  3[m
[36m[10:02:58.791076] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.791087] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[32m[10:02:58.791188] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 36[m
[36m[10:02:58.791228] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 25 exists in the query plan or not[m
[36m[10:02:58.791241] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 25 in the query plan[m
[36m[10:02:58.791391] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 7 exists[m
[36m[10:02:58.791407] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  7[m
[36m[10:02:58.791419] [D] [thread 130483] [GlobalExecutionPlan.cpp:49] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Adding Execution node as parent to the execution node with id  7[m
[36m[10:02:58.791429] [D] [thread 130483] [Node.cpp:387] [containAsParent] Node: Checking if the input node is contained in the parent list[m
[36m[10:02:58.791455] [D] [thread 130483] [GlobalExecutionPlan.cpp:56] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Added Execution node with id  3[m
[36m[10:02:58.791484] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.791528] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 16 exists in the query plan or not[m
[36m[10:02:58.791562] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.791588] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 17 exists in the query plan or not[m
[36m[10:02:58.791599] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 17 in the query plan[m
[36m[10:02:58.791615] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.791726] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.791768] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.791802] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[36m[10:02:58.791840] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.791899] [D] [thread 130483] [Topology.cpp:545] [findNodesBetween] Topology: iterate over parent of the source node and find path between its parent and destination nodes.[m
[36m[10:02:58.791913] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.791920] [D] [thread 130483] [Topology.cpp:536] [findNodesBetween] Topology: Both source and destination are same node.[m
[36m[10:02:58.791979] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 8 exists[m
[36m[10:02:58.792044] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 8 exists[m
[36m[10:02:58.792057] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  8[m
[36m[10:02:58.792074] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.792089] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.792116] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 17 exists in the query plan or not[m
[36m[10:02:58.792128] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 17 in the query plan[m
[32m[10:02:58.792241] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 41[m
[36m[10:02:58.792439] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator WATERMARKASSIGNER(17) as root operator.[m
[36m[10:02:58.792531] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 3 exists[m
[36m[10:02:58.792575] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 3 exists[m
[36m[10:02:58.792587] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  3[m
[36m[10:02:58.792604] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.792617] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[32m[10:02:58.792725] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 39[m
[36m[10:02:58.792769] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 25 exists in the query plan or not[m
[36m[10:02:58.792782] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 25 in the query plan[m
[36m[10:02:58.792926] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 8 exists[m
[36m[10:02:58.792944] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  8[m
[36m[10:02:58.792955] [D] [thread 130483] [GlobalExecutionPlan.cpp:49] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Adding Execution node as parent to the execution node with id  8[m
[36m[10:02:58.792966] [D] [thread 130483] [Node.cpp:387] [containAsParent] Node: Checking if the input node is contained in the parent list[m
[36m[10:02:58.792996] [D] [thread 130483] [GlobalExecutionPlan.cpp:56] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Added Execution node with id  3[m
[36m[10:02:58.793032] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.793167] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.793208] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.793240] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[36m[10:02:58.793277] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.793382] [D] [thread 130483] [Topology.cpp:545] [findNodesBetween] Topology: iterate over parent of the source node and find path between its parent and destination nodes.[m
[36m[10:02:58.793399] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.793406] [D] [thread 130483] [Topology.cpp:536] [findNodesBetween] Topology: Both source and destination are same node.[m
[36m[10:02:58.793472] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 3 exists[m
[36m[10:02:58.793542] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 3 exists[m
[36m[10:02:58.793555] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  3[m
[36m[10:02:58.793574] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.793589] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.793618] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 25 exists in the query plan or not[m
[36m[10:02:58.793632] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 25 in the query plan[m
[32m[10:02:58.793703] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 44[m
[36m[10:02:58.793854] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator CENTRALWINDOW(25) as root operator.[m
[36m[10:02:58.793925] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 1 exists[m
[36m[10:02:58.793983] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 1 exists[m
[36m[10:02:58.793996] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  1[m
[36m[10:02:58.794012] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.794024] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[32m[10:02:58.794124] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 42[m
[36m[10:02:58.794163] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 5 exists in the query plan or not[m
[36m[10:02:58.794175] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 5 in the query plan[m
[36m[10:02:58.794312] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 3 exists[m
[36m[10:02:58.794329] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  3[m
[36m[10:02:58.794343] [D] [thread 130483] [GlobalExecutionPlan.cpp:49] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Adding Execution node as parent to the execution node with id  3[m
[36m[10:02:58.794352] [D] [thread 130483] [Node.cpp:387] [containAsParent] Node: Checking if the input node is contained in the parent list[m
[36m[10:02:58.794388] [D] [thread 130483] [GlobalExecutionPlan.cpp:56] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Added Execution node with id  1[m
[36m[10:02:58.794420] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.794471] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 19 exists in the query plan or not[m
[36m[10:02:58.794507] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.794534] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 20 exists in the query plan or not[m
[36m[10:02:58.794546] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 20 in the query plan[m
[36m[10:02:58.794563] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.794680] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.794702] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.794721] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 0 source operators.[m
[36m[10:02:58.794753] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.794813] [D] [thread 130483] [Topology.cpp:545] [findNodesBetween] Topology: iterate over parent of the source node and find path between its parent and destination nodes.[m
[36m[10:02:58.794827] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.794834] [D] [thread 130483] [Topology.cpp:536] [findNodesBetween] Topology: Both source and destination are same node.[m
[36m[10:02:58.794915] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 9 exists[m
[36m[10:02:58.794986] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 9 exists[m
[36m[10:02:58.794999] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  9[m
[36m[10:02:58.795016] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.795032] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.795061] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 20 exists in the query plan or not[m
[36m[10:02:58.795073] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 20 in the query plan[m
[32m[10:02:58.795145] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 47[m
[36m[10:02:58.795357] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator WATERMARKASSIGNER(20) as root operator.[m
[36m[10:02:58.795450] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 4 exists[m
[36m[10:02:58.795497] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 4 exists[m
[36m[10:02:58.795509] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  4[m
[36m[10:02:58.795527] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.795540] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[32m[10:02:58.795649] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 45[m
[36m[10:02:58.795693] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 26 exists in the query plan or not[m
[36m[10:02:58.795706] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 26 in the query plan[m
[36m[10:02:58.795841] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 9 exists[m
[36m[10:02:58.795858] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  9[m
[36m[10:02:58.795870] [D] [thread 130483] [GlobalExecutionPlan.cpp:49] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Adding Execution node as parent to the execution node with id  9[m
[36m[10:02:58.795880] [D] [thread 130483] [Node.cpp:387] [containAsParent] Node: Checking if the input node is contained in the parent list[m
[36m[10:02:58.795906] [D] [thread 130483] [GlobalExecutionPlan.cpp:56] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Added Execution node with id  4[m
[36m[10:02:58.795937] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.795984] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 22 exists in the query plan or not[m
[36m[10:02:58.796018] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.796044] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 23 exists in the query plan or not[m
[36m[10:02:58.796055] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 23 in the query plan[m
[36m[10:02:58.796071] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.796185] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.796227] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.796262] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[36m[10:02:58.796300] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.796394] [D] [thread 130483] [Topology.cpp:545] [findNodesBetween] Topology: iterate over parent of the source node and find path between its parent and destination nodes.[m
[36m[10:02:58.796414] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.796421] [D] [thread 130483] [Topology.cpp:536] [findNodesBetween] Topology: Both source and destination are same node.[m
[36m[10:02:58.796485] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 10 exists[m
[36m[10:02:58.796556] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 10 exists[m
[36m[10:02:58.796568] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  10[m
[36m[10:02:58.796596] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.796613] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.796642] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 23 exists in the query plan or not[m
[36m[10:02:58.796654] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 23 in the query plan[m
[32m[10:02:58.796726] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 50[m
[36m[10:02:58.796897] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator WATERMARKASSIGNER(23) as root operator.[m
[36m[10:02:58.796970] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 4 exists[m
[36m[10:02:58.797012] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 4 exists[m
[36m[10:02:58.797025] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  4[m
[36m[10:02:58.797040] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.797053] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[32m[10:02:58.797155] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 48[m
[36m[10:02:58.797194] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 26 exists in the query plan or not[m
[36m[10:02:58.797207] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 26 in the query plan[m
[36m[10:02:58.797341] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 10 exists[m
[36m[10:02:58.797358] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  10[m
[36m[10:02:58.797370] [D] [thread 130483] [GlobalExecutionPlan.cpp:49] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Adding Execution node as parent to the execution node with id  10[m
[36m[10:02:58.797381] [D] [thread 130483] [Node.cpp:387] [containAsParent] Node: Checking if the input node is contained in the parent list[m
[36m[10:02:58.797411] [D] [thread 130483] [GlobalExecutionPlan.cpp:56] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Added Execution node with id  4[m
[36m[10:02:58.797445] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.797579] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.797626] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.797664] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 2 source operators.[m
[36m[10:02:58.797700] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.797753] [D] [thread 130483] [Topology.cpp:545] [findNodesBetween] Topology: iterate over parent of the source node and find path between its parent and destination nodes.[m
[36m[10:02:58.797768] [D] [thread 130483] [Topology.cpp:534] [findNodesBetween] Topology: Find topology nodes between source and destination nodes.[m
[36m[10:02:58.797774] [D] [thread 130483] [Topology.cpp:536] [findNodesBetween] Topology: Both source and destination are same node.[m
[36m[10:02:58.797833] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 4 exists[m
[36m[10:02:58.797900] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 4 exists[m
[36m[10:02:58.797914] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  4[m
[36m[10:02:58.797930] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.797945] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.797972] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 26 exists in the query plan or not[m
[36m[10:02:58.797985] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 26 in the query plan[m
[32m[10:02:58.798052] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 53[m
[36m[10:02:58.798203] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator CENTRALWINDOW(26) as root operator.[m
[36m[10:02:58.798269] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 1 exists[m
[36m[10:02:58.798323] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 1 exists[m
[36m[10:02:58.798335] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  1[m
[36m[10:02:58.798351] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.798364] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[32m[10:02:58.798513] [I] [thread 130483] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 51[m
[36m[10:02:58.798561] [D] [thread 130483] [QueryPlan.cpp:162] [getOperatorWithId] QueryPlan: Checking if the operator with id 5 exists in the query plan or not[m
[36m[10:02:58.798576] [D] [thread 130483] [QueryPlan.cpp:165] [getOperatorWithId] QueryPlan: Found operator 5 in the query plan[m
[36m[10:02:58.798736] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 4 exists[m
[36m[10:02:58.798755] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  4[m
[36m[10:02:58.798768] [D] [thread 130483] [GlobalExecutionPlan.cpp:49] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Adding Execution node as parent to the execution node with id  4[m
[36m[10:02:58.798779] [D] [thread 130483] [Node.cpp:387] [containAsParent] Node: Checking if the input node is contained in the parent list[m
[36m[10:02:58.798813] [D] [thread 130483] [GlobalExecutionPlan.cpp:56] [addExecutionNodeAsParentTo] GlobalExecutionPlan: Added Execution node with id  1[m
[36m[10:02:58.798864] [D] [thread 130483] [GlobalExecutionPlan.cpp:154] [getRootNodes] GlobalExecutionPlan: Get root nodes of the execution plan[m
[36m[10:02:58.798904] [D] [thread 130483] [GlobalExecutionPlan.cpp:33] [checkIfExecutionNodeIsARoot] GlobalExecutionPlan: Checking if Execution node with id 1 is a root node[m
[36m[10:02:58.798915] [D] [thread 130483] [GlobalExecutionPlan.cpp:28] [checkIfExecutionNodeExists] GlobalExecutionPlan: Checking if Execution node with id 1 exists[m
[36m[10:02:58.798925] [D] [thread 130483] [GlobalExecutionPlan.cpp:39] [getExecutionNodeByNodeId] GlobalExecutionPlan: Returning execution node with id  1[m
[36m[10:02:58.798941] [D] [thread 130483] [GlobalExecutionPlan.cpp:68] [addExecutionNodeAsRoot] GlobalExecutionPlan: Added Execution node as root node[m
[36m[10:02:58.798961] [D] [thread 130483] [GlobalExecutionPlan.cpp:72] [addExecutionNodeAsRoot] GlobalExecutionPlan: Added Execution node with id  1[m
[36m[10:02:58.799021] [D] [thread 130483] [BasePlacementStrategy.cpp:337] [runTypeInferencePhase] BasePlacementStrategy: Run type inference phase for all the query sub plans to be deployed.[m
[36m[10:02:58.799043] [D] [thread 130483] [GlobalExecutionPlan.cpp:132] [getExecutionNodesByQueryId] GlobalExecutionPlan: Returning vector of Execution nodes for the query with id  1[m
[36m[10:02:58.799067] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.799081] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.799327] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.799377] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.799415] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[36m[10:02:58.799459] [D] [thread 130483] [QueryPlan.cpp:69] [getSinkOperators] QueryPlan: Get all sink operators by traversing all the root nodes.[m
[36m[10:02:58.799484] [D] [thread 130483] [QueryPlan.cpp:75] [getSinkOperators] QueryPlan: Found 1 sink operators.[m
[36m[10:02:58.800132] [D] [thread 130483] [ProjectionLogicalOperatorNode.cpp:54] [inferSchema] proj input=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)  outputSchema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits) this proj=PROJECTION(7, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits))[m
[36m[10:02:58.800460] [D] [thread 130483] [TypeInferencePhase.cpp:90] [execute] TypeInferencePhase: we inferred all schemas[m
[36m[10:02:58.800516] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.800533] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.800694] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.800735] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.800766] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[36m[10:02:58.800804] [D] [thread 130483] [QueryPlan.cpp:69] [getSinkOperators] QueryPlan: Get all sink operators by traversing all the root nodes.[m
[36m[10:02:58.800826] [D] [thread 130483] [QueryPlan.cpp:75] [getSinkOperators] QueryPlan: Found 1 sink operators.[m
[36m[10:02:58.801432] [D] [thread 130483] [ProjectionLogicalOperatorNode.cpp:54] [inferSchema] proj input=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)  outputSchema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits) this proj=PROJECTION(10, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits))[m
[36m[10:02:58.801701] [D] [thread 130483] [TypeInferencePhase.cpp:90] [execute] TypeInferencePhase: we inferred all schemas[m
[36m[10:02:58.801741] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.801757] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.801903] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.801945] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.801979] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 2 source operators.[m
[36m[10:02:58.802011] [D] [thread 130483] [QueryPlan.cpp:69] [getSinkOperators] QueryPlan: Get all sink operators by traversing all the root nodes.[m
[36m[10:02:58.802031] [D] [thread 130483] [QueryPlan.cpp:75] [getSinkOperators] QueryPlan: Found 1 sink operators.[m
[36m[10:02:58.802215] [D] [thread 130483] [CentralWindowOperator.cpp:70] [inferSchema] SliceCreationOperator: TypeInferencePhase: infer types for window operator with input schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[32m[10:02:58.802450] [I] [thread 130483] [CentralWindowOperator.cpp:112] [inferSchema] Add the following field to the output schema of the NonKeyedWindow debs$absolute_v[m
[32m[10:02:58.802547] [I] [thread 130483] [CentralWindowOperator.cpp:116] [inferSchema] The final output schema is debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.802648] [D] [thread 130483] [TypeInferencePhase.cpp:90] [execute] TypeInferencePhase: we inferred all schemas[m
[36m[10:02:58.802695] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.802711] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.802857] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.802893] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.802922] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[36m[10:02:58.802956] [D] [thread 130483] [QueryPlan.cpp:69] [getSinkOperators] QueryPlan: Get all sink operators by traversing all the root nodes.[m
[36m[10:02:58.802990] [D] [thread 130483] [QueryPlan.cpp:75] [getSinkOperators] QueryPlan: Found 1 sink operators.[m
[36m[10:02:58.803586] [D] [thread 130483] [ProjectionLogicalOperatorNode.cpp:54] [inferSchema] proj input=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)  outputSchema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits) this proj=PROJECTION(13, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits))[m
[36m[10:02:58.803849] [D] [thread 130483] [TypeInferencePhase.cpp:90] [execute] TypeInferencePhase: we inferred all schemas[m
[36m[10:02:58.803891] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.803906] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.804043] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.804078] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.804106] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[36m[10:02:58.804139] [D] [thread 130483] [QueryPlan.cpp:69] [getSinkOperators] QueryPlan: Get all sink operators by traversing all the root nodes.[m
[36m[10:02:58.804172] [D] [thread 130483] [QueryPlan.cpp:75] [getSinkOperators] QueryPlan: Found 1 sink operators.[m
[36m[10:02:58.804790] [D] [thread 130483] [ProjectionLogicalOperatorNode.cpp:54] [inferSchema] proj input=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)  outputSchema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits) this proj=PROJECTION(16, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits))[m
[36m[10:02:58.805067] [D] [thread 130483] [TypeInferencePhase.cpp:90] [execute] TypeInferencePhase: we inferred all schemas[m
[36m[10:02:58.805111] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.805127] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.805276] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.805317] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.805356] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 2 source operators.[m
[36m[10:02:58.805393] [D] [thread 130483] [QueryPlan.cpp:69] [getSinkOperators] QueryPlan: Get all sink operators by traversing all the root nodes.[m
[36m[10:02:58.805415] [D] [thread 130483] [QueryPlan.cpp:75] [getSinkOperators] QueryPlan: Found 1 sink operators.[m
[36m[10:02:58.805634] [D] [thread 130483] [CentralWindowOperator.cpp:70] [inferSchema] SliceCreationOperator: TypeInferencePhase: infer types for window operator with input schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[32m[10:02:58.805870] [I] [thread 130483] [CentralWindowOperator.cpp:112] [inferSchema] Add the following field to the output schema of the NonKeyedWindow debs$absolute_v[m
[32m[10:02:58.805971] [I] [thread 130483] [CentralWindowOperator.cpp:116] [inferSchema] The final output schema is debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.806076] [D] [thread 130483] [TypeInferencePhase.cpp:90] [execute] TypeInferencePhase: we inferred all schemas[m
[36m[10:02:58.806124] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.806140] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.806361] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.806406] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.806440] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[36m[10:02:58.806478] [D] [thread 130483] [QueryPlan.cpp:69] [getSinkOperators] QueryPlan: Get all sink operators by traversing all the root nodes.[m
[36m[10:02:58.806514] [D] [thread 130483] [QueryPlan.cpp:75] [getSinkOperators] QueryPlan: Found 1 sink operators.[m
[36m[10:02:58.807083] [D] [thread 130483] [ProjectionLogicalOperatorNode.cpp:54] [inferSchema] proj input=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)  outputSchema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits) this proj=PROJECTION(19, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits))[m
[36m[10:02:58.807387] [D] [thread 130483] [TypeInferencePhase.cpp:90] [execute] TypeInferencePhase: we inferred all schemas[m
[36m[10:02:58.807430] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.807447] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.807590] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.807627] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.807657] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 1 source operators.[m
[36m[10:02:58.807692] [D] [thread 130483] [QueryPlan.cpp:69] [getSinkOperators] QueryPlan: Get all sink operators by traversing all the root nodes.[m
[36m[10:02:58.807713] [D] [thread 130483] [QueryPlan.cpp:75] [getSinkOperators] QueryPlan: Found 1 sink operators.[m
[36m[10:02:58.808305] [D] [thread 130483] [ProjectionLogicalOperatorNode.cpp:54] [inferSchema] proj input=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)  outputSchema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits) this proj=PROJECTION(22, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits))[m
[36m[10:02:58.808623] [D] [thread 130483] [TypeInferencePhase.cpp:90] [execute] TypeInferencePhase: we inferred all schemas[m
[36m[10:02:58.808672] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.808689] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.808846] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.808891] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.808939] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 2 source operators.[m
[36m[10:02:58.808975] [D] [thread 130483] [QueryPlan.cpp:69] [getSinkOperators] QueryPlan: Get all sink operators by traversing all the root nodes.[m
[36m[10:02:58.808997] [D] [thread 130483] [QueryPlan.cpp:75] [getSinkOperators] QueryPlan: Found 1 sink operators.[m
[36m[10:02:58.809183] [D] [thread 130483] [CentralWindowOperator.cpp:70] [inferSchema] SliceCreationOperator: TypeInferencePhase: infer types for window operator with input schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[32m[10:02:58.809402] [I] [thread 130483] [CentralWindowOperator.cpp:112] [inferSchema] Add the following field to the output schema of the NonKeyedWindow debs$absolute_v[m
[32m[10:02:58.809496] [I] [thread 130483] [CentralWindowOperator.cpp:116] [inferSchema] The final output schema is debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.809662] [D] [thread 130483] [TypeInferencePhase.cpp:90] [execute] TypeInferencePhase: we inferred all schemas[m
[36m[10:02:58.809708] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.809724] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.809881] [D] [thread 130483] [QueryPlan.cpp:56] [getSourceOperators] QueryPlan: Get all source operators by traversing all the root nodes.[m
[36m[10:02:58.809926] [D] [thread 130483] [QueryPlan.cpp:60] [getSourceOperators] QueryPlan: insert all source operators to the collection[m
[36m[10:02:58.809962] [D] [thread 130483] [QueryPlan.cpp:63] [getSourceOperators] QueryPlan: Found 3 source operators.[m
[36m[10:02:58.810012] [D] [thread 130483] [QueryPlan.cpp:69] [getSinkOperators] QueryPlan: Get all sink operators by traversing all the root nodes.[m
[36m[10:02:58.810036] [D] [thread 130483] [QueryPlan.cpp:75] [getSinkOperators] QueryPlan: Found 1 sink operators.[m
[36m[10:02:58.810179] [D] [thread 130483] [TypeInferencePhase.cpp:90] [execute] TypeInferencePhase: we inferred all schemas[m
[36m[10:02:58.810230] [D] [thread 130483] [GlobalExecutionPlan.cpp:159] [getAsString] GlobalExecutionPlan: Get Execution plan as string[m
[36m[10:02:58.812183] [D] [thread 130483] [QueryPlacementPhase.cpp:140] [execute] QueryPlacementPhase: Update Global Execution Plan:
ExecutionNode(id:1, ip:192.168.2.11, topologyId:1)
| QuerySubPlan(queryId:1, querySubPlanId:10)
|  SINK(5: {FileSinkDescriptor()})
|    SOURCE(33,,NetworkSourceDescriptor{tcp://192.168.2.12:39487 1::33::0::0})
|    SOURCE(42,,NetworkSourceDescriptor{tcp://192.168.2.30:38503 1::42::0::0})
|    SOURCE(51,,NetworkSourceDescriptor{tcp://192.168.2.31:38713 1::51::0::0})
|--ExecutionNode(id:2, ip:192.168.2.12, topologyId:2)
|  | QuerySubPlan(queryId:1, querySubPlanId:3)
|  |  SINK(35: {NetworkSinkDescriptor(partition=1::33::0::0;nodeLocation=tcp://192.168.2.11:40903)})
|  |    CENTRALWINDOW(24)
|  |      SOURCE(27,,NetworkSourceDescriptor{tcp://192.168.2.32:37987 1::27::0::0})
|  |      SOURCE(30,,NetworkSourceDescriptor{tcp://192.168.2.33:37365 1::30::0::0})
|  |--ExecutionNode(id:5, ip:192.168.2.32, topologyId:5)
|  |  | QuerySubPlan(queryId:1, querySubPlanId:1)
|  |  |  SINK(29: {NetworkSinkDescriptor(partition=1::27::0::0;nodeLocation=tcp://192.168.2.12:39487)})
|  |  |    WATERMARKASSIGNER(8)
|  |  |      PROJECTION(7, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
|  |  |        SOURCE(6,debs,LogicalSourceDescriptor(debs, test_stream4))
|  |--ExecutionNode(id:6, ip:192.168.2.33, topologyId:6)
|  |  | QuerySubPlan(queryId:1, querySubPlanId:2)
|  |  |  SINK(32: {NetworkSinkDescriptor(partition=1::30::0::0;nodeLocation=tcp://192.168.2.12:39487)})
|  |  |    WATERMARKASSIGNER(11)
|  |  |      PROJECTION(10, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
|  |  |        SOURCE(9,debs,LogicalSourceDescriptor(debs, test_stream5))
|--ExecutionNode(id:3, ip:192.168.2.30, topologyId:3)
|  | QuerySubPlan(queryId:1, querySubPlanId:6)
|  |  SINK(44: {NetworkSinkDescriptor(partition=1::42::0::0;nodeLocation=tcp://192.168.2.11:40903)})
|  |    CENTRALWINDOW(25)
|  |      SOURCE(36,,NetworkSourceDescriptor{tcp://192.168.2.34:39601 1::36::0::0})
|  |      SOURCE(39,,NetworkSourceDescriptor{tcp://192.168.2.35:45831 1::39::0::0})
|  |--ExecutionNode(id:7, ip:192.168.2.34, topologyId:7)
|  |  | QuerySubPlan(queryId:1, querySubPlanId:4)
|  |  |  SINK(38: {NetworkSinkDescriptor(partition=1::36::0::0;nodeLocation=tcp://192.168.2.30:38503)})
|  |  |    WATERMARKASSIGNER(14)
|  |  |      PROJECTION(13, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
|  |  |        SOURCE(12,debs,LogicalSourceDescriptor(debs, test_stream6))
|  |--ExecutionNode(id:8, ip:192.168.2.35, topologyId:8)
|  |  | QuerySubPlan(queryId:1, querySubPlanId:5)
|  |  |  SINK(41: {NetworkSinkDescriptor(partition=1::39::0::0;nodeLocation=tcp://192.168.2.30:38503)})
|  |  |    WATERMARKASSIGNER(17)
|  |  |      PROJECTION(16, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
|  |  |        SOURCE(15,debs,LogicalSourceDescriptor(debs, test_stream7))
|--ExecutionNode(id:4, ip:192.168.2.31, topologyId:4)
|  | QuerySubPlan(queryId:1, querySubPlanId:9)
|  |  SINK(53: {NetworkSinkDescriptor(partition=1::51::0::0;nodeLocation=tcp://192.168.2.11:40903)})
|  |    CENTRALWINDOW(26)
|  |      SOURCE(45,,NetworkSourceDescriptor{tcp://192.168.2.37:34023 1::45::0::0})
|  |      SOURCE(48,,NetworkSourceDescriptor{tcp://192.168.2.38:42645 1::48::0::0})
|  |--ExecutionNode(id:9, ip:192.168.2.37, topologyId:9)
|  |  | QuerySubPlan(queryId:1, querySubPlanId:7)
|  |  |  SINK(47: {NetworkSinkDescriptor(partition=1::45::0::0;nodeLocation=tcp://192.168.2.31:38713)})
|  |  |    WATERMARKASSIGNER(20)
|  |  |      PROJECTION(19, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
|  |  |        SOURCE(18,debs,LogicalSourceDescriptor(debs, test_stream8))
|  |--ExecutionNode(id:10, ip:192.168.2.38, topologyId:10)
|  |  | QuerySubPlan(queryId:1, querySubPlanId:8)
|  |  |  SINK(50: {NetworkSinkDescriptor(partition=1::48::0::0;nodeLocation=tcp://192.168.2.31:38713)})
|  |  |    WATERMARKASSIGNER(23)
|  |  |      PROJECTION(22, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
|  |  |        SOURCE(21,debs,LogicalSourceDescriptor(debs, test_stream9))
[m
[36m[10:02:58.812315] [D] [thread 130483] [QueryDeploymentPhase.cpp:54] [execute] QueryDeploymentPhase: deploy the query[m
[36m[10:02:58.812381] [D] [thread 130483] [GlobalExecutionPlan.cpp:132] [getExecutionNodesByQueryId] GlobalExecutionPlan: Returning vector of Execution nodes for the query with id  1[m
[36m[10:02:58.812654] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.812678] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.812900] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.812918] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.812980] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.812993] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.813032] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.813043] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.813079] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.813090] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.813124] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.813135] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.813170] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.813182] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.813219] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.813231] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.813270] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.813298] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.813340] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.813352] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.813513] [D] [thread 130483] [QueryDeploymentPhase.cpp:106] [deployQuery] QueryDeploymentPhase::deployQuery queryId= 1[m
[36m[10:02:58.813544] [D] [thread 130483] [QueryDeploymentPhase.cpp:109] [deployQuery] QueryDeploymentPhase::registerQueryInNodeEngine serialize id=5[m
[36m[10:02:58.813553] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.813563] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.813781] [D] [thread 130483] [QueryDeploymentPhase.cpp:123] [deployQuery] QueryDeploymentPhase:deployQuery: 1 to 192.168.2.32:34503[m
[36m[10:02:58.813821] [D] [thread 130483] [WorkerRPCClient.cpp:68] [registerQueryAsync] WorkerRPCClient::registerQueryAsync address=192.168.2.32:34503 queryId=1 querySubPlanId = 1[m
[36m[10:02:58.814167] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:31] [serializeQueryPlan] QueryPlanSerializationUtil: serializing query plan SINK(29: {NetworkSinkDescriptor(partition=1::27::0::0;nodeLocation=tcp://192.168.2.12:39487)})
  WATERMARKASSIGNER(8)
    PROJECTION(7, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
      SOURCE(6,debs,LogicalSourceDescriptor(debs, test_stream4))
[m
[36m[10:02:58.814203] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:33] [serializeQueryPlan] QueryPlanSerializationUtil: serializing the operator chain for each root operator independently[m
[36m[10:02:58.814455] [D] [thread 130483] [OperatorSerializationUtil.cpp:1541] [serializeSinkDescriptor] OperatorSerializationUtil:: serialized SinkDescriptor [m
[36m[10:02:58.818359] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.819205] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.819526] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.819648] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.820271] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$ts[Undefined])[m
[36m[10:02:58.821353] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.821660] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.821802] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.821935] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.822036] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.822478] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$sid[INTEGER(64 bits)])[m
[36m[10:02:58.822605] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.822641] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$ts[INTEGER(64 bits)])[m
[36m[10:02:58.822703] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.822800] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$absolute_v[INTEGER(64 bits)])[m
[36m[10:02:58.822872] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.823125] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.823448] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.823612] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.823710] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.824115] [D] [thread 130483] [OperatorSerializationUtil.cpp:1083] [serializeSourceDescriptor] OperatorSerializationUtil:: serialize to SourceDescriptor with =LogicalSourceDescriptor(debs, test_stream4)[m
[36m[10:02:58.824423] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.824782] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.825262] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.825612] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.825849] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.826177] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.838080] [D] [thread 130483] [QueryDeploymentPhase.cpp:109] [deployQuery] QueryDeploymentPhase::registerQueryInNodeEngine serialize id=6[m
[36m[10:02:58.838115] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.838134] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.838267] [D] [thread 130483] [QueryDeploymentPhase.cpp:123] [deployQuery] QueryDeploymentPhase:deployQuery: 1 to 192.168.2.33:46447[m
[36m[10:02:58.838309] [D] [thread 130483] [WorkerRPCClient.cpp:68] [registerQueryAsync] WorkerRPCClient::registerQueryAsync address=192.168.2.33:46447 queryId=1 querySubPlanId = 2[m
[36m[10:02:58.838569] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:31] [serializeQueryPlan] QueryPlanSerializationUtil: serializing query plan SINK(32: {NetworkSinkDescriptor(partition=1::30::0::0;nodeLocation=tcp://192.168.2.12:39487)})
  WATERMARKASSIGNER(11)
    PROJECTION(10, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
      SOURCE(9,debs,LogicalSourceDescriptor(debs, test_stream5))
[m
[36m[10:02:58.838608] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:33] [serializeQueryPlan] QueryPlanSerializationUtil: serializing the operator chain for each root operator independently[m
[36m[10:02:58.838760] [D] [thread 130483] [OperatorSerializationUtil.cpp:1541] [serializeSinkDescriptor] OperatorSerializationUtil:: serialized SinkDescriptor [m
[36m[10:02:58.838983] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.839126] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.839255] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.839352] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.839702] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$ts[Undefined])[m
[36m[10:02:58.839787] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.839935] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.840048] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.840156] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.840248] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.840642] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$sid[INTEGER(64 bits)])[m
[36m[10:02:58.840769] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.840803] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$ts[INTEGER(64 bits)])[m
[36m[10:02:58.840861] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.840891] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$absolute_v[INTEGER(64 bits)])[m
[36m[10:02:58.840948] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.841159] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.841478] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.841635] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.841729] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.842078] [D] [thread 130483] [OperatorSerializationUtil.cpp:1083] [serializeSourceDescriptor] OperatorSerializationUtil:: serialize to SourceDescriptor with =LogicalSourceDescriptor(debs, test_stream5)[m
[36m[10:02:58.842262] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.842656] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.843037] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.843352] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.843580] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.843899] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.852583] [D] [thread 130483] [QueryDeploymentPhase.cpp:109] [deployQuery] QueryDeploymentPhase::registerQueryInNodeEngine serialize id=2[m
[36m[10:02:58.852618] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.852636] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.852766] [D] [thread 130483] [QueryDeploymentPhase.cpp:123] [deployQuery] QueryDeploymentPhase:deployQuery: 1 to 192.168.2.12:35153[m
[36m[10:02:58.852796] [D] [thread 130483] [WorkerRPCClient.cpp:68] [registerQueryAsync] WorkerRPCClient::registerQueryAsync address=192.168.2.12:35153 queryId=1 querySubPlanId = 3[m
[36m[10:02:58.853025] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:31] [serializeQueryPlan] QueryPlanSerializationUtil: serializing query plan SINK(35: {NetworkSinkDescriptor(partition=1::33::0::0;nodeLocation=tcp://192.168.2.11:40903)})
  CENTRALWINDOW(24)
    SOURCE(27,,NetworkSourceDescriptor{tcp://192.168.2.32:37987 1::27::0::0})
    SOURCE(30,,NetworkSourceDescriptor{tcp://192.168.2.33:37365 1::30::0::0})
[m
[36m[10:02:58.853062] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:33] [serializeQueryPlan] QueryPlanSerializationUtil: serializing the operator chain for each root operator independently[m
[36m[10:02:58.853214] [D] [thread 130483] [OperatorSerializationUtil.cpp:1541] [serializeSinkDescriptor] OperatorSerializationUtil:: serialized SinkDescriptor [m
[36m[10:02:58.853455] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.853615] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.853755] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.853873] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.854288] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$sid[INTEGER(64 bits)])[m
[36m[10:02:58.854410] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.854681] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$absolute_v[INTEGER(64 bits)])[m
[36m[10:02:58.854773] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.854812] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$absolute_v[INTEGER(64 bits)])[m
[36m[10:02:58.854871] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.855280] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.855431] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.855568] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.855740] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.856103] [D] [thread 130483] [OperatorSerializationUtil.cpp:1083] [serializeSourceDescriptor] OperatorSerializationUtil:: serialize to SourceDescriptor with =NetworkSourceDescriptor{tcp://192.168.2.32:37987 1::27::0::0}[m
[36m[10:02:58.856224] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.856412] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.856715] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.856823] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.856938] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.857034] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.857357] [D] [thread 130483] [OperatorSerializationUtil.cpp:1083] [serializeSourceDescriptor] OperatorSerializationUtil:: serialize to SourceDescriptor with =NetworkSourceDescriptor{tcp://192.168.2.33:37365 1::30::0::0}[m
[36m[10:02:58.857441] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.857555] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.857757] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.857858] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.857952] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.858039] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.865445] [D] [thread 130483] [QueryDeploymentPhase.cpp:109] [deployQuery] QueryDeploymentPhase::registerQueryInNodeEngine serialize id=7[m
[36m[10:02:58.865480] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.865497] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.865622] [D] [thread 130483] [QueryDeploymentPhase.cpp:123] [deployQuery] QueryDeploymentPhase:deployQuery: 1 to 192.168.2.34:42085[m
[36m[10:02:58.865652] [D] [thread 130483] [WorkerRPCClient.cpp:68] [registerQueryAsync] WorkerRPCClient::registerQueryAsync address=192.168.2.34:42085 queryId=1 querySubPlanId = 4[m
[36m[10:02:58.865908] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:31] [serializeQueryPlan] QueryPlanSerializationUtil: serializing query plan SINK(38: {NetworkSinkDescriptor(partition=1::36::0::0;nodeLocation=tcp://192.168.2.30:38503)})
  WATERMARKASSIGNER(14)
    PROJECTION(13, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
      SOURCE(12,debs,LogicalSourceDescriptor(debs, test_stream6))
[m
[36m[10:02:58.865946] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:33] [serializeQueryPlan] QueryPlanSerializationUtil: serializing the operator chain for each root operator independently[m
[36m[10:02:58.866102] [D] [thread 130483] [OperatorSerializationUtil.cpp:1541] [serializeSinkDescriptor] OperatorSerializationUtil:: serialized SinkDescriptor [m
[36m[10:02:58.866333] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.866469] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.866599] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.866694] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.867030] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$ts[Undefined])[m
[36m[10:02:58.867108] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.867252] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.867364] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.867468] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.867562] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.867883] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$sid[INTEGER(64 bits)])[m
[36m[10:02:58.867986] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.868020] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$ts[INTEGER(64 bits)])[m
[36m[10:02:58.868100] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.868131] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$absolute_v[INTEGER(64 bits)])[m
[36m[10:02:58.868188] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.868429] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.868762] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.868928] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.869024] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.869393] [D] [thread 130483] [OperatorSerializationUtil.cpp:1083] [serializeSourceDescriptor] OperatorSerializationUtil:: serialize to SourceDescriptor with =LogicalSourceDescriptor(debs, test_stream6)[m
[36m[10:02:58.869583] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.869919] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.870278] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.870589] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.870809] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.871117] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.879900] [D] [thread 130483] [QueryDeploymentPhase.cpp:109] [deployQuery] QueryDeploymentPhase::registerQueryInNodeEngine serialize id=8[m
[36m[10:02:58.879936] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.879954] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.880078] [D] [thread 130483] [QueryDeploymentPhase.cpp:123] [deployQuery] QueryDeploymentPhase:deployQuery: 1 to 192.168.2.35:39705[m
[36m[10:02:58.880109] [D] [thread 130483] [WorkerRPCClient.cpp:68] [registerQueryAsync] WorkerRPCClient::registerQueryAsync address=192.168.2.35:39705 queryId=1 querySubPlanId = 5[m
[36m[10:02:58.880401] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:31] [serializeQueryPlan] QueryPlanSerializationUtil: serializing query plan SINK(41: {NetworkSinkDescriptor(partition=1::39::0::0;nodeLocation=tcp://192.168.2.30:38503)})
  WATERMARKASSIGNER(17)
    PROJECTION(16, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
      SOURCE(15,debs,LogicalSourceDescriptor(debs, test_stream7))
[m
[36m[10:02:58.880441] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:33] [serializeQueryPlan] QueryPlanSerializationUtil: serializing the operator chain for each root operator independently[m
[36m[10:02:58.880599] [D] [thread 130483] [OperatorSerializationUtil.cpp:1541] [serializeSinkDescriptor] OperatorSerializationUtil:: serialized SinkDescriptor [m
[36m[10:02:58.880822] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.880961] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.881092] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.881199] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.881537] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$ts[Undefined])[m
[36m[10:02:58.881622] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.881768] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.881877] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.881980] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.882081] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.882386] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$sid[INTEGER(64 bits)])[m
[36m[10:02:58.882474] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.882504] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$ts[INTEGER(64 bits)])[m
[36m[10:02:58.882557] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.882585] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$absolute_v[INTEGER(64 bits)])[m
[36m[10:02:58.882636] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.882825] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.883121] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.883262] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.883348] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.883630] [D] [thread 130483] [OperatorSerializationUtil.cpp:1083] [serializeSourceDescriptor] OperatorSerializationUtil:: serialize to SourceDescriptor with =LogicalSourceDescriptor(debs, test_stream7)[m
[36m[10:02:58.883799] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.884099] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.884488] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.884804] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.885032] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.885347] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.894095] [D] [thread 130483] [QueryDeploymentPhase.cpp:109] [deployQuery] QueryDeploymentPhase::registerQueryInNodeEngine serialize id=3[m
[36m[10:02:58.894131] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.894151] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.894276] [D] [thread 130483] [QueryDeploymentPhase.cpp:123] [deployQuery] QueryDeploymentPhase:deployQuery: 1 to 192.168.2.30:35153[m
[36m[10:02:58.894306] [D] [thread 130483] [WorkerRPCClient.cpp:68] [registerQueryAsync] WorkerRPCClient::registerQueryAsync address=192.168.2.30:35153 queryId=1 querySubPlanId = 6[m
[36m[10:02:58.894537] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:31] [serializeQueryPlan] QueryPlanSerializationUtil: serializing query plan SINK(44: {NetworkSinkDescriptor(partition=1::42::0::0;nodeLocation=tcp://192.168.2.11:40903)})
  CENTRALWINDOW(25)
    SOURCE(36,,NetworkSourceDescriptor{tcp://192.168.2.34:39601 1::36::0::0})
    SOURCE(39,,NetworkSourceDescriptor{tcp://192.168.2.35:45831 1::39::0::0})
[m
[36m[10:02:58.894572] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:33] [serializeQueryPlan] QueryPlanSerializationUtil: serializing the operator chain for each root operator independently[m
[36m[10:02:58.894726] [D] [thread 130483] [OperatorSerializationUtil.cpp:1541] [serializeSinkDescriptor] OperatorSerializationUtil:: serialized SinkDescriptor [m
[36m[10:02:58.894977] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.895133] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.895275] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.895407] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.895784] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$sid[INTEGER(64 bits)])[m
[36m[10:02:58.895896] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.896042] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$absolute_v[INTEGER(64 bits)])[m
[36m[10:02:58.896120] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.896151] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$absolute_v[INTEGER(64 bits)])[m
[36m[10:02:58.896208] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.896499] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.896624] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.896750] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.896861] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.897198] [D] [thread 130483] [OperatorSerializationUtil.cpp:1083] [serializeSourceDescriptor] OperatorSerializationUtil:: serialize to SourceDescriptor with =NetworkSourceDescriptor{tcp://192.168.2.34:39601 1::36::0::0}[m
[36m[10:02:58.897288] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.897403] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.897625] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.897728] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.897827] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.897937] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.898235] [D] [thread 130483] [OperatorSerializationUtil.cpp:1083] [serializeSourceDescriptor] OperatorSerializationUtil:: serialize to SourceDescriptor with =NetworkSourceDescriptor{tcp://192.168.2.35:45831 1::39::0::0}[m
[36m[10:02:58.898319] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.898430] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.898634] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.898735] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.898829] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.898918] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.906344] [D] [thread 130483] [QueryDeploymentPhase.cpp:109] [deployQuery] QueryDeploymentPhase::registerQueryInNodeEngine serialize id=9[m
[36m[10:02:58.906378] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.906397] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.906520] [D] [thread 130483] [QueryDeploymentPhase.cpp:123] [deployQuery] QueryDeploymentPhase:deployQuery: 1 to 192.168.2.37:38213[m
[36m[10:02:58.906550] [D] [thread 130483] [WorkerRPCClient.cpp:68] [registerQueryAsync] WorkerRPCClient::registerQueryAsync address=192.168.2.37:38213 queryId=1 querySubPlanId = 7[m
[36m[10:02:58.906809] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:31] [serializeQueryPlan] QueryPlanSerializationUtil: serializing query plan SINK(47: {NetworkSinkDescriptor(partition=1::45::0::0;nodeLocation=tcp://192.168.2.31:38713)})
  WATERMARKASSIGNER(20)
    PROJECTION(19, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
      SOURCE(18,debs,LogicalSourceDescriptor(debs, test_stream8))
[m
[36m[10:02:58.906846] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:33] [serializeQueryPlan] QueryPlanSerializationUtil: serializing the operator chain for each root operator independently[m
[36m[10:02:58.907004] [D] [thread 130483] [OperatorSerializationUtil.cpp:1541] [serializeSinkDescriptor] OperatorSerializationUtil:: serialized SinkDescriptor [m
[36m[10:02:58.907230] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.907432] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.907575] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.907671] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.908029] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$ts[Undefined])[m
[36m[10:02:58.908110] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.908261] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.908434] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.908559] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.908651] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.909008] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$sid[INTEGER(64 bits)])[m
[36m[10:02:58.909122] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.909156] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$ts[INTEGER(64 bits)])[m
[36m[10:02:58.909216] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.909245] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$absolute_v[INTEGER(64 bits)])[m
[36m[10:02:58.909303] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.909514] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.909835] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.909996] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.910114] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.910493] [D] [thread 130483] [OperatorSerializationUtil.cpp:1083] [serializeSourceDescriptor] OperatorSerializationUtil:: serialize to SourceDescriptor with =LogicalSourceDescriptor(debs, test_stream8)[m
[36m[10:02:58.910678] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.911013] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.911380] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.911697] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.911927] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.912253] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.921009] [D] [thread 130483] [QueryDeploymentPhase.cpp:109] [deployQuery] QueryDeploymentPhase::registerQueryInNodeEngine serialize id=10[m
[36m[10:02:58.921090] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.921148] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.921273] [D] [thread 130483] [QueryDeploymentPhase.cpp:123] [deployQuery] QueryDeploymentPhase:deployQuery: 1 to 192.168.2.38:41905[m
[36m[10:02:58.921329] [D] [thread 130483] [WorkerRPCClient.cpp:68] [registerQueryAsync] WorkerRPCClient::registerQueryAsync address=192.168.2.38:41905 queryId=1 querySubPlanId = 8[m
[36m[10:02:58.921589] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:31] [serializeQueryPlan] QueryPlanSerializationUtil: serializing query plan SINK(50: {NetworkSinkDescriptor(partition=1::48::0::0;nodeLocation=tcp://192.168.2.31:38713)})
  WATERMARKASSIGNER(23)
    PROJECTION(22, schema=debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits))
      SOURCE(21,debs,LogicalSourceDescriptor(debs, test_stream9))
[m
[36m[10:02:58.921636] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:33] [serializeQueryPlan] QueryPlanSerializationUtil: serializing the operator chain for each root operator independently[m
[36m[10:02:58.921796] [D] [thread 130483] [OperatorSerializationUtil.cpp:1541] [serializeSinkDescriptor] OperatorSerializationUtil:: serialized SinkDescriptor [m
[36m[10:02:58.922022] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.922166] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.922297] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.922395] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.922749] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$ts[Undefined])[m
[36m[10:02:58.922851] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.923000] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.923138] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.923260] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.923353] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.923695] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$sid[INTEGER(64 bits)])[m
[36m[10:02:58.923827] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.923863] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$ts[INTEGER(64 bits)])[m
[36m[10:02:58.923924] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.923954] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$absolute_v[INTEGER(64 bits)])[m
[36m[10:02:58.924009] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.924220] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.924597] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.924786] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.924907] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.925282] [D] [thread 130483] [OperatorSerializationUtil.cpp:1083] [serializeSourceDescriptor] OperatorSerializationUtil:: serialize to SourceDescriptor with =LogicalSourceDescriptor(debs, test_stream9)[m
[36m[10:02:58.925484] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.925836] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.926228] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.926564] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.926812] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$x:INTEGER(64 bits) debs$y:INTEGER(64 bits) debs$z:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits) debs$absolute_a:INTEGER(64 bits) debs$vx:INTEGER(64 bits) debs$vy:INTEGER(64 bits) debs$vz:INTEGER(64 bits) debs$ax:INTEGER(64 bits) debs$ay:INTEGER(64 bits) debs$az:INTEGER(64 bits)[m
[36m[10:02:58.927143] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.934974] [D] [thread 130483] [QueryDeploymentPhase.cpp:109] [deployQuery] QueryDeploymentPhase::registerQueryInNodeEngine serialize id=4[m
[36m[10:02:58.935101] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.935123] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.935245] [D] [thread 130483] [QueryDeploymentPhase.cpp:123] [deployQuery] QueryDeploymentPhase:deployQuery: 1 to 192.168.2.31:42843[m
[36m[10:02:58.935286] [D] [thread 130483] [WorkerRPCClient.cpp:68] [registerQueryAsync] WorkerRPCClient::registerQueryAsync address=192.168.2.31:42843 queryId=1 querySubPlanId = 9[m
[36m[10:02:58.935515] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:31] [serializeQueryPlan] QueryPlanSerializationUtil: serializing query plan SINK(53: {NetworkSinkDescriptor(partition=1::51::0::0;nodeLocation=tcp://192.168.2.11:40903)})
  CENTRALWINDOW(26)
    SOURCE(45,,NetworkSourceDescriptor{tcp://192.168.2.37:34023 1::45::0::0})
    SOURCE(48,,NetworkSourceDescriptor{tcp://192.168.2.38:42645 1::48::0::0})
[m
[36m[10:02:58.935548] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:33] [serializeQueryPlan] QueryPlanSerializationUtil: serializing the operator chain for each root operator independently[m
[36m[10:02:58.935701] [D] [thread 130483] [OperatorSerializationUtil.cpp:1541] [serializeSinkDescriptor] OperatorSerializationUtil:: serialized SinkDescriptor [m
[36m[10:02:58.935940] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.936096] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.936238] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.936423] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.936895] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$sid[INTEGER(64 bits)])[m
[36m[10:02:58.937035] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.937191] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$absolute_v[INTEGER(64 bits)])[m
[36m[10:02:58.937302] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.937337] [D] [thread 130483] [ExpressionSerializationUtil.cpp:66] [serializeExpression] ExpressionSerializationUtil:: serialize expression FieldAccessNode(debs$absolute_v[INTEGER(64 bits)])[m
[36m[10:02:58.937396] [D] [thread 130483] [ExpressionSerializationUtil.cpp:165] [serializeExpression] ExpressionSerializationUtil:: serialize expression node to type.googleapis.com/NES.SerializableExpression.FieldAccessExpression[m
[36m[10:02:58.937670] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.937792] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.937920] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.938030] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.938362] [D] [thread 130483] [OperatorSerializationUtil.cpp:1083] [serializeSourceDescriptor] OperatorSerializationUtil:: serialize to SourceDescriptor with =NetworkSourceDescriptor{tcp://192.168.2.37:34023 1::45::0::0}[m
[36m[10:02:58.938472] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.938592] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.938841] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.938967] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.939072] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.939185] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.939488] [D] [thread 130483] [OperatorSerializationUtil.cpp:1083] [serializeSourceDescriptor] OperatorSerializationUtil:: serialize to SourceDescriptor with =NetworkSourceDescriptor{tcp://192.168.2.38:42645 1::48::0::0}[m
[36m[10:02:58.939588] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.939707] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.939916] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.940040] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.940141] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$sid:INTEGER(64 bits) debs$ts:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.940241] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.946890] [D] [thread 130483] [QueryDeploymentPhase.cpp:109] [deployQuery] QueryDeploymentPhase::registerQueryInNodeEngine serialize id=1[m
[36m[10:02:58.947018] [D] [thread 130483] [ExecutionNode.cpp:33] [hasQuerySubPlans] ExecutionNode : Checking if a query sub plan exists with id  1[m
[36m[10:02:58.947040] [D] [thread 130483] [ExecutionNode.cpp:39] [getQuerySubPlans] ExecutionNode : Found query sub plan with id  1[m
[36m[10:02:58.947159] [D] [thread 130483] [QueryDeploymentPhase.cpp:123] [deployQuery] QueryDeploymentPhase:deployQuery: 1 to 192.168.2.11:42713[m
[36m[10:02:58.947189] [D] [thread 130483] [WorkerRPCClient.cpp:68] [registerQueryAsync] WorkerRPCClient::registerQueryAsync address=192.168.2.11:42713 queryId=1 querySubPlanId = 10[m
[36m[10:02:58.947421] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:31] [serializeQueryPlan] QueryPlanSerializationUtil: serializing query plan SINK(5: {FileSinkDescriptor()})
  SOURCE(33,,NetworkSourceDescriptor{tcp://192.168.2.12:39487 1::33::0::0})
  SOURCE(42,,NetworkSourceDescriptor{tcp://192.168.2.30:38503 1::42::0::0})
  SOURCE(51,,NetworkSourceDescriptor{tcp://192.168.2.31:38713 1::51::0::0})
[m
[36m[10:02:58.947458] [D] [thread 130483] [QueryPlanSerializationUtil.cpp:33] [serializeQueryPlan] QueryPlanSerializationUtil: serializing the operator chain for each root operator independently[m
[36m[10:02:58.947595] [D] [thread 130483] [OperatorSerializationUtil.cpp:1541] [serializeSinkDescriptor] OperatorSerializationUtil:: serialized SinkDescriptor [m
[36m[10:02:58.947879] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.948043] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.948196] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.948361] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.948736] [D] [thread 130483] [OperatorSerializationUtil.cpp:1083] [serializeSourceDescriptor] OperatorSerializationUtil:: serialize to SourceDescriptor with =NetworkSourceDescriptor{tcp://192.168.2.12:39487 1::33::0::0}[m
[36m[10:02:58.948860] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.949011] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.949278] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.949423] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.949570] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.949704] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.950034] [D] [thread 130483] [OperatorSerializationUtil.cpp:1083] [serializeSourceDescriptor] OperatorSerializationUtil:: serialize to SourceDescriptor with =NetworkSourceDescriptor{tcp://192.168.2.30:38503 1::42::0::0}[m
[36m[10:02:58.950146] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.950287] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.950547] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.950693] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.950816] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.950953] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.951277] [D] [thread 130483] [OperatorSerializationUtil.cpp:1083] [serializeSourceDescriptor] OperatorSerializationUtil:: serialize to SourceDescriptor with =NetworkSourceDescriptor{tcp://192.168.2.31:38713 1::51::0::0}[m
[36m[10:02:58.951391] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.951531] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.951781] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.951926] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.952044] [D] [thread 130483] [SchemaSerializationUtil.cpp:26] [serializeSchema] SchemaSerializationUtil:: serialize schema debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:02:58.952178] [D] [thread 130483] [SchemaSerializationUtil.cpp:38] [serializeSchema] SchemaSerializationUtil:: serialize schema Row Layout[m
[36m[10:02:58.959337] [D] [thread 130483] [WorkerRPCClient.cpp:104] [checkAsyncResult] start checkAsyncResult for mode=Register for 10 queues[m
[36m[10:02:59.162157] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:02:59.162508] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:00.163746] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:00.209682] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:00.210011] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:00.393165] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:00.393513] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:00.657316] [D] [thread 130499] [OperatorSerializationUtil.cpp:1449] [deserializeSourceDescriptor] OperatorSerializationUtil:: de-serialized SourceDescriptor as NetworkSourceDescriptor[m
[36m[10:03:00.657468] [D] [thread 130499] [SchemaSerializationUtil.cpp:49] [deserializeSchema] SchemaSerializationUtil:: deserialize schema [m
[36m[10:03:00.657965] [D] [thread 130499] [SchemaSerializationUtil.cpp:62] [deserializeSchema] SchemaSerializationUtil:: deserialized row Layout[m
[32m[10:03:00.658178] [I] [thread 130499] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 54[m
[36m[10:03:00.658250] [D] [thread 130499] [SchemaSerializationUtil.cpp:49] [deserializeSchema] SchemaSerializationUtil:: deserialize schema [m
[36m[10:03:00.658636] [D] [thread 130499] [SchemaSerializationUtil.cpp:62] [deserializeSchema] SchemaSerializationUtil:: deserialized row Layout[m
[36m[10:03:00.658708] [D] [thread 130499] [SchemaSerializationUtil.cpp:49] [deserializeSchema] SchemaSerializationUtil:: deserialize schema [m
[36m[10:03:00.659016] [D] [thread 130499] [SchemaSerializationUtil.cpp:62] [deserializeSchema] SchemaSerializationUtil:: deserialized row Layout[m
[36m[10:03:00.660476] [D] [thread 130499] [OperatorSerializationUtil.cpp:1449] [deserializeSourceDescriptor] OperatorSerializationUtil:: de-serialized SourceDescriptor as NetworkSourceDescriptor[m
[36m[10:03:00.660587] [D] [thread 130499] [SchemaSerializationUtil.cpp:49] [deserializeSchema] SchemaSerializationUtil:: deserialize schema [m
[36m[10:03:00.660979] [D] [thread 130499] [SchemaSerializationUtil.cpp:62] [deserializeSchema] SchemaSerializationUtil:: deserialized row Layout[m
[32m[10:03:00.661137] [I] [thread 130499] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 55[m
[36m[10:03:00.661205] [D] [thread 130499] [SchemaSerializationUtil.cpp:49] [deserializeSchema] SchemaSerializationUtil:: deserialize schema [m
[36m[10:03:00.661558] [D] [thread 130499] [SchemaSerializationUtil.cpp:62] [deserializeSchema] SchemaSerializationUtil:: deserialized row Layout[m
[36m[10:03:00.661613] [D] [thread 130499] [SchemaSerializationUtil.cpp:49] [deserializeSchema] SchemaSerializationUtil:: deserialize schema [m
[36m[10:03:00.661909] [D] [thread 130499] [SchemaSerializationUtil.cpp:62] [deserializeSchema] SchemaSerializationUtil:: deserialized row Layout[m
[32m[10:03:00.663243] [I] [thread 130499] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 56[m
[36m[10:03:00.663355] [D] [thread 130499] [SchemaSerializationUtil.cpp:49] [deserializeSchema] SchemaSerializationUtil:: deserialize schema [m
[36m[10:03:00.663749] [D] [thread 130499] [SchemaSerializationUtil.cpp:62] [deserializeSchema] SchemaSerializationUtil:: deserialized row Layout[m
[36m[10:03:00.663809] [D] [thread 130499] [SchemaSerializationUtil.cpp:49] [deserializeSchema] SchemaSerializationUtil:: deserialize schema [m
[36m[10:03:00.664140] [D] [thread 130499] [SchemaSerializationUtil.cpp:62] [deserializeSchema] SchemaSerializationUtil:: deserialized row Layout[m
[36m[10:03:00.665368] [D] [thread 130499] [OperatorSerializationUtil.cpp:1449] [deserializeSourceDescriptor] OperatorSerializationUtil:: de-serialized SourceDescriptor as NetworkSourceDescriptor[m
[36m[10:03:00.665476] [D] [thread 130499] [SchemaSerializationUtil.cpp:49] [deserializeSchema] SchemaSerializationUtil:: deserialize schema [m
[36m[10:03:00.665870] [D] [thread 130499] [SchemaSerializationUtil.cpp:62] [deserializeSchema] SchemaSerializationUtil:: deserialized row Layout[m
[32m[10:03:00.666029] [I] [thread 130499] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 57[m
[36m[10:03:00.666097] [D] [thread 130499] [SchemaSerializationUtil.cpp:49] [deserializeSchema] SchemaSerializationUtil:: deserialize schema [m
[36m[10:03:00.666466] [D] [thread 130499] [SchemaSerializationUtil.cpp:62] [deserializeSchema] SchemaSerializationUtil:: deserialized row Layout[m
[36m[10:03:00.666525] [D] [thread 130499] [SchemaSerializationUtil.cpp:49] [deserializeSchema] SchemaSerializationUtil:: deserialize schema [m
[36m[10:03:00.666852] [D] [thread 130499] [SchemaSerializationUtil.cpp:62] [deserializeSchema] SchemaSerializationUtil:: deserialized row Layout[m
[36m[10:03:00.668190] [D] [thread 130499] [WorkerRPCServer.cpp:45] [RegisterQuery] WorkerRPCServer::RegisterQuery: got request for queryId: 1 plan=SINK(56: {FileSinkDescriptor()})
  SOURCE(55,,NetworkSourceDescriptor{tcp://192.168.2.12:39487 1::33::0::0})
  SOURCE(54,,NetworkSourceDescriptor{tcp://192.168.2.30:38503 1::42::0::0})
  SOURCE(57,,NetworkSourceDescriptor{tcp://192.168.2.31:38713 1::51::0::0})
[m
[32m[10:03:00.668268] [I] [thread 130499] [NodeEngine.cpp:112] [registerQueryInNodeEngine] Creating ExecutableQueryPlan for 1 10 [m
[32m[10:03:00.668429] [I] [thread 130499] [NautilusQueryCompiler.cpp:59] [compileQuery] Compile Query with Nautilus[m
[36m[10:03:00.668750] [D] [thread 130499] [NautilusQueryCompiler.cpp:70] [compileQuery] compile query with id: 1 subPlanId: 10[m
Dumping queryPlan: [36m[10:03:00.668795] [D] [thread 130499] [DumpContext.cpp:48] [dump] Dump query plan - QueryCompilation-1-10-2023-11-13 10:03:00 - 1. LogicalQueryPlan[m
SINK(56: {FileSinkDescriptor()})
  SOURCE(55,,NetworkSourceDescriptor{tcp://192.168.2.12:39487 1::33::0::0})
  SOURCE(54,,NetworkSourceDescriptor{tcp://192.168.2.30:38503 1::42::0::0})
  SOURCE(57,,NetworkSourceDescriptor{tcp://192.168.2.31:38713 1::51::0::0})

[32m[10:03:00.669355] [I] [thread 130499] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 58[m
[32m[10:03:00.669492] [I] [thread 130499] [Node.cpp:164] [insertBetweenThisAndChildNodes] Node: Create temporary copy of this nodes parents.[m
[32m[10:03:00.669511] [I] [thread 130499] [Node.cpp:167] [insertBetweenThisAndChildNodes] Node: Remove all childs of this node.[m
[32m[10:03:00.669519] [I] [thread 130499] [Node.cpp:198] [removeChildren] Node: Removing all children for current node[m
[32m[10:03:00.669539] [I] [thread 130499] [Node.cpp:204] [removeChildren] Node: Removed node as child of this node[m
[32m[10:03:00.669549] [I] [thread 130499] [Node.cpp:204] [removeChildren] Node: Removed node as child of this node[m
[32m[10:03:00.669558] [I] [thread 130499] [Node.cpp:204] [removeChildren] Node: Removed node as child of this node[m
[32m[10:03:00.669641] [I] [thread 130499] [Node.cpp:175] [insertBetweenThisAndChildNodes] Node: Add copy of this nodes parent as parent to the input node.[m
[32m[10:03:00.669935] [I] [thread 130499] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 59[m
[36m[10:03:00.670082] [D] [thread 130499] [Node.cpp:126] [insertBetweenThisAndParentNodes] Node: Create temporary copy of this nodes parents.[m
[32m[10:03:00.670099] [I] [thread 130499] [Node.cpp:142] [insertBetweenThisAndParentNodes] Node: Remove all parents of this node.[m
[32m[10:03:00.670106] [I] [thread 130499] [Node.cpp:187] [removeAllParent] Node: Removing all parents for current node[m
[36m[10:03:00.670180] [D] [thread 130499] [Node.cpp:356] [removeAndJoinParentAndChildren] Node: Joining parents with children[m
[36m[10:03:00.670194] [D] [thread 130499] [Node.cpp:363] [removeAndJoinParentAndChildren] Node: Add child of this node as child of this node's parent[m
[36m[10:03:00.670240] [D] [thread 130499] [Node.cpp:366] [removeAndJoinParentAndChildren] Node: remove this node as parent of the child[m
[36m[10:03:00.670261] [D] [thread 130499] [Node.cpp:370] [removeAndJoinParentAndChildren] Node: remove this node as child of this node's parents[m
[32m[10:03:00.670393] [I] [thread 130499] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 60[m
[36m[10:03:00.670501] [D] [thread 130499] [Node.cpp:126] [insertBetweenThisAndParentNodes] Node: Create temporary copy of this nodes parents.[m
[36m[10:03:00.670525] [D] [thread 130499] [Node.cpp:133] [insertBetweenThisAndParentNodes] Node: Add copy of this nodes parent as parent to the input node.[m
[32m[10:03:00.670563] [I] [thread 130499] [Node.cpp:142] [insertBetweenThisAndParentNodes] Node: Remove all parents of this node.[m
[32m[10:03:00.670572] [I] [thread 130499] [Node.cpp:187] [removeAllParent] Node: Removing all parents for current node[m
[32m[10:03:00.670585] [I] [thread 130499] [Node.cpp:193] [removeAllParent] Node: Removed node as parent of this node[m
[36m[10:03:00.670673] [D] [thread 130499] [Node.cpp:356] [removeAndJoinParentAndChildren] Node: Joining parents with children[m
[36m[10:03:00.670690] [D] [thread 130499] [Node.cpp:370] [removeAndJoinParentAndChildren] Node: remove this node as child of this node's parents[m
[32m[10:03:00.670739] [I] [thread 130499] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 61[m
[36m[10:03:00.670798] [D] [thread 130499] [Node.cpp:126] [insertBetweenThisAndParentNodes] Node: Create temporary copy of this nodes parents.[m
[36m[10:03:00.670814] [D] [thread 130499] [Node.cpp:133] [insertBetweenThisAndParentNodes] Node: Add copy of this nodes parent as parent to the input node.[m
Dumping queryPlan: [32m[10:03:00.670848] [I] [thread 130499] [Node.cpp:142] [insertBetweenThisAndParentNodes] Node: Remove all parents of this node.[m
PhysicalSinkOperator
  PhysicalMultiplexOperator
    PhysicalSourceOperator
    PhysicalSourceOperator
    PhysicalSourceOperator

[32m[10:03:00.670856] [I] [thread 130499] [Node.cpp:187] [removeAllParent] Node: Removing all parents for current node[m
[32m[10:03:00.670865] [I] [thread 130499] [Node.cpp:193] [removeAllParent] Node: Removed node as parent of this node[m
[36m[10:03:00.670939] [D] [thread 130499] [Node.cpp:356] [removeAndJoinParentAndChildren] Node: Joining parents with children[m
[36m[10:03:00.670954] [D] [thread 130499] [Node.cpp:370] [removeAndJoinParentAndChildren] Node: remove this node as child of this node's parents[m
[32m[10:03:00.670990] [I] [thread 130499] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 62[m
[36m[10:03:00.671040] [D] [thread 130499] [Node.cpp:126] [insertBetweenThisAndParentNodes] Node: Create temporary copy of this nodes parents.[m
[36m[10:03:00.671237] [D] [thread 130499] [Node.cpp:133] [insertBetweenThisAndParentNodes] Node: Add copy of this nodes parent as parent to the input node.[m
[32m[10:03:00.671440] [I] [thread 130499] [Node.cpp:142] [insertBetweenThisAndParentNodes] Node: Remove all parents of this node.[m
[32m[10:03:00.671456] [I] [thread 130499] [Node.cpp:187] [removeAllParent] Node: Removing all parents for current node[m
[32m[10:03:00.671469] [I] [thread 130499] [Node.cpp:193] [removeAllParent] Node: Removed node as parent of this node[m
[36m[10:03:00.671577] [D] [thread 130499] [Node.cpp:356] [removeAndJoinParentAndChildren] Node: Joining parents with children[m
[36m[10:03:00.671594] [D] [thread 130499] [Node.cpp:370] [removeAndJoinParentAndChildren] Node: remove this node as child of this node's parents[m
[36m[10:03:00.671723] [D] [thread 130499] [DumpContext.cpp:48] [dump] Dump query plan - QueryCompilation-1-10-2023-11-13 10:03:00 - 2. PhysicalQueryPlan[m
[36m[10:03:00.671970] [D] [thread 130499] [DefaultPipeliningPhase.cpp:42] [apply] Pipeline: query id: 1 - 10[m
[32m[10:03:00.672410] [I] [thread 130499] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 59[m
[36m[10:03:00.672638] [D] [thread 130499] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator PhysicalSinkOperator as new root of the plan.[m
[36m[10:03:00.672657] [D] [thread 130499] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:03:00.672665] [D] [thread 130499] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[32m[10:03:00.673219] [I] [thread 130499] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 60[m
[36m[10:03:00.673369] [D] [thread 130499] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator PhysicalSourceOperator as new root of the plan.[m
[36m[10:03:00.673384] [D] [thread 130499] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
Dumping pipelineQueryPlan: [36m[10:03:00.673391] [D] [thread 130499] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[32m[10:03:00.673502] [I] [thread 130499] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 61[m
[36m[10:03:00.673580] [D] [thread 130499] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator PhysicalSourceOperator as new root of the plan.[m
PipelineQueryPlan: 
- queryId: 1, subPlanId: 10, no. pipelines: 4
- pipeline: - Id: 1, Type: SinkPipelineType, Successors: , Predecessors: 3, 4, 5
- Queryplan: PhysicalSinkOperator

- pipeline: - Id: 3, Type: SourcePipelineType, Successors: 1, Predecessors: 
- Queryplan: PhysicalSourceOperator

- pipeline: - Id: 4, Type: SourcePipelineType, Successors: 1, Predecessors: 
- Queryplan: PhysicalSourceOperator

- pipeline: - Id: 5, Type: SourcePipelineType, Successors: 1, Predecessors: 
- Queryplan: PhysicalSourceOperator


[36m[10:03:00.673592] [D] [thread 130499] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:03:00.673599] [D] [thread 130499] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
Dumping pipelineQueryPlan: [32m[10:03:00.673676] [I] [thread 130499] [OperatorNode.cpp:26] [OperatorNode] Creating Operator 62[m
[36m[10:03:00.673772] [D] [thread 130499] [QueryPlan.cpp:80] [appendOperatorAsNewRoot] QueryPlan: Appending operator PhysicalSourceOperator as new root of the plan.[m
PipelineQueryPlan: 
- queryId: 1, subPlanId: 10, no. pipelines: 4
- pipeline: - Id: 1, Type: SinkPipelineType, Successors: , Predecessors: 3, 4, 5
- Queryplan: PhysicalSinkOperator

- pipeline: - Id: 3, Type: SourcePipelineType, Successors: 1, Predecessors: 
- Queryplan: PhysicalSourceOperator

- pipeline: - Id: 4, Type: SourcePipelineType, Successors: 1, Predecessors: 
- Queryplan: PhysicalSourceOperator

- pipeline: - Id: 5, Type: SourcePipelineType, Successors: 1, Predecessors: 
- Queryplan: PhysicalSourceOperator


[36m[10:03:00.673785] [D] [thread 130499] [QueryPlan.cpp:87] [appendOperatorAsNewRoot] QueryPlan: Clearing current root operators.[m
[36m[10:03:00.673792] [D] [thread 130499] [QueryPlan.cpp:89] [appendOperatorAsNewRoot] QueryPlan: Pushing input operator node as new root.[m
[36m[10:03:00.673875] [D] [thread 130499] [DumpContext.cpp:55] [dump] Dump pipelined query plan - QueryCompilation-1-10-2023-11-13 10:03:00 - 3. AfterPipelinedQueryPlan[m
[36m[10:03:00.674287] [D] [thread 130499] [DumpContext.cpp:55] [dump] Dump pipelined query plan - QueryCompilation-1-10-2023-11-13 10:03:00 - 4. AfterAddScanAndEmitPhase[m
[36m[10:03:00.674580] [D] [thread 130499] [NautilusCompilationPhase.cpp:38] [apply] Generate code for query plan 1 - 10[m
[36m[10:03:00.674865] [D] [thread 130499] [ConvertLogicalToPhysicalSink.cpp:43] [createDataSink] Convert sink  59[m
[32m[10:03:00.674927] [I] [thread 130499] [ConvertLogicalToPhysicalSink.cpp:157] [createDataSink] ConvertLogicalToPhysicalSink: Creating file sink for format=CSV_FORMAT[m
[36m[10:03:00.675260] [D] [thread 130499] [FileSink.cpp:56] [FileSink] FileSink: open file= /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out[m
[32m[10:03:00.675956] [I] [thread 130499] [ConvertLogicalToPhysicalSource.cpp:205] [createDataSource] ConvertLogicalToPhysicalSource: Creating network source[m
[36m[10:03:00.676660] [D] [thread 130499] [DataSource.cpp:75] [DataSource] DataSource  33 : Init Data Source with schema  debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[32m[10:03:00.677588] [I] [thread 130499] [ConvertLogicalToPhysicalSource.cpp:205] [createDataSource] ConvertLogicalToPhysicalSource: Creating network source[m
[36m[10:03:00.677921] [D] [thread 130499] [DataSource.cpp:75] [DataSource] DataSource  42 : Init Data Source with schema  debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[32m[10:03:00.678353] [I] [thread 130499] [ConvertLogicalToPhysicalSource.cpp:205] [createDataSource] ConvertLogicalToPhysicalSource: Creating network source[m
[36m[10:03:00.678678] [D] [thread 130499] [DataSource.cpp:75] [DataSource] DataSource  51 : Init Data Source with schema  debs$start:INTEGER(64 bits) debs$end:INTEGER(64 bits) debs$sid:INTEGER(64 bits) debs$absolute_v:INTEGER(64 bits)[m
[36m[10:03:00.679763] [D] [thread 130499] [NodeEngine.cpp:131] [registerQueryInNodeEngine] Runtime: registerQueryInNodeEngine query with queryId= 1 querySubPlanId = 10[m
[36m[10:03:00.679955] [D] [thread 130499] [NodeEngine.cpp:137] [registerQueryInNodeEngine] Runtime: register of QEP  10  as a singleton[m
[36m[10:03:00.679976] [D] [thread 130499] [QueryManagerLifecycle.cpp:38] [registerQuery] AbstractQueryManager::registerQueryInNodeEngine: query 1 subquery=10[m
[36m[10:03:00.680052] [D] [thread 130499] [QueryManagerLifecycle.cpp:48] [registerQuery] AbstractQueryManager: resolving sources for query  1  with sources= 3[m
[36m[10:03:00.680083] [D] [thread 130499] [QueryManagerLifecycle.cpp:54] [registerQuery] AbstractQueryManager: Source  33  not found. Creating new element with with qep [m
[36m[10:03:00.680367] [D] [thread 130499] [QueryManagerLifecycle.cpp:54] [registerQuery] AbstractQueryManager: Source  42  not found. Creating new element with with qep [m
[36m[10:03:00.680427] [D] [thread 130499] [QueryManagerLifecycle.cpp:54] [registerQuery] AbstractQueryManager: Source  51  not found. Creating new element with with qep [m
[36m[10:03:00.680464] [D] [thread 130499] [QueryManagerLifecycle.cpp:68] [registerQuery] queryToStatisticsMap add for= 10  pair queryId= 1  subplanId= 10[m
2023-11-13 10:03:00.680 setup: queryId=1, querySubPlanId=10; 
[36m[10:03:00.680876] [D] [thread 130499] [ExecutableQueryPlan.cpp:126] [setup] QueryExecutionPlan: setup queryId=1 querySubPlanId=10[m
2023-11-13 10:03:00.680 start: queryId=1, querySubPlanId=10; 
[36m[10:03:00.681023] [D] [thread 130499] [ExecutableQueryPlan.cpp:144] [start] QueryExecutionPlan: start query=1 subplan=10[m
[36m[10:03:00.681333] [D] [thread 130499] [NetworkManager.cpp:79] [registerSubpartitionConsumer] NetworkManager: Registering SubpartitionConsumer: 1::33::0::0 from 192.168.2.12[m
[36m[10:03:00.681660] [D] [thread 130499] [PartitionManager.cpp:81] [registerSubpartitionConsumer] PartitionManager: Registering Subpartition Consumer 1::33::0::0=1[m
[36m[10:03:00.681707] [D] [thread 130499] [QueryManagerLifecycle.cpp:133] [registerQuery] AbstractQueryManager: network source  0xffff30010280  started successfully[m
[36m[10:03:00.681761] [D] [thread 130499] [NetworkManager.cpp:79] [registerSubpartitionConsumer] NetworkManager: Registering SubpartitionConsumer: 1::42::0::0 from 192.168.2.30[m
[36m[10:03:00.681814] [D] [thread 130499] [PartitionManager.cpp:81] [registerSubpartitionConsumer] PartitionManager: Registering Subpartition Consumer 1::42::0::0=1[m
[36m[10:03:00.681829] [D] [thread 130499] [QueryManagerLifecycle.cpp:133] [registerQuery] AbstractQueryManager: network source  0xffff300104c0  started successfully[m
[36m[10:03:00.681859] [D] [thread 130499] [NetworkManager.cpp:79] [registerSubpartitionConsumer] NetworkManager: Registering SubpartitionConsumer: 1::51::0::0 from 192.168.2.31[m
[36m[10:03:00.681895] [D] [thread 130499] [PartitionManager.cpp:81] [registerSubpartitionConsumer] PartitionManager: Registering Subpartition Consumer 1::51::0::0=1[m
[36m[10:03:00.681909] [D] [thread 130499] [QueryManagerLifecycle.cpp:133] [registerQuery] AbstractQueryManager: network source  0xffff30010700  started successfully[m
[36m[10:03:00.681961] [D] [thread 130499] [NetworkSource.cpp:79] [start] NetworkSource: start called on query Id:1 OperatorId:33 PartitionId: 0 SubpartitionID: 0[m
[36m[10:03:00.682086] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:377] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=true type Initialize[m
[36m[10:03:00.682430] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:395] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=true type Initialize[m
[36m[10:03:00.683324] [D] [thread 130495] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::33::0::0[m
[36m[10:03:00.683324] [D] [thread 130494] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::33::0::0[m
[36m[10:03:00.683335] [D] [thread 130497] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::33::0::0[m
[36m[10:03:00.683324] [D] [thread 130496] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::33::0::0[m
[36m[10:03:00.683578] [D] [thread 130499] [NetworkSource.cpp:224] [postReconfigurationCallback] NetworkSource: postReconfigurationCallback() called 1::33::0::0[m
[36m[10:03:00.683668] [D] [thread 130499] [NetworkSource.cpp:106] [start] NetworkSource: start completed on query Id:1 OperatorId:33 PartitionId: 0 SubpartitionID: 0[m
[36m[10:03:00.683689] [D] [thread 130499] [QueryManagerLifecycle.cpp:145] [registerQuery] AbstractQueryManager: network source  0xffff30010280  started successfully[m
[36m[10:03:00.683718] [D] [thread 130499] [NetworkSource.cpp:79] [start] NetworkSource: start called on query Id:1 OperatorId:42 PartitionId: 0 SubpartitionID: 0[m
[36m[10:03:00.683794] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:377] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=true type Initialize[m
[36m[10:03:00.684007] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:395] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=true type Initialize[m
[36m[10:03:00.684492] [D] [thread 130496] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::42::0::0[m
[36m[10:03:00.684492] [D] [thread 130495] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::42::0::0[m
[36m[10:03:00.684573] [D] [thread 130497] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::42::0::0[m
[36m[10:03:00.684537] [D] [thread 130494] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::42::0::0[m
[36m[10:03:00.684946] [D] [thread 130499] [NetworkSource.cpp:224] [postReconfigurationCallback] NetworkSource: postReconfigurationCallback() called 1::42::0::0[m
[36m[10:03:00.685096] [D] [thread 130499] [NetworkSource.cpp:106] [start] NetworkSource: start completed on query Id:1 OperatorId:42 PartitionId: 0 SubpartitionID: 0[m
[36m[10:03:00.685134] [D] [thread 130499] [QueryManagerLifecycle.cpp:145] [registerQuery] AbstractQueryManager: network source  0xffff300104c0  started successfully[m
[36m[10:03:00.685173] [D] [thread 130499] [NetworkSource.cpp:79] [start] NetworkSource: start called on query Id:1 OperatorId:51 PartitionId: 0 SubpartitionID: 0[m
[36m[10:03:00.685241] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:377] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=true type Initialize[m
[36m[10:03:00.685361] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:395] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=true type Initialize[m
[36m[10:03:00.685750] [D] [thread 130494] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::51::0::0[m
[36m[10:03:00.685749] [D] [thread 130495] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::51::0::0[m
[36m[10:03:00.685794] [D] [thread 130496] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::51::0::0[m
[36m[10:03:00.685839] [D] [thread 130497] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::51::0::0[m
[36m[10:03:00.686246] [D] [thread 130499] [NetworkSource.cpp:224] [postReconfigurationCallback] NetworkSource: postReconfigurationCallback() called 1::51::0::0[m
[36m[10:03:00.686395] [D] [thread 130499] [NetworkSource.cpp:106] [start] NetworkSource: start completed on query Id:1 OperatorId:51 PartitionId: 0 SubpartitionID: 0[m
[36m[10:03:00.686428] [D] [thread 130499] [QueryManagerLifecycle.cpp:145] [registerQuery] AbstractQueryManager: network source  0xffff30010700  started successfully[m
[36m[10:03:00.686483] [D] [thread 130499] [QueryManagerLifecycle.cpp:158] [registerQuery] AbstractQueryManager: start sink  FileSink()[m
[36m[10:03:00.686764] [D] [thread 130499] [NodeEngine.cpp:144] [registerQueryInNodeEngine] Runtime: register of subqep  10  succeeded[m
[36m[10:03:00.686881] [D] [thread 130499] [WorkerRPCServer.cpp:54] [RegisterQuery] WorkerRPCServer::RegisterQuery: success[m
[36m[10:03:01.105598] [D] [thread 130492] [ZmqServer.cpp:279] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): ClientAnnouncement received for channel 3:1::33::0::0[m
[32m[10:03:01.105842] [I] [thread 130492] [ExchangeProtocol.cpp:41] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for 1::33::0::0(threadId=3) Data[m
[36m[10:03:01.106006] [D] [thread 130492] [ExchangeProtocol.cpp:52] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for DataChannel 1::33::0::0(threadId=3) REGISTERED[m
[36m[10:03:01.107329] [D] [thread 130493] [ZmqServer.cpp:279] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): ClientAnnouncement received for channel 0:1::42::0::0[m
[32m[10:03:01.107431] [I] [thread 130493] [ExchangeProtocol.cpp:41] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for 1::42::0::0(threadId=0) Data[m
[36m[10:03:01.107503] [D] [thread 130493] [ExchangeProtocol.cpp:52] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for DataChannel 1::42::0::0(threadId=0) REGISTERED[m
[36m[10:03:01.109125] [D] [thread 130493] [ZmqServer.cpp:279] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): ClientAnnouncement received for channel 3:1::42::0::0[m
[36m[10:03:01.109125] [D] [thread 130492] [ZmqServer.cpp:279] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): ClientAnnouncement received for channel 2:1::42::0::0[m
[32m[10:03:01.109224] [I] [thread 130492] [ExchangeProtocol.cpp:41] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for 1::42::0::0(threadId=2) Data[m
[32m[10:03:01.109224] [I] [thread 130493] [ExchangeProtocol.cpp:41] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for 1::42::0::0(threadId=3) Data[m
[36m[10:03:01.109310] [D] [thread 130492] [ExchangeProtocol.cpp:52] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for DataChannel 1::42::0::0(threadId=2) REGISTERED[m
[36m[10:03:01.109319] [D] [thread 130493] [ExchangeProtocol.cpp:52] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for DataChannel 1::42::0::0(threadId=3) REGISTERED[m
[36m[10:03:01.110948] [D] [thread 130492] [ZmqServer.cpp:279] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): ClientAnnouncement received for channel 1:1::42::0::0[m
[36m[10:03:01.111043] [D] [thread 130493] [ZmqServer.cpp:279] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): ClientAnnouncement received for channel 1:1::33::0::0[m
[32m[10:03:01.111046] [I] [thread 130492] [ExchangeProtocol.cpp:41] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for 1::42::0::0(threadId=1) Data[m
[32m[10:03:01.111085] [I] [thread 130493] [ExchangeProtocol.cpp:41] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for 1::33::0::0(threadId=1) Data[m
[36m[10:03:01.111124] [D] [thread 130492] [ExchangeProtocol.cpp:52] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for DataChannel 1::42::0::0(threadId=1) REGISTERED[m
[36m[10:03:01.111134] [D] [thread 130493] [ExchangeProtocol.cpp:52] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for DataChannel 1::33::0::0(threadId=1) REGISTERED[m
[36m[10:03:01.113658] [D] [thread 130492] [ZmqServer.cpp:279] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): ClientAnnouncement received for channel 1:1::51::0::0[m
[36m[10:03:01.113658] [D] [thread 130493] [ZmqServer.cpp:279] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): ClientAnnouncement received for channel 0:1::33::0::0[m
[32m[10:03:01.113762] [I] [thread 130492] [ExchangeProtocol.cpp:41] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for 1::51::0::0(threadId=1) Data[m
[32m[10:03:01.113762] [I] [thread 130493] [ExchangeProtocol.cpp:41] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for 1::33::0::0(threadId=0) Data[m
[36m[10:03:01.113862] [D] [thread 130492] [ExchangeProtocol.cpp:52] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for DataChannel 1::51::0::0(threadId=1) REGISTERED[m
[36m[10:03:01.114044] [D] [thread 130493] [ExchangeProtocol.cpp:52] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for DataChannel 1::33::0::0(threadId=0) REGISTERED[m
[36m[10:03:01.115050] [D] [thread 130492] [ZmqServer.cpp:279] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): ClientAnnouncement received for channel 2:1::33::0::0[m
[36m[10:03:01.115131] [D] [thread 130493] [ZmqServer.cpp:279] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): ClientAnnouncement received for channel 2:1::51::0::0[m
[32m[10:03:01.115137] [I] [thread 130492] [ExchangeProtocol.cpp:41] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for 1::33::0::0(threadId=2) Data[m
[32m[10:03:01.115169] [I] [thread 130493] [ExchangeProtocol.cpp:41] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for 1::51::0::0(threadId=2) Data[m
[36m[10:03:01.115233] [D] [thread 130493] [ExchangeProtocol.cpp:52] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for DataChannel 1::51::0::0(threadId=2) REGISTERED[m
[36m[10:03:01.115237] [D] [thread 130492] [ExchangeProtocol.cpp:52] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for DataChannel 1::33::0::0(threadId=2) REGISTERED[m
[36m[10:03:01.116456] [D] [thread 130492] [ZmqServer.cpp:279] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): ClientAnnouncement received for channel 0:1::51::0::0[m
[32m[10:03:01.116543] [I] [thread 130492] [ExchangeProtocol.cpp:41] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for 1::51::0::0(threadId=0) Data[m
[36m[10:03:01.116604] [D] [thread 130492] [ExchangeProtocol.cpp:52] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for DataChannel 1::51::0::0(threadId=0) REGISTERED[m
[36m[10:03:01.116627] [D] [thread 130493] [ZmqServer.cpp:279] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): ClientAnnouncement received for channel 3:1::51::0::0[m
[32m[10:03:01.116664] [I] [thread 130493] [ExchangeProtocol.cpp:41] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for 1::51::0::0(threadId=3) Data[m
[36m[10:03:01.116699] [D] [thread 130493] [ExchangeProtocol.cpp:52] [onClientAnnouncement] ExchangeProtocol: ClientAnnouncement received for DataChannel 1::51::0::0(threadId=3) REGISTERED[m
[36m[10:03:01.394723] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:01.639964] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:01.640520] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:01.772851] [D] [thread 130483] [WorkerRPCClient.cpp:146] [checkAsyncResult] checkAsyncResult for mode=Register succeed[m
[36m[10:03:01.772956] [D] [thread 130483] [QueryDeploymentPhase.cpp:215] [deployQuery] QueryDeploymentPhase: Finished deploying execution plan for query with Id 1 [m
[36m[10:03:01.773458] [D] [thread 130483] [QueryDeploymentPhase.cpp:94] [execute] QueryDeploymentPhase: deployment for shared query 1 successful[m
[36m[10:03:01.773621] [D] [thread 130483] [QueryDeploymentPhase.cpp:101] [execute] QueryService: start query[m
[36m[10:03:01.773658] [D] [thread 130483] [QueryDeploymentPhase.cpp:219] [startQuery] QueryDeploymentPhase::startQuery queryId= 1[m
[36m[10:03:01.773816] [D] [thread 130483] [QueryDeploymentPhase.cpp:230] [startQuery] QueryDeploymentPhase::startQuery at execution node with id=5 and IP=192.168.2.32[m
[36m[10:03:01.773853] [D] [thread 130483] [WorkerRPCClient.cpp:223] [startQueryAsync] WorkerRPCClient::startQueryAsync address=192.168.2.32:34503 queryId=1[m
[36m[10:03:01.778666] [D] [thread 130483] [QueryDeploymentPhase.cpp:230] [startQuery] QueryDeploymentPhase::startQuery at execution node with id=6 and IP=192.168.2.33[m
[36m[10:03:01.778753] [D] [thread 130483] [WorkerRPCClient.cpp:223] [startQueryAsync] WorkerRPCClient::startQueryAsync address=192.168.2.33:46447 queryId=1[m
[36m[10:03:01.783116] [D] [thread 130483] [QueryDeploymentPhase.cpp:230] [startQuery] QueryDeploymentPhase::startQuery at execution node with id=2 and IP=192.168.2.12[m
[36m[10:03:01.783205] [D] [thread 130483] [WorkerRPCClient.cpp:223] [startQueryAsync] WorkerRPCClient::startQueryAsync address=192.168.2.12:35153 queryId=1[m
[36m[10:03:01.787672] [D] [thread 130483] [QueryDeploymentPhase.cpp:230] [startQuery] QueryDeploymentPhase::startQuery at execution node with id=7 and IP=192.168.2.34[m
[36m[10:03:01.787760] [D] [thread 130483] [WorkerRPCClient.cpp:223] [startQueryAsync] WorkerRPCClient::startQueryAsync address=192.168.2.34:42085 queryId=1[m
[36m[10:03:01.792201] [D] [thread 130483] [QueryDeploymentPhase.cpp:230] [startQuery] QueryDeploymentPhase::startQuery at execution node with id=8 and IP=192.168.2.35[m
[36m[10:03:01.792290] [D] [thread 130483] [WorkerRPCClient.cpp:223] [startQueryAsync] WorkerRPCClient::startQueryAsync address=192.168.2.35:39705 queryId=1[m
[36m[10:03:01.796681] [D] [thread 130483] [QueryDeploymentPhase.cpp:230] [startQuery] QueryDeploymentPhase::startQuery at execution node with id=3 and IP=192.168.2.30[m
[36m[10:03:01.796803] [D] [thread 130483] [WorkerRPCClient.cpp:223] [startQueryAsync] WorkerRPCClient::startQueryAsync address=192.168.2.30:35153 queryId=1[m
[36m[10:03:01.801167] [D] [thread 130483] [QueryDeploymentPhase.cpp:230] [startQuery] QueryDeploymentPhase::startQuery at execution node with id=9 and IP=192.168.2.37[m
[36m[10:03:01.801254] [D] [thread 130483] [WorkerRPCClient.cpp:223] [startQueryAsync] WorkerRPCClient::startQueryAsync address=192.168.2.37:38213 queryId=1[m
[36m[10:03:01.805642] [D] [thread 130483] [QueryDeploymentPhase.cpp:230] [startQuery] QueryDeploymentPhase::startQuery at execution node with id=10 and IP=192.168.2.38[m
[36m[10:03:01.805729] [D] [thread 130483] [WorkerRPCClient.cpp:223] [startQueryAsync] WorkerRPCClient::startQueryAsync address=192.168.2.38:41905 queryId=1[m
[36m[10:03:01.810051] [D] [thread 130483] [QueryDeploymentPhase.cpp:230] [startQuery] QueryDeploymentPhase::startQuery at execution node with id=4 and IP=192.168.2.31[m
[36m[10:03:01.810136] [D] [thread 130483] [WorkerRPCClient.cpp:223] [startQueryAsync] WorkerRPCClient::startQueryAsync address=192.168.2.31:42843 queryId=1[m
[36m[10:03:01.814456] [D] [thread 130483] [QueryDeploymentPhase.cpp:230] [startQuery] QueryDeploymentPhase::startQuery at execution node with id=1 and IP=192.168.2.11[m
[36m[10:03:01.814544] [D] [thread 130483] [WorkerRPCClient.cpp:223] [startQueryAsync] WorkerRPCClient::startQueryAsync address=192.168.2.11:42713 queryId=1[m
[36m[10:03:01.819036] [D] [thread 130483] [WorkerRPCClient.cpp:104] [checkAsyncResult] start checkAsyncResult for mode=Start for 10 queues[m
[36m[10:03:01.878450] [D] [thread 130546] [WorkerRPCServer.cpp:77] [StartQuery] WorkerRPCServer::StartQuery: got request for 1[m
[36m[10:03:01.878549] [D] [thread 130546] [NodeEngine.cpp:158] [startQuery] Runtime: startQuery= 1[m
[36m[10:03:01.878675] [D] [thread 130546] [QueryManagerLifecycle.cpp:183] [startQuery] AbstractQueryManager::startQuery: query id  10   1[m
[36m[10:03:01.878807] [D] [thread 130546] [QueryStatistics.cpp:48] [setTimestampQueryStart] QueryStatistics::setTimestampQueryStart called with  1699869781878[m
[36m[10:03:01.878828] [D] [thread 130546] [NodeEngine.cpp:170] [startQuery] Runtime: start of QEP  10  succeeded[m
[36m[10:03:01.878852] [D] [thread 130546] [WorkerRPCServer.cpp:80] [StartQuery] WorkerRPCServer::StartQuery: success[m
[36m[10:03:01.909596] [D] [thread 130483] [WorkerRPCClient.cpp:146] [checkAsyncResult] checkAsyncResult for mode=Start succeed[m
[36m[10:03:01.909702] [D] [thread 130483] [QueryDeploymentPhase.cpp:238] [startQuery] QueryDeploymentPhase: Finished starting execution plan for query with Id 1[m
[32m[10:03:01.910412] [I] [thread 130483] [GlobalQueryPlan.cpp:124] [removeFailedOrStoppedSharedQueryPlans] GlobalQueryPlan: remove empty metadata information.[m
[36m[10:03:01.910597] [D] [thread 130483] [RequestProcessorService.cpp:82] [start] QueryRequestProcessorService: Waiting for new query request trigger[m
[36m[10:03:02.641780] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:02.804513] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:02.805159] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:03.806440] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:04.754926] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:04.755543] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:04.756589] [D] [thread 130553] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:04.756706] [I] [thread 130553] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:04.756726] [I] [thread 130553] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:04.756934] [I] [thread 130553] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:04.756962] [I] [thread 130553] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:04.970885] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:04.971209] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:05.972485] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:06.973759] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:06.987206] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:06.987535] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:06.988635] [D] [thread 130558] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:06.988732] [I] [thread 130558] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:06.988751] [I] [thread 130558] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:06.988869] [I] [thread 130558] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:06.988929] [I] [thread 130558] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:07.159814] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:07.160170] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:08.161372] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:09.160858] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:09.161458] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:09.162177] [D] [thread 130563] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:09.162272] [I] [thread 130563] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:09.162291] [I] [thread 130563] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:09.162408] [I] [thread 130563] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:09.162422] [I] [thread 130563] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:09.377829] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:09.378341] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:10.379630] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:11.380952] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:11.406837] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:11.407354] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:11.408216] [D] [thread 130571] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:11.408313] [I] [thread 130571] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:11.408364] [I] [thread 130571] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:11.408483] [I] [thread 130571] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:11.408496] [I] [thread 130571] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:11.622612] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:11.623150] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:12.624475] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:13.625709] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:13.642553] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:13.643033] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:13.643906] [D] [thread 130576] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:13.643998] [I] [thread 130576] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:13.644016] [I] [thread 130576] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:13.644133] [I] [thread 130576] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:13.644148] [I] [thread 130576] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:13.843399] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:13.843750] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:14.844984] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:15.846240] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:15.857571] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:15.857904] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:15.858963] [D] [thread 130582] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:15.859063] [I] [thread 130582] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:15.859082] [I] [thread 130582] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:15.859199] [I] [thread 130582] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:15.859226] [I] [thread 130582] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:16.025051] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:16.025413] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:16.204794] [D] [thread 130496] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:03:16.207839] [D] [thread 130496] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10620000,10680000,63,1699869781863,1699869796205
10620000,10680000,54,1699869781824,1699869796205
[m
[36m[10:03:16.208396] [D] [thread 130496] [QueryStatistics.cpp:54] [setTimestampFirstProcessedTask] QueryStatistics::setTimestampFirstProcessedTask called with  1699869796208[m
[36m[10:03:16.585873] [D] [thread 130494] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:03:16.585947] [D] [thread 130494] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:03:16.586904] [D] [thread 130494] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10620000,10680000,47,1699869781906,1699869796585
10620000,10680000,24,1699869781842,1699869796585
[m
[36m[10:03:16.990814] [D] [thread 130497] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:03:16.990924] [D] [thread 130497] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:03:16.992531] [D] [thread 130497] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10620000,10680000,100,1699869781854,1699869796991
10620000,10680000,13,1699869781889,1699869796991
[m
[36m[10:03:17.026742] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:17.958010] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:17.958356] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:17.959385] [D] [thread 130588] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:17.959487] [I] [thread 130588] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:17.959504] [I] [thread 130588] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:17.959620] [I] [thread 130588] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:17.959645] [I] [thread 130588] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:18.213157] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:18.213720] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:19.215041] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:20.192622] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:20.193140] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:20.195239] [D] [thread 130594] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:20.195347] [I] [thread 130594] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:20.195366] [I] [thread 130594] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:20.195483] [I] [thread 130594] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:20.195497] [I] [thread 130594] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:20.455975] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:20.456372] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:21.457629] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:22.438251] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:22.438626] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:22.439755] [D] [thread 130599] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:22.439832] [I] [thread 130599] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:22.439847] [I] [thread 130599] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:22.439955] [I] [thread 130599] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:22.439966] [I] [thread 130599] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:22.661509] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:22.661841] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:23.663076] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:24.664391] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:24.670678] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:24.671025] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:24.672090] [D] [thread 130605] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:24.672192] [I] [thread 130605] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:24.672211] [I] [thread 130605] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:24.672363] [I] [thread 130605] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:24.672380] [I] [thread 130605] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:24.874685] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:24.875142] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:25.876474] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:26.800854] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:26.801451] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:26.802691] [D] [thread 130610] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:26.802814] [I] [thread 130610] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:26.802832] [I] [thread 130610] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:26.802958] [I] [thread 130610] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:26.802975] [I] [thread 130610] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:27.017024] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:27.017612] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:28.018877] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:28.970040] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:28.970563] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:28.971357] [D] [thread 130615] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:28.971455] [I] [thread 130615] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:28.971473] [I] [thread 130615] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:28.971590] [I] [thread 130615] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:28.971603] [I] [thread 130615] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:29.232164] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:29.232558] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:30.233741] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:31.229762] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:31.230089] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:31.231111] [D] [thread 130620] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:31.231207] [I] [thread 130620] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:31.231224] [I] [thread 130620] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:31.231340] [I] [thread 130620] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:31.231354] [I] [thread 130620] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:31.450693] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:31.451428] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:32.452838] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:33.396237] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:33.396871] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:33.397713] [D] [thread 130627] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:33.397784] [I] [thread 130627] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:33.397800] [I] [thread 130627] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:33.397908] [I] [thread 130627] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:33.397921] [I] [thread 130627] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:33.603112] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:33.603725] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:34.605090] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:34.952588] [D] [thread 130495] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:03:34.952664] [D] [thread 130495] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:03:34.953505] [D] [thread 130495] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10680000,10740000,63,1699869796012,1699869814952
10680000,10740000,54,1699869795442,1699869814952
[m
[36m[10:03:35.564112] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:35.564791] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:35.565562] [D] [thread 130634] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:35.565652] [I] [thread 130634] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:35.565670] [I] [thread 130634] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:35.565787] [I] [thread 130634] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:35.565800] [I] [thread 130634] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:35.781644] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:35.782228] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:36.050859] [D] [thread 130496] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:03:36.050937] [D] [thread 130496] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:03:36.051933] [D] [thread 130496] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10680000,10740000,47,1699869796228,1699869816050
10680000,10740000,24,1699869796395,1699869816050
[m
[36m[10:03:36.718716] [D] [thread 130494] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:03:36.718827] [D] [thread 130494] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:03:36.720447] [D] [thread 130494] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10680000,10740000,100,1699869795423,1699869816718
10680000,10740000,13,1699869796817,1699869816718
[m
[36m[10:03:36.783508] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:37.762108] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:37.762724] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:37.763511] [D] [thread 130641] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:37.763610] [I] [thread 130641] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:37.763628] [I] [thread 130641] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:37.763746] [I] [thread 130641] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:37.763759] [I] [thread 130641] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:38.033807] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:38.034290] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:39.035575] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:40.009976] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:40.010729] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:40.011393] [D] [thread 130646] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:40.011481] [I] [thread 130646] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:40.011500] [I] [thread 130646] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:40.011619] [I] [thread 130646] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:40.011666] [I] [thread 130646] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:40.222745] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:40.223197] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:41.224502] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:42.194377] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:42.194951] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:42.195734] [D] [thread 130653] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:42.195831] [I] [thread 130653] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:42.195850] [I] [thread 130653] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:42.195967] [I] [thread 130653] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:42.195979] [I] [thread 130653] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:42.406871] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:42.407422] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:43.408904] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:44.344819] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:44.345479] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:44.346245] [D] [thread 130659] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:44.346319] [I] [thread 130659] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:44.346335] [I] [thread 130659] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:44.346443] [I] [thread 130659] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:44.346457] [I] [thread 130659] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:44.514964] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:44.515499] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:45.516781] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:46.493473] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:46.494043] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:46.494803] [D] [thread 130666] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:46.494894] [I] [thread 130666] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:46.494912] [I] [thread 130666] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:46.495030] [I] [thread 130666] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:46.495045] [I] [thread 130666] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:46.774179] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:46.774895] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:47.776223] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:48.721071] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:48.721673] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:48.722474] [D] [thread 130673] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:48.722571] [I] [thread 130673] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:48.722588] [I] [thread 130673] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:48.722704] [I] [thread 130673] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:48.722720] [I] [thread 130673] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:48.917888] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:48.918225] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:49.919507] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:50.918799] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:50.919162] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:50.920142] [D] [thread 130679] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:50.920258] [I] [thread 130679] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:50.920279] [I] [thread 130679] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:50.920445] [I] [thread 130679] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:50.920472] [I] [thread 130679] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:51.123681] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:51.124045] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:52.125231] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:53.089914] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:53.090278] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:53.091211] [D] [thread 130684] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:53.091306] [I] [thread 130684] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:53.091324] [I] [thread 130684] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:53.091441] [I] [thread 130684] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:53.091455] [I] [thread 130684] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:53.350979] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:53.351335] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:53.380051] [D] [thread 130497] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:03:53.380162] [D] [thread 130497] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:03:53.381751] [D] [thread 130497] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10740000,10800000,54,1699869813871,1699869833380
10740000,10800000,63,1699869814775,1699869833380
[m
[36m[10:03:54.352502] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:55.278073] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:55.278422] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:55.279453] [D] [thread 130689] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:55.279535] [I] [thread 130689] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:55.279551] [I] [thread 130689] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:55.279661] [I] [thread 130689] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:55.279673] [I] [thread 130689] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:55.470711] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:55.471047] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:55.516610] [D] [thread 130495] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:03:55.516686] [D] [thread 130495] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:03:55.517571] [D] [thread 130495] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10740000,10800000,47,1699869815140,1699869835516
10740000,10800000,24,1699869815902,1699869835516
[m
[36m[10:03:55.842710] [D] [thread 130496] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:03:55.842819] [D] [thread 130496] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:03:55.844393] [D] [thread 130496] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10740000,10800000,13,1699869816524,1699869835842
10740000,10800000,100,1699869811799,1699869835842
[m
[36m[10:03:56.472453] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:57.438759] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:57.439111] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:57.440164] [D] [thread 130694] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:57.440266] [I] [thread 130694] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:57.440284] [I] [thread 130694] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:57.440433] [I] [thread 130694] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:57.440508] [I] [thread 130694] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:57.663688] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:57.664060] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:58.665250] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:59.666497] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:59.675211] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:59.675566] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:59.677300] [D] [thread 130699] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:03:59.677398] [I] [thread 130699] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:59.677417] [I] [thread 130699] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:03:59.677534] [I] [thread 130699] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:03:59.677547] [I] [thread 130699] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:03:59.843376] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:03:59.843738] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:00.844986] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:01.836726] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:01.837308] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:01.838025] [D] [thread 130704] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:01.838121] [I] [thread 130704] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:01.838139] [I] [thread 130704] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:01.838257] [I] [thread 130704] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:01.838271] [I] [thread 130704] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:02.049368] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:02.049950] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:03.051255] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:04.052497] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:04.054740] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:04.055321] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:04.056122] [D] [thread 130709] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:04.056218] [I] [thread 130709] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:04.056235] [I] [thread 130709] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:04.056388] [I] [thread 130709] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:04.056405] [I] [thread 130709] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:04.274378] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:04.275072] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:05.276391] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:06.274513] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:06.274837] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:06.275902] [D] [thread 130715] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:06.275984] [I] [thread 130715] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:06.276000] [I] [thread 130715] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:06.276108] [I] [thread 130715] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:06.276122] [I] [thread 130715] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:06.490616] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:06.490930] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:07.492130] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:08.446256] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:08.446628] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:08.447660] [D] [thread 130721] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:08.447760] [I] [thread 130721] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:08.447778] [I] [thread 130721] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:08.447895] [I] [thread 130721] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:08.447923] [I] [thread 130721] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:08.657457] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:08.657807] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:09.658994] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:10.629630] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:10.629962] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:10.631042] [D] [thread 130728] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:10.631139] [I] [thread 130728] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:10.631158] [I] [thread 130728] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:10.631276] [I] [thread 130728] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:10.631290] [I] [thread 130728] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:10.843662] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:10.844153] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:11.412024] [D] [thread 130494] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:04:11.412136] [D] [thread 130494] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:04:11.413700] [D] [thread 130494] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10800000,10860000,54,1699869832552,1699869851412
10800000,10860000,63,1699869833198,1699869851412
[m
[36m[10:04:11.845426] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:12.846681] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:12.847054] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:12.847555] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:12.848507] [D] [thread 130735] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:12.848595] [I] [thread 130735] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:12.848612] [I] [thread 130735] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:12.848730] [I] [thread 130735] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:12.848744] [I] [thread 130735] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:13.059788] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:13.060113] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:14.061388] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:15.047619] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:15.047936] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:15.049209] [D] [thread 130742] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:15.049465] [I] [thread 130742] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:15.049495] [I] [thread 130742] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:15.049900] [I] [thread 130742] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:15.049957] [I] [thread 130742] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:15.265224] [D] [thread 130497] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:04:15.265303] [D] [thread 130497] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:04:15.265728] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:15.266091] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:15.266222] [D] [thread 130497] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10800000,10860000,100,1699869826893,1699869855265
10800000,10860000,13,1699869835677,1699869855265
[m
[36m[10:04:15.309037] [D] [thread 130495] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:04:15.309145] [D] [thread 130495] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:04:15.310608] [D] [thread 130495] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10800000,10860000,47,1699869833671,1699869855309
10800000,10860000,24,1699869835375,1699869855309
[m
[36m[10:04:16.267434] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:17.218168] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:17.218797] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:17.219616] [D] [thread 130747] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:17.219715] [I] [thread 130747] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:17.219734] [I] [thread 130747] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:17.219849] [I] [thread 130747] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:17.219862] [I] [thread 130747] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:17.381836] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:17.382396] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:18.383727] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:19.352688] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:19.353053] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:19.354711] [D] [thread 130753] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:19.354807] [I] [thread 130753] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:19.354826] [I] [thread 130753] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:19.354944] [I] [thread 130753] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:19.354957] [I] [thread 130753] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:19.606947] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:19.607274] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:20.608485] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:21.609620] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:21.646280] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:21.646604] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:21.647692] [D] [thread 130758] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:21.647790] [I] [thread 130758] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:21.647809] [I] [thread 130758] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:21.647925] [I] [thread 130758] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:21.647938] [I] [thread 130758] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:21.848453] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:21.848819] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:22.850115] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:23.805754] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:23.806341] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:23.807035] [D] [thread 130764] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:23.807134] [I] [thread 130764] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:23.807153] [I] [thread 130764] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:23.807270] [I] [thread 130764] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:23.807283] [I] [thread 130764] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:23.973851] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:23.974426] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:24.975668] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:25.949792] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:25.950398] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:25.951183] [D] [thread 130770] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:25.951283] [I] [thread 130770] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:25.951303] [I] [thread 130770] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:25.951433] [I] [thread 130770] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:25.951449] [I] [thread 130770] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:26.165091] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:26.165761] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:27.166969] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:28.168234] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:28.181466] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:28.181784] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:28.182881] [D] [thread 130776] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:28.182980] [I] [thread 130776] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:28.182999] [I] [thread 130776] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:28.183119] [I] [thread 130776] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:28.183134] [I] [thread 130776] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:28.401062] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:28.401390] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:29.402624] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:29.822362] [D] [thread 130496] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:04:29.822451] [D] [thread 130496] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:04:29.823665] [D] [thread 130496] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10860000,10920000,63,1699869851027,1699869869822
10860000,10920000,54,1699869851212,1699869869822
[m
[36m[10:04:30.362770] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:30.363319] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:30.364122] [D] [thread 130783] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:30.364216] [I] [thread 130783] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:30.364235] [I] [thread 130783] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:30.364390] [I] [thread 130783] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:30.364411] [I] [thread 130783] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:30.530502] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:30.531048] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:31.532451] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:32.446330] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:32.447003] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:32.447715] [D] [thread 130790] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:32.447805] [I] [thread 130790] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:32.447823] [I] [thread 130790] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:32.447940] [I] [thread 130790] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:32.447953] [I] [thread 130790] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:32.657087] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:32.657647] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:33.658913] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:34.630515] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:34.631156] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:34.631954] [D] [thread 130796] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:34.632047] [I] [thread 130796] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:34.632065] [I] [thread 130796] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:34.632183] [I] [thread 130796] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:34.632196] [I] [thread 130796] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:34.788526] [D] [thread 130494] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:04:34.788637] [D] [thread 130494] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:04:34.790164] [D] [thread 130494] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10860000,10920000,47,1699869852216,1699869874788
10860000,10920000,24,1699869855119,1699869874788
[m
[36m[10:04:34.845549] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:34.846057] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:35.306077] [D] [thread 130497] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:04:35.306185] [D] [thread 130497] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:04:35.307698] [D] [thread 130497] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10860000,10920000,100,1699869844393,1699869875306
10860000,10920000,13,1699869855117,1699869875306
[m
[36m[10:04:35.847367] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:36.776638] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:36.777176] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:36.777973] [D] [thread 130802] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:36.778087] [I] [thread 130802] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:36.778110] [I] [thread 130802] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:36.778239] [I] [thread 130802] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:36.778269] [I] [thread 130802] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:36.988036] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:36.988568] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:37.989765] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:38.980382] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:38.980707] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:38.982366] [D] [thread 130807] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:38.982446] [I] [thread 130807] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:38.982462] [I] [thread 130807] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:38.982569] [I] [thread 130807] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:38.982581] [I] [thread 130807] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:39.164917] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:39.165500] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:40.166876] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:41.126069] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:41.126470] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:41.128075] [D] [thread 130812] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:41.128170] [I] [thread 130812] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:41.128188] [I] [thread 130812] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:41.128303] [I] [thread 130812] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:41.128316] [I] [thread 130812] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:41.389211] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:41.389595] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:42.390869] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:43.348947] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:43.349325] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:43.350272] [D] [thread 130817] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:43.350368] [I] [thread 130817] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:43.350387] [I] [thread 130817] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:43.350506] [I] [thread 130817] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:43.350521] [I] [thread 130817] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:43.612515] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:43.613027] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:44.614215] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:45.611334] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:45.611664] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:45.612782] [D] [thread 130822] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:45.612883] [I] [thread 130822] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:45.612901] [I] [thread 130822] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:45.613017] [I] [thread 130822] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:45.613037] [I] [thread 130822] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:45.781918] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:45.782272] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:46.783632] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:47.738773] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:47.739094] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:47.740193] [D] [thread 130827] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:47.740294] [I] [thread 130827] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:47.740312] [I] [thread 130827] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:47.740462] [I] [thread 130827] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:47.740479] [I] [thread 130827] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:47.889033] [D] [thread 130495] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:04:47.889142] [D] [thread 130495] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:04:47.890665] [D] [thread 130495] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10920000,10980000,54,1699869869678,1699869887889
10920000,10980000,63,1699869868877,1699869887889
[m
[36m[10:04:47.950469] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:47.950830] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:48.952196] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:49.953457] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:49.958715] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:49.959264] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:49.960063] [D] [thread 130832] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:49.960156] [I] [thread 130832] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:49.960175] [I] [thread 130832] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:49.960289] [I] [thread 130832] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:49.960302] [I] [thread 130832] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:50.175829] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:50.176465] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:51.177789] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:52.133843] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:52.134584] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:52.135254] [D] [thread 130838] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:52.135344] [I] [thread 130838] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:52.135363] [I] [thread 130838] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:52.135482] [I] [thread 130838] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:52.135495] [I] [thread 130838] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:52.350394] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:52.350765] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:53.352013] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:53.837532] [D] [thread 130496] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:04:53.837622] [D] [thread 130496] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:04:53.839066] [D] [thread 130496] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10920000,10980000,100,1699869861308,1699869893837
10920000,10980000,13,1699869875124,1699869893837
[m
[36m[10:04:54.353275] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:54.363371] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:54.363693] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:54.365475] [D] [thread 130843] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:54.365575] [I] [thread 130843] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:54.365594] [I] [thread 130843] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:54.365712] [I] [thread 130843] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:54.365726] [I] [thread 130843] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:54.552158] [D] [thread 130494] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:04:54.552275] [D] [thread 130494] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:04:54.553908] [D] [thread 130494] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10920000,10980000,47,1699869871091,1699869894552
10920000,10980000,24,1699869874626,1699869894552
[m
[36m[10:04:54.582727] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:54.583101] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:55.584395] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:56.561753] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:56.562077] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:56.563191] [D] [thread 130851] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:56.563293] [I] [thread 130851] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:56.563312] [I] [thread 130851] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:56.563431] [I] [thread 130851] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:56.563455] [I] [thread 130851] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:56.778114] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:56.778465] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:57.779723] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:58.766635] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:58.766961] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:58.768057] [D] [thread 130857] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:04:58.768158] [I] [thread 130857] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:58.768177] [I] [thread 130857] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:04:58.768296] [I] [thread 130857] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:04:58.768354] [I] [thread 130857] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:04:58.985371] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:58.985717] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:04:59.987073] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:00.988369] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:01.003372] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:01.003694] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:01.004833] [D] [thread 130862] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:01.004932] [I] [thread 130862] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:01.004949] [I] [thread 130862] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:01.005068] [I] [thread 130862] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:01.005155] [I] [thread 130862] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:01.234947] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:01.235291] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:02.236491] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:03.160152] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:03.160547] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:03.161640] [D] [thread 130867] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:03.161762] [I] [thread 130867] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:03.161781] [I] [thread 130867] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:03.161906] [I] [thread 130867] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:03.161925] [I] [thread 130867] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:03.422828] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:03.423171] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:04.424409] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:05.425698] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:05.451990] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:05.452528] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:05.453608] [D] [thread 130872] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:05.453745] [I] [thread 130872] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:05.453766] [I] [thread 130872] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:05.454045] [I] [thread 130872] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:05.454158] [I] [thread 130872] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:05.602910] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:05.603448] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:06.269845] [D] [thread 130497] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:05:06.269937] [D] [thread 130497] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:05:06.271148] [D] [thread 130497] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10980000,11040000,54,1699869887731,1699869906270
10980000,11040000,63,1699869886376,1699869906270
[m
[36m[10:05:06.604690] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:07.565127] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:07.565786] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:07.566460] [D] [thread 130877] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:07.566531] [I] [thread 130877] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:07.566546] [I] [thread 130877] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:07.566656] [I] [thread 130877] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:07.566667] [I] [thread 130877] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:07.761931] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:07.762274] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:08.763522] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:09.764847] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:09.826135] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:09.826554] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:09.827572] [D] [thread 130882] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:09.827666] [I] [thread 130882] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:09.827685] [I] [thread 130882] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:09.827803] [I] [thread 130882] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:09.827817] [I] [thread 130882] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:09.986062] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:09.986390] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:10.987605] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:11.957904] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:11.958281] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:11.960035] [D] [thread 130887] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:11.960155] [I] [thread 130887] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:11.960176] [I] [thread 130887] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:11.960313] [I] [thread 130887] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:11.960377] [I] [thread 130887] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:12.174700] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:12.175066] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:12.969275] [D] [thread 130495] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:05:12.969386] [D] [thread 130495] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:05:12.970944] [D] [thread 130495] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10980000,11040000,100,1699869879098,1699869912969
10980000,11040000,13,1699869893675,1699869912969
[m
[36m[10:05:13.176227] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:14.031501] [D] [thread 130496] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:05:14.031613] [D] [thread 130496] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:05:14.033198] [D] [thread 130496] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 10980000,11040000,47,1699869889997,1699869914031
10980000,11040000,24,1699869894392,1699869914031
[m
[36m[10:05:14.176476] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:14.178944] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:14.179296] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:14.180313] [D] [thread 130892] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:14.180430] [I] [thread 130892] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:14.180447] [I] [thread 130892] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:14.180564] [I] [thread 130892] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:14.180578] [I] [thread 130892] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:14.397438] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:14.397815] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:15.399068] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:16.329984] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:16.330348] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:16.331370] [D] [thread 130897] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:16.331485] [I] [thread 130897] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:16.331505] [I] [thread 130897] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:16.331636] [I] [thread 130897] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:16.331655] [I] [thread 130897] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:16.597212] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:16.597566] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:17.598785] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:18.570433] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:18.570801] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:18.571883] [D] [thread 130903] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:18.571989] [I] [thread 130903] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:18.572008] [I] [thread 130903] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:18.572123] [I] [thread 130903] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:18.572139] [I] [thread 130903] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:18.738058] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:18.738428] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:19.739677] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:20.740497] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:20.746179] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:20.746799] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:20.747522] [D] [thread 130910] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:20.747615] [I] [thread 130910] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:20.747632] [I] [thread 130910] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:20.747750] [I] [thread 130910] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:20.747764] [I] [thread 130910] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:20.961778] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:20.962403] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:21.963654] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:22.939160] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:22.939711] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:22.940576] [D] [thread 130915] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:22.940673] [I] [thread 130915] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:22.940692] [I] [thread 130915] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:22.940812] [I] [thread 130915] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:22.940825] [I] [thread 130915] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:23.107093] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:23.107663] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:24.108970] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:24.669091] [D] [thread 130494] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:05:24.669194] [D] [thread 130494] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:05:24.670727] [D] [thread 130494] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11040000,11100000,63,1699869904480,1699869924669
11040000,11100000,54,1699869906132,1699869924669
[m
[36m[10:05:25.082163] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:25.082532] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:25.084079] [D] [thread 130921] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:25.084178] [I] [thread 130921] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:25.084197] [I] [thread 130921] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:25.084347] [I] [thread 130921] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:25.084369] [I] [thread 130921] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:25.300776] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:25.301127] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:26.302298] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:27.231239] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:27.231558] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:27.232612] [D] [thread 130928] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:27.232729] [I] [thread 130928] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:27.232750] [I] [thread 130928] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:27.232883] [I] [thread 130928] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:27.232906] [I] [thread 130928] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:27.450059] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:27.450462] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:28.451727] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:29.413530] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:29.413904] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:29.415748] [D] [thread 130933] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:29.415873] [I] [thread 130933] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:29.415892] [I] [thread 130933] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:29.416012] [I] [thread 130933] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:29.416026] [I] [thread 130933] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:29.575296] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:29.575666] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:30.576875] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:31.578161] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:31.610969] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:31.611331] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:31.612396] [D] [thread 130938] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:31.612487] [I] [thread 130938] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:31.612506] [I] [thread 130938] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:31.612625] [I] [thread 130938] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:31.612640] [I] [thread 130938] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:31.875923] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:31.876607] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:32.093489] [D] [thread 130497] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:05:32.093596] [D] [thread 130497] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:05:32.095131] [D] [thread 130497] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11040000,11100000,100,1699869895087,1699869932093
11040000,11100000,13,1699869912776,1699869932093
[m
[36m[10:05:32.877881] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:33.201205] [D] [thread 130495] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:05:33.201305] [D] [thread 130495] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:05:33.202655] [D] [thread 130495] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11040000,11100000,47,1699869908894,1699869933201
11040000,11100000,24,1699869913833,1699869933201
[m
[36m[10:05:33.812701] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:33.813311] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:33.814009] [D] [thread 130943] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:33.814101] [I] [thread 130943] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:33.814120] [I] [thread 130943] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:33.814237] [I] [thread 130943] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:33.814250] [I] [thread 130943] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:34.070389] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:34.070811] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:35.072074] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:36.018626] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:36.019239] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:36.020005] [D] [thread 130948] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:36.020100] [I] [thread 130948] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:36.020120] [I] [thread 130948] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:36.020234] [I] [thread 130948] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:36.020249] [I] [thread 130948] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:36.195750] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:36.196518] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:37.197769] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:38.194429] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:38.194796] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:38.195741] [D] [thread 130953] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:38.195836] [I] [thread 130953] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:38.195856] [I] [thread 130953] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:38.195972] [I] [thread 130953] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:38.195987] [I] [thread 130953] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:38.436423] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:38.436787] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:39.438017] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:40.388019] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:40.388729] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:40.389444] [D] [thread 130958] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:40.389534] [I] [thread 130958] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:40.389551] [I] [thread 130958] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:40.389668] [I] [thread 130958] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:40.389681] [I] [thread 130958] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:40.582939] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:40.583454] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:41.584704] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:42.585793] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:42.586256] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:42.587078] [D] [thread 130963] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:42.587173] [I] [thread 130963] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:42.587190] [I] [thread 130963] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:42.587307] [I] [thread 130963] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:42.587323] [I] [thread 130963] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:42.806191] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:42.806706] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:43.663852] [D] [thread 130496] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:05:43.663960] [D] [thread 130496] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:05:43.665517] [D] [thread 130496] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11100000,11160000,54,1699869924529,1699869943664
11100000,11160000,63,1699869921432,1699869943664
[m
[36m[10:05:43.807985] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:44.786104] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:44.786745] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:44.787476] [D] [thread 130968] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:44.787568] [I] [thread 130968] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:44.787585] [I] [thread 130968] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:44.787703] [I] [thread 130968] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:44.787717] [I] [thread 130968] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:45.002912] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:45.003498] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:46.004812] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:46.990012] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:46.990702] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:46.991447] [D] [thread 130973] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:46.991537] [I] [thread 130973] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:46.991555] [I] [thread 130973] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:46.991671] [I] [thread 130973] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:46.991684] [I] [thread 130973] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:47.206588] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:47.207055] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:48.208426] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:49.209736] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:49.246525] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:49.247161] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:49.247828] [D] [thread 130978] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:49.247924] [I] [thread 130978] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:49.247943] [I] [thread 130978] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:49.248061] [I] [thread 130978] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:49.248077] [I] [thread 130978] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:49.417813] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:49.418334] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:50.420089] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:51.403422] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:51.403980] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:51.404837] [D] [thread 130983] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:51.404937] [I] [thread 130983] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:51.404955] [I] [thread 130983] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:51.405070] [I] [thread 130983] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:51.405083] [I] [thread 130983] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:51.612164] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:51.612707] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:51.830008] [D] [thread 130494] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:05:51.830114] [D] [thread 130494] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:05:51.831649] [D] [thread 130494] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11100000,11160000,100,1699869911418,1699869951830
11100000,11160000,13,1699869931939,1699869951830
[m
[36m[10:05:52.613926] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:52.976693] [D] [thread 130497] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:05:52.976790] [D] [thread 130497] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:05:52.978137] [D] [thread 130497] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11100000,11160000,47,1699869927445,1699869952976
11100000,11160000,24,1699869933016,1699869952976
[m
[36m[10:05:53.527028] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:53.527500] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:53.528603] [D] [thread 130988] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:53.528716] [I] [thread 130988] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:53.528737] [I] [thread 130988] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:53.528866] [I] [thread 130988] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:53.528883] [I] [thread 130988] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:53.741262] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:53.741871] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:54.743128] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:55.736771] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:55.737373] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:55.738176] [D] [thread 130995] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:55.738276] [I] [thread 130995] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:55.738295] [I] [thread 130995] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:55.738411] [I] [thread 130995] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:55.738424] [I] [thread 130995] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:55.946604] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:55.947173] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:56.948418] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:57.946412] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:57.947053] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:57.947786] [D] [thread 131000] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:05:57.947879] [I] [thread 131000] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:57.947897] [I] [thread 131000] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:05:57.948015] [I] [thread 131000] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:05:57.948028] [I] [thread 131000] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:05:58.209360] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:58.209750] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:05:59.210994] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:00.160480] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:00.160830] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:00.161841] [D] [thread 131006] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:00.161916] [I] [thread 131006] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:00.161932] [I] [thread 131006] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:00.162041] [I] [thread 131006] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:00.162053] [I] [thread 131006] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:00.330990] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:00.331321] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:01.151777] [D] [thread 130495] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:06:01.151885] [D] [thread 130495] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:06:01.153482] [D] [thread 130495] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11160000,11220000,63,1699869939864,1699869961151
11160000,11220000,54,1699869943458,1699869961151
[m
[36m[10:06:01.332682] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:02.274226] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:02.274616] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:02.275646] [D] [thread 131011] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:02.275749] [I] [thread 131011] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:02.275767] [I] [thread 131011] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:02.275885] [I] [thread 131011] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:02.275913] [I] [thread 131011] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:02.489554] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:02.489918] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:03.491147] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:04.492522] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:04.518839] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:04.519203] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:04.520411] [D] [thread 131017] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:04.520500] [I] [thread 131017] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:04.520518] [I] [thread 131017] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:04.520637] [I] [thread 131017] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:04.520650] [I] [thread 131017] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:04.692656] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:04.692980] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:05.694186] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:06.689937] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:06.690321] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:06.691430] [D] [thread 131022] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:06.691524] [I] [thread 131022] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:06.691542] [I] [thread 131022] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:06.691661] [I] [thread 131022] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:06.691675] [I] [thread 131022] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:06.954864] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:06.955242] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:07.956514] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:08.944535] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:08.944869] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:08.945883] [D] [thread 131027] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:08.945980] [I] [thread 131027] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:08.945998] [I] [thread 131027] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:08.946115] [I] [thread 131027] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:08.946127] [I] [thread 131027] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:09.158421] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:09.158781] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:09.369273] [D] [thread 130496] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:06:09.369382] [D] [thread 130496] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:06:09.370857] [D] [thread 130496] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11160000,11220000,47,1699869946295,1699869969369
11160000,11220000,24,1699869952771,1699869969369
[m
[36m[10:06:10.160012] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:11.086737] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:11.087076] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:11.088295] [D] [thread 131032] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:11.088469] [I] [thread 131032] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:11.088485] [I] [thread 131032] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:11.088595] [I] [thread 131032] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:11.088606] [I] [thread 131032] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:11.274099] [D] [thread 130494] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:06:11.274207] [D] [thread 130494] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:06:11.275737] [D] [thread 130494] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11160000,11220000,100,1699869924917,1699869971274
11160000,11220000,13,1699869951657,1699869971274
[m
[36m[10:06:11.420694] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:11.421025] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:12.422204] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:13.401840] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:13.402173] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:13.403301] [D] [thread 131037] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:13.403404] [I] [thread 131037] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:13.403421] [I] [thread 131037] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:13.403538] [I] [thread 131037] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:13.403595] [I] [thread 131037] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:13.616479] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:13.616971] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:14.618267] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:15.606500] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:15.607032] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:15.607873] [D] [thread 131042] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:15.607967] [I] [thread 131042] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:15.607985] [I] [thread 131042] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:15.608101] [I] [thread 131042] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:15.608114] [I] [thread 131042] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:15.781966] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:15.782675] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:16.784006] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:17.785251] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:17.834776] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:17.835241] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:17.836132] [D] [thread 131047] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:17.836225] [I] [thread 131047] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:17.836244] [I] [thread 131047] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:17.836396] [I] [thread 131047] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:17.836413] [I] [thread 131047] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:18.028727] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:18.029248] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:18.030519] [D] [thread 130497] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:06:18.030589] [D] [thread 130497] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:06:18.031420] [D] [thread 130497] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11220000,11280000,63,1699869955575,1699869978030
11220000,11280000,54,1699869960977,1699869978030
[m
[36m[10:06:19.030572] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:19.994463] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:19.995632] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:19.996185] [D] [thread 131052] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:19.996274] [I] [thread 131052] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:19.996293] [I] [thread 131052] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:19.996447] [I] [thread 131052] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:19.996465] [I] [thread 131052] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:20.214740] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:20.215238] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:21.216556] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:22.217829] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:22.239539] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:22.240216] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:22.244864] [D] [thread 131057] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:22.244992] [I] [thread 131057] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:22.245011] [I] [thread 131057] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:22.245137] [I] [thread 131057] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:22.245155] [I] [thread 131057] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:22.514278] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:22.514926] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:23.516177] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:24.487901] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:24.489093] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:24.489716] [D] [thread 131062] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:24.489816] [I] [thread 131062] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:24.489835] [I] [thread 131062] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:24.489980] [I] [thread 131062] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:24.490013] [I] [thread 131062] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:24.674973] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:24.675311] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:25.676480] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:26.656354] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:26.656731] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:26.657767] [D] [thread 131067] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:26.657868] [I] [thread 131067] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:26.657886] [I] [thread 131067] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:26.658003] [I] [thread 131067] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:26.658017] [I] [thread 131067] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:26.822212] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:26.822885] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:27.019764] [D] [thread 130495] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:06:27.019871] [D] [thread 130495] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:06:27.021473] [D] [thread 130495] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11220000,11280000,47,1699869964600,1699869987019
11220000,11280000,24,1699869969161,1699869987019
[m
[36m[10:06:27.824114] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:28.813370] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:28.813708] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:28.814865] [D] [thread 131072] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:28.814964] [I] [thread 131072] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:28.814981] [I] [thread 131072] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:28.815098] [I] [thread 131072] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:28.815112] [I] [thread 131072] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:29.038613] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:29.038953] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:29.506020] [D] [thread 130496] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:06:29.506127] [D] [thread 130496] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:06:29.507653] [D] [thread 130496] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11220000,11280000,100,1699869941904,1699869989506
11220000,11280000,13,1699869971134,1699869989506
[m
[36m[10:06:30.040195] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:30.950436] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:30.951102] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:30.951832] [D] [thread 131077] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:30.951924] [I] [thread 131077] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:30.951942] [I] [thread 131077] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:30.952058] [I] [thread 131077] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:30.952071] [I] [thread 131077] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:31.207981] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:31.208516] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:32.209771] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:33.133089] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:33.133417] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:33.134523] [D] [thread 131083] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:33.134628] [I] [thread 131083] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:33.134646] [I] [thread 131083] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:33.134764] [I] [thread 131083] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:33.134788] [I] [thread 131083] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:33.345941] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:33.346277] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:34.347531] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:35.348782] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:35.361206] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:35.361557] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:35.362596] [D] [thread 131089] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:35.362695] [I] [thread 131089] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:35.362715] [I] [thread 131089] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:35.362832] [I] [thread 131089] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:35.362848] [I] [thread 131089] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:35.621561] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:35.621929] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:36.623135] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:36.717469] [D] [thread 130494] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:06:36.717574] [D] [thread 130494] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:06:36.719097] [D] [thread 130494] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11280000,11340000,63,1699869973072,1699869996717
11280000,11340000,54,1699869977890,1699869996717
[m
[36m[10:06:37.621522] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:37.621890] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:37.623599] [D] [thread 131094] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:37.623699] [I] [thread 131094] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:37.623717] [I] [thread 131094] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:37.623834] [I] [thread 131094] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:37.623847] [I] [thread 131094] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:37.787467] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:37.787845] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:38.789069] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:39.756793] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:39.757160] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:39.758805] [D] [thread 131100] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:39.758906] [I] [thread 131100] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:39.758924] [I] [thread 131100] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:39.759042] [I] [thread 131100] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:39.759067] [I] [thread 131100] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:39.972256] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:39.972638] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:40.973852] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:41.947247] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:41.947618] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:41.949329] [D] [thread 131106] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:41.949430] [I] [thread 131106] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:41.949449] [I] [thread 131106] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:41.949568] [I] [thread 131106] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:41.949583] [I] [thread 131106] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:42.166518] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:42.166872] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:43.168075] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:44.139697] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:44.140048] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:44.141216] [D] [thread 131111] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:44.141321] [I] [thread 131111] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:44.141341] [I] [thread 131111] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:44.141458] [I] [thread 131111] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:44.141478] [I] [thread 131111] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:44.354065] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:44.354417] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:45.301068] [D] [thread 130497] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:06:45.301180] [D] [thread 130497] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:06:45.302703] [D] [thread 130497] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11280000,11340000,47,1699869983198,1699870005301
11280000,11340000,24,1699869986869,1699870005301
[m
[36m[10:06:45.355624] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:46.328171] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:46.328902] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:46.330045] [D] [thread 131116] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:46.330162] [I] [thread 131116] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:46.330182] [I] [thread 131116] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:46.330319] [I] [thread 131116] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:46.330334] [I] [thread 131116] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:46.547606] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:46.548074] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:47.549400] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:48.317366] [D] [thread 130495] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:06:48.317475] [D] [thread 130495] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:06:48.319000] [D] [thread 130495] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11280000,11340000,100,1699869958783,1699870008317
11280000,11340000,13,1699869989320,1699870008317
[m
[36m[10:06:48.550627] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:48.561603] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:48.561968] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:48.563016] [D] [thread 131121] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:48.563139] [I] [thread 131121] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:48.563158] [I] [thread 131121] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:48.563286] [I] [thread 131121] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:48.563304] [I] [thread 131121] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:48.834260] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:48.834616] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:49.835832] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:50.823004] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:50.823330] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:50.824609] [D] [thread 131126] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:50.824729] [I] [thread 131126] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:50.824750] [I] [thread 131126] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:50.824876] [I] [thread 131126] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:50.824894] [I] [thread 131126] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:51.025822] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:51.026187] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:52.027378] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:52.939172] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:52.939526] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:52.940611] [D] [thread 131132] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:52.940711] [I] [thread 131132] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:52.940730] [I] [thread 131132] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:52.940847] [I] [thread 131132] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:52.940867] [I] [thread 131132] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:53.113007] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:53.113363] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:54.114607] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:55.097849] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:55.098193] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:55.099389] [D] [thread 131138] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:55.099465] [I] [thread 131138] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:55.099481] [I] [thread 131138] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:55.099588] [I] [thread 131138] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:55.099601] [I] [thread 131138] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:55.111541] [D] [thread 130496] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:06:55.111602] [D] [thread 130496] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:06:55.112440] [D] [thread 130496] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11340000,11400000,63,1699869989992,1699870015111
11340000,11400000,54,1699869996557,1699870015111
[m
[36m[10:06:55.290240] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:55.290644] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:56.291902] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:57.292497] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:57.304972] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:57.305363] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:57.306472] [D] [thread 131145] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:57.306569] [I] [thread 131145] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:57.306587] [I] [thread 131145] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:57.306706] [I] [thread 131145] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:57.306719] [I] [thread 131145] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:57.577936] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:57.578303] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:58.579667] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:59.557945] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:59.558269] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:59.559247] [D] [thread 131151] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:06:59.559343] [I] [thread 131151] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:59.559362] [I] [thread 131151] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:06:59.559478] [I] [thread 131151] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:06:59.559491] [I] [thread 131151] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:06:59.767941] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:06:59.768277] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:00.769514] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:01.749769] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:01.750101] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:01.751102] [D] [thread 131158] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:01.751197] [I] [thread 131158] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:01.751216] [I] [thread 131158] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:01.751335] [I] [thread 131158] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:01.751350] [I] [thread 131158] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:02.008432] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:02.008763] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:03.010122] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:03.220285] [D] [thread 130494] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:07:03.220391] [D] [thread 130494] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:07:03.221310] [D] [thread 130494] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11340000,11400000,47,1699870002085,1699870023220
11340000,11400000,24,1699870005114,1699870023220
[m
[36m[10:07:04.011377] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:04.056445] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:04.056818] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:04.058099] [D] [thread 131165] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:04.058195] [I] [thread 131165] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:04.058212] [I] [thread 131165] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:04.058329] [I] [thread 131165] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:04.058341] [I] [thread 131165] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:04.252308] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:04.252676] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:05.253906] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:06.203058] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:06.203405] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:06.204746] [D] [thread 131173] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:06.204828] [I] [thread 131173] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:06.204845] [I] [thread 131173] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:06.204952] [I] [thread 131173] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:06.204964] [I] [thread 131173] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:06.421666] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:06.422050] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:06.834400] [D] [thread 130497] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:07:06.834610] [D] [thread 130497] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:07:06.835929] [D] [thread 130497] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11340000,11400000,100,1699869975394,1699870026834
11340000,11400000,13,1699870008159,1699870026834
[m
[36m[10:07:07.423297] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:08.354472] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:08.354871] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:08.355942] [D] [thread 131178] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:08.356038] [I] [thread 131178] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:08.356056] [I] [thread 131178] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:08.356171] [I] [thread 131178] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:08.356184] [I] [thread 131178] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:08.572252] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:08.572670] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:09.573922] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:10.571795] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:10.572139] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:10.573118] [D] [thread 131183] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:10.573219] [I] [thread 131183] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:10.573237] [I] [thread 131183] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:10.573356] [I] [thread 131183] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:10.573370] [I] [thread 131183] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:10.791916] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:10.792263] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:11.793503] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:12.766718] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:12.767336] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:12.768111] [D] [thread 131188] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:12.768208] [I] [thread 131188] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:12.768227] [I] [thread 131188] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:12.768379] [I] [thread 131188] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:12.768397] [I] [thread 131188] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:12.973716] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:12.974106] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:13.516657] [D] [thread 130495] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:07:13.516763] [D] [thread 130495] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:07:13.518286] [D] [thread 130495] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11400000,11460000,63,1699870006613,1699870033516
11400000,11460000,54,1699870014921,1699870033516
[m
[36m[10:07:13.975334] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:14.896418] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:14.896760] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:14.898106] [D] [thread 131193] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:14.898230] [I] [thread 131193] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:14.898250] [I] [thread 131193] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:14.898375] [I] [thread 131193] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:14.898400] [I] [thread 131193] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:15.093654] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:15.094000] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:16.095169] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:17.071448] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:17.071818] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:17.073116] [D] [thread 131199] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:17.073193] [I] [thread 131199] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:17.073210] [I] [thread 131199] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:17.073318] [I] [thread 131199] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:17.073331] [I] [thread 131199] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:17.289755] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:17.290145] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:18.291395] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:19.260690] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:19.261040] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:19.262221] [D] [thread 131205] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:19.262317] [I] [thread 131205] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:19.262335] [I] [thread 131205] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:19.262451] [I] [thread 131205] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:19.262465] [I] [thread 131205] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:19.522683] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:19.523023] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:20.524264] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:21.490189] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:21.490826] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:21.491515] [D] [thread 131210] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:21.491610] [I] [thread 131210] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:21.491627] [I] [thread 131210] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:21.491744] [I] [thread 131210] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:21.491757] [I] [thread 131210] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:21.709668] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:21.710263] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:21.778396] [D] [thread 130496] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:07:21.778469] [D] [thread 130496] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:07:21.779421] [D] [thread 130496] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11400000,11460000,24,1699870023069,1699870041778
11400000,11460000,47,1699870020966,1699870041778
[m
[36m[10:07:22.711515] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:23.677460] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:23.677803] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:23.678996] [D] [thread 131215] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:23.679093] [I] [thread 131215] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:23.679110] [I] [thread 131215] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:23.679228] [I] [thread 131215] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:23.679242] [I] [thread 131215] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:23.829326] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:23.829930] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:24.831368] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:25.657818] [D] [thread 130494] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:07:25.657922] [D] [thread 130494] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:07:25.659454] [D] [thread 130494] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11400000,11460000,100,1699869992256,1699870045658
11400000,11460000,13,1699870026648,1699870045658
[m
[36m[10:07:25.832677] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:25.866794] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:25.867434] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:25.868183] [D] [thread 131220] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:25.868274] [I] [thread 131220] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:25.868292] [I] [thread 131220] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:25.868449] [I] [thread 131220] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:25.868468] [I] [thread 131220] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:26.041450] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:26.041777] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:27.042957] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:28.026001] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:28.026356] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:28.027433] [D] [thread 131225] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:28.027534] [I] [thread 131225] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:28.027552] [I] [thread 131225] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:28.027670] [I] [thread 131225] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:28.027694] [I] [thread 131225] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:28.254082] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:28.254476] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:29.255689] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:30.238829] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:30.239182] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:30.240251] [D] [thread 131230] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:30.240365] [I] [thread 131230] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:30.240385] [I] [thread 131230] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:30.240494] [I] [thread 131230] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:30.240506] [I] [thread 131230] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:30.380423] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:30.380889] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:31.382281] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:32.182700] [D] [thread 130497] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:07:32.182776] [D] [thread 130497] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:07:32.183582] [D] [thread 130497] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11460000,11520000,63,1699870021358,1699870052182
11460000,11520000,54,1699870033356,1699870052182
[m
[36m[10:07:32.383560] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:32.391262] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:32.391636] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:32.393263] [D] [thread 131236] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:32.393363] [I] [thread 131236] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:32.393381] [I] [thread 131236] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:32.393497] [I] [thread 131236] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:32.393511] [I] [thread 131236] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:32.605978] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:32.606305] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:33.607533] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:34.586118] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:34.586499] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:34.587864] [D] [thread 131241] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:34.587961] [I] [thread 131241] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:34.587978] [I] [thread 131241] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:34.588097] [I] [thread 131241] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:34.588109] [I] [thread 131241] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:34.802668] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:34.803021] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:35.804278] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:36.805648] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:36.869174] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:36.869529] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:36.870489] [D] [thread 131246] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:36.870617] [I] [thread 131246] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:36.870636] [I] [thread 131246] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:36.870754] [I] [thread 131246] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:36.870780] [I] [thread 131246] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:37.041896] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:37.042225] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:38.043478] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:39.008347] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:39.008677] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:39.009715] [D] [thread 131251] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:39.009829] [I] [thread 131251] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:39.009849] [I] [thread 131251] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:39.009966] [I] [thread 131251] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:39.009983] [I] [thread 131251] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:39.268757] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:39.269114] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:40.270341] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:40.635888] [D] [thread 130495] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:07:40.635996] [D] [thread 130495] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:07:40.637587] [D] [thread 130495] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11460000,11520000,47,1699870039515,1699870060636
11460000,11520000,24,1699870041569,1699870060636
[m
[36m[10:07:41.271585] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:41.317243] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:41.317604] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:41.318619] [D] [thread 131256] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:41.318784] [I] [thread 131256] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:41.318803] [I] [thread 131256] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:41.318929] [I] [thread 131256] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:41.318946] [I] [thread 131256] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:41.509845] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:41.510199] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:42.511388] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:43.433303] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:43.433679] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:43.435249] [D] [thread 131261] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:43.435347] [I] [thread 131261] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:43.435365] [I] [thread 131261] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:43.435482] [I] [thread 131261] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:43.435496] [I] [thread 131261] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:43.643247] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:43.643647] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:44.645000] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:45.393074] [D] [thread 130496] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:07:45.393183] [D] [thread 130496] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:07:45.394705] [D] [thread 130496] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11460000,11520000,100,1699870007659,1699870065393
11460000,11520000,13,1699870045504,1699870065393
[m
[36m[10:07:45.570352] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:45.570733] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:45.571714] [D] [thread 131266] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:45.571813] [I] [thread 131266] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:45.571831] [I] [thread 131266] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:45.571949] [I] [thread 131266] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:45.571972] [I] [thread 131266] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:45.789725] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:45.790079] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:46.791316] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:47.783079] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:47.783639] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:47.784501] [D] [thread 131271] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:47.784598] [I] [thread 131271] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:47.784616] [I] [thread 131271] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:47.784733] [I] [thread 131271] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:47.784746] [I] [thread 131271] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:48.050579] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:48.051054] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:49.052480] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:50.053711] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:50.057748] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:50.058395] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:50.059139] [D] [thread 131276] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:50.059230] [I] [thread 131276] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:50.059248] [I] [thread 131276] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:50.059365] [I] [thread 131276] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:50.059379] [I] [thread 131276] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:50.276925] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:50.277262] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:50.576859] [D] [thread 130494] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:07:50.576961] [D] [thread 130494] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:07:50.578328] [D] [thread 130494] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11520000,11580000,63,1699870037367,1699870070577
11520000,11580000,54,1699870052005,1699870070577
[m
[36m[10:07:51.278492] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:52.202740] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:52.203370] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:52.204081] [D] [thread 131281] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:52.204150] [I] [thread 131281] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:52.204166] [I] [thread 131281] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:52.204274] [I] [thread 131281] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:52.204286] [I] [thread 131281] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:52.423077] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:52.423555] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:53.424885] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:54.402081] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:54.402791] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:54.403482] [D] [thread 131286] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:54.403572] [I] [thread 131286] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:54.403590] [I] [thread 131286] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:54.403705] [I] [thread 131286] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:54.403719] [I] [thread 131286] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:54.625595] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:54.626001] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:55.627210] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:56.544406] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:56.544753] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:56.545757] [D] [thread 131291] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:56.545875] [I] [thread 131291] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:56.545894] [I] [thread 131291] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:56.546014] [I] [thread 131291] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:56.546042] [I] [thread 131291] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:56.714177] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:56.714565] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:57.715821] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:58.716512] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:58.722511] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:58.722838] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:58.723885] [D] [thread 131296] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:07:58.723978] [I] [thread 131296] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:58.723997] [I] [thread 131296] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:07:58.724112] [I] [thread 131296] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:07:58.724126] [I] [thread 131296] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:07:58.987134] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:58.987479] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:07:59.988727] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:08:00.426868] [D] [thread 130497] [FileSink.cpp:112] [writeDataToFile] FileSink: getSchema medium FileSink() format CSV_FORMAT mode APPEND[m
[36m[10:08:00.426976] [D] [thread 130497] [FileSink.cpp:126] [writeDataToFile] FileSink::getData: schema already written[m
[36m[10:08:00.428587] [D] [thread 130497] [FileSink.cpp:130] [writeDataToFile] FileSink::getData: writing to file /home/ubuntu/nemoDebsThreeLevel_tumbling_1_32000_200.out following content 11520000,11580000,47,1699870058439,1699870080427
11520000,11580000,24,1699870060439,1699870080427
[m
[36m[10:08:00.914006] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:08:00.914355] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:08:00.915405] [D] [thread 131301] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:08:00.915506] [I] [thread 131301] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:08:00.915525] [I] [thread 131301] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:08:00.915641] [I] [thread 131301] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:08:00.915703] [I] [thread 131301] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:08:01.128102] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:08:01.128593] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:08:02.129874] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:08:03.090450] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:08:03.090801] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:08:03.092485] [D] [thread 131306] [QueryCatalogController.hpp:160] [getNumberOfProducedBuffers] getNumberOfProducedBuffers called[m
[32m[10:08:03.092569] [I] [thread 131306] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:08:03.092586] [I] [thread 131306] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[32m[10:08:03.092697] [I] [thread 131306] [NesCoordinator.cpp:360] [getQueryStatistics] NesCoordinator: Get query statistics for query Id 1[m
[32m[10:08:03.092710] [I] [thread 131306] [NodeEngine.cpp:471] [getQueryStatistics] QueryManager: Get query statistics for query 1[m
[36m[10:08:03.309526] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:08:03.309890] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:08:03.474914] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[36m[10:08:03.475239] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[32m[10:08:03.476261] [I] [thread 131310] [QueryCatalogService.cpp:65] [checkAndMarkForHardStop] QueryCatalogService: Handle hard stop request.[m
[36m[10:08:03.476379] [D] [thread 131310] [QueryCatalogService.cpp:83] [checkAndMarkForHardStop] QueryCatalog: Changing query status to Mark query for stop.[m
[32m[10:08:03.476518] [I] [thread 131310] [RequestQueue.cpp:25] [add] QueryRequestQueue: Adding a new query request : StopQueryRequest { QueryId: 1}[m
[32m[10:08:03.476536] [I] [thread 131310] [RequestQueue.cpp:28] [add] QueryCatalog: Marking that new request is available to be scheduled[m
[32m[10:08:03.476579] [I] [thread 130483] [RequestQueue.cpp:41] [getNextBatch] QueryRequestQueue: Fetching Queries to Schedule[m
[32m[10:08:03.476665] [I] [thread 130483] [RequestQueue.cpp:52] [getNextBatch] QueryRequestQueue: Optimizing 1 queryIdAndCatalogEntryMapping.[m
[32m[10:08:03.476688] [I] [thread 130483] [RequestProcessorService.cpp:91] [start] QueryProcessingService: Calling GlobalQueryPlanUpdatePhase[m
[32m[10:08:03.476735] [I] [thread 130483] [GlobalQueryPlanUpdatePhase.cpp:133] [processStopQueryRequest] QueryProcessingService: Request received for stopping the query 1[m
[36m[10:08:03.476750] [D] [thread 130483] [GlobalQueryPlan.cpp:45] [removeQuery] GlobalQueryPlan: Removing query information from the meta data[m
[36m[10:08:03.476797] [D] [thread 130483] [SharedQueryPlan.cpp:194] [removeQuery] SharedQueryPlan: Remove the Query Id 1 and associated Global Query Nodes with sink operators.[m
[36m[10:08:03.476964] [D] [thread 130483] [QueryPlan.cpp:191] [removeAsRootOperator] QueryPlan: removing operator SINK(5: {FileSinkDescriptor()}) as root operator.[m
[36m[10:08:03.477443] [D] [thread 130483] [GlobalQueryPlanUpdatePhase.cpp:123] [execute] GlobalQueryPlanUpdatePhase: Successfully updated global query plan[m
[36m[10:08:03.477469] [D] [thread 130483] [GlobalQueryPlan.cpp:88] [getSharedQueryPlansToDeploy] GlobalQueryPlan: Get the shared query plans to deploy.[m
[36m[10:08:03.477511] [D] [thread 130483] [GlobalQueryPlan.cpp:97] [getSharedQueryPlansToDeploy] GlobalQueryPlan: Found 1 Shared Query plan to be deployed.[m
[36m[10:08:03.477539] [D] [thread 130483] [RequestProcessorService.cpp:106] [start] QueryProcessingService: Updating Query Plan with global query id : 1[m
[36m[10:08:03.477549] [D] [thread 130483] [RequestProcessorService.cpp:162] [start] QueryProcessingService: Shared Query Plan is empty and an older version is already running.[m
[36m[10:08:03.477576] [D] [thread 130483] [QueryUndeploymentPhase.cpp:44] [execute] QueryUndeploymentPhase::stopAndUndeployQuery : queryId= 1[m
[36m[10:08:03.477595] [D] [thread 130483] [GlobalExecutionPlan.cpp:132] [getExecutionNodesByQueryId] GlobalExecutionPlan: Returning vector of Execution nodes for the query with id  1[m
[36m[10:08:03.477623] [D] [thread 130483] [QueryUndeploymentPhase.cpp:54] [execute] QueryUndeploymentPhase:removeQuery: stop query[m
[36m[10:08:03.477634] [D] [thread 130483] [QueryUndeploymentPhase.cpp:80] [stopQuery] QueryUndeploymentPhase:markQueryForStop queryId= 1[m
[36m[10:08:03.477766] [D] [thread 130483] [QueryUndeploymentPhase.cpp:93] [stopQuery] QueryUndeploymentPhase::markQueryForStop at execution node with id=5 and IP=192.168.2.32:34503[m
[36m[10:08:03.477794] [D] [thread 130483] [WorkerRPCClient.cpp:278] [stopQueryAsync] WorkerRPCClient::stopQueryAsync address=192.168.2.32:34503 queryId=1[m
[36m[10:08:03.483172] [D] [thread 130483] [QueryUndeploymentPhase.cpp:93] [stopQuery] QueryUndeploymentPhase::markQueryForStop at execution node with id=6 and IP=192.168.2.33:46447[m
[36m[10:08:03.483262] [D] [thread 130483] [WorkerRPCClient.cpp:278] [stopQueryAsync] WorkerRPCClient::stopQueryAsync address=192.168.2.33:46447 queryId=1[m
[36m[10:08:03.487635] [D] [thread 130483] [QueryUndeploymentPhase.cpp:93] [stopQuery] QueryUndeploymentPhase::markQueryForStop at execution node with id=2 and IP=192.168.2.12:35153[m
[36m[10:08:03.487765] [D] [thread 130483] [WorkerRPCClient.cpp:278] [stopQueryAsync] WorkerRPCClient::stopQueryAsync address=192.168.2.12:35153 queryId=1[m
[36m[10:08:03.492116] [D] [thread 130483] [QueryUndeploymentPhase.cpp:93] [stopQuery] QueryUndeploymentPhase::markQueryForStop at execution node with id=7 and IP=192.168.2.34:42085[m
[36m[10:08:03.492205] [D] [thread 130483] [WorkerRPCClient.cpp:278] [stopQueryAsync] WorkerRPCClient::stopQueryAsync address=192.168.2.34:42085 queryId=1[m
[36m[10:08:03.496645] [D] [thread 130483] [QueryUndeploymentPhase.cpp:93] [stopQuery] QueryUndeploymentPhase::markQueryForStop at execution node with id=8 and IP=192.168.2.35:39705[m
[36m[10:08:03.496725] [D] [thread 130483] [WorkerRPCClient.cpp:278] [stopQueryAsync] WorkerRPCClient::stopQueryAsync address=192.168.2.35:39705 queryId=1[m
[36m[10:08:03.501130] [D] [thread 130483] [QueryUndeploymentPhase.cpp:93] [stopQuery] QueryUndeploymentPhase::markQueryForStop at execution node with id=3 and IP=192.168.2.30:35153[m
[36m[10:08:03.501215] [D] [thread 130483] [WorkerRPCClient.cpp:278] [stopQueryAsync] WorkerRPCClient::stopQueryAsync address=192.168.2.30:35153 queryId=1[m
[36m[10:08:03.505580] [D] [thread 130483] [QueryUndeploymentPhase.cpp:93] [stopQuery] QueryUndeploymentPhase::markQueryForStop at execution node with id=9 and IP=192.168.2.37:38213[m
[36m[10:08:03.505667] [D] [thread 130483] [WorkerRPCClient.cpp:278] [stopQueryAsync] WorkerRPCClient::stopQueryAsync address=192.168.2.37:38213 queryId=1[m
[36m[10:08:03.510108] [D] [thread 130483] [QueryUndeploymentPhase.cpp:93] [stopQuery] QueryUndeploymentPhase::markQueryForStop at execution node with id=10 and IP=192.168.2.38:41905[m
[36m[10:08:03.510195] [D] [thread 130483] [WorkerRPCClient.cpp:278] [stopQueryAsync] WorkerRPCClient::stopQueryAsync address=192.168.2.38:41905 queryId=1[m
[36m[10:08:03.514612] [D] [thread 130483] [QueryUndeploymentPhase.cpp:93] [stopQuery] QueryUndeploymentPhase::markQueryForStop at execution node with id=4 and IP=192.168.2.31:42843[m
[36m[10:08:03.514701] [D] [thread 130483] [WorkerRPCClient.cpp:278] [stopQueryAsync] WorkerRPCClient::stopQueryAsync address=192.168.2.31:42843 queryId=1[m
[36m[10:08:03.518979] [D] [thread 130483] [QueryUndeploymentPhase.cpp:93] [stopQuery] QueryUndeploymentPhase::markQueryForStop at execution node with id=1 and IP=192.168.2.11:42713[m
[36m[10:08:03.519067] [D] [thread 130483] [WorkerRPCClient.cpp:278] [stopQueryAsync] WorkerRPCClient::stopQueryAsync address=192.168.2.11:42713 queryId=1[m
[36m[10:08:03.523640] [D] [thread 130483] [WorkerRPCClient.cpp:104] [checkAsyncResult] start checkAsyncResult for mode=Stop for 10 queues[m
[36m[10:08:03.540025] [D] [thread 130493] [ZmqServer.cpp:404] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): EndOfStream received for channel [m
[36m[10:08:03.540118] [D] [thread 130492] [ZmqServer.cpp:404] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): EndOfStream received for channel [m
[36m[10:08:03.540197] [D] [thread 130493] [ExchangeProtocol.cpp:111] [onEndOfStream] ExchangeProtocol: EndOfStream message received from 1::42::0::0(threadId=0)[m
[36m[10:08:03.540360] [D] [thread 130492] [ExchangeProtocol.cpp:111] [onEndOfStream] ExchangeProtocol: EndOfStream message received from 1::42::0::0(threadId=2)[m
[32m[10:08:03.540533] [I] [thread 130493] [PartitionManager.cpp:99] [unregisterSubpartitionConsumer] PartitionManager: Unregistering Consumer 1::42::0::0; newCnt(4)[m
[36m[10:08:03.540658] [D] [thread 130493] [ExchangeProtocol.cpp:125] [onEndOfStream] ExchangeProtocol: EndOfStream message received on data channel from 1::42::0::0(threadId=0) but there is still some active subpartition: 4[m
[36m[10:08:03.540741] [D] [thread 130493] [ZmqServer.cpp:404] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): EndOfStream received for channel [m
[36m[10:08:03.540795] [D] [thread 130493] [ExchangeProtocol.cpp:111] [onEndOfStream] ExchangeProtocol: EndOfStream message received from 1::42::0::0(threadId=1)[m
[32m[10:08:03.540940] [I] [thread 130492] [PartitionManager.cpp:99] [unregisterSubpartitionConsumer] PartitionManager: Unregistering Consumer 1::42::0::0; newCnt(3)[m
[32m[10:08:03.541049] [I] [thread 130493] [PartitionManager.cpp:99] [unregisterSubpartitionConsumer] PartitionManager: Unregistering Consumer 1::42::0::0; newCnt(2)[m
[36m[10:08:03.541170] [D] [thread 130492] [ExchangeProtocol.cpp:125] [onEndOfStream] ExchangeProtocol: EndOfStream message received on data channel from 1::42::0::0(threadId=2) but there is still some active subpartition: 2[m
[36m[10:08:03.541188] [D] [thread 130493] [ExchangeProtocol.cpp:125] [onEndOfStream] ExchangeProtocol: EndOfStream message received on data channel from 1::42::0::0(threadId=1) but there is still some active subpartition: 2[m
[36m[10:08:03.541592] [D] [thread 130492] [ZmqServer.cpp:404] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): EndOfStream received for channel [m
[36m[10:08:03.541679] [D] [thread 130492] [ExchangeProtocol.cpp:111] [onEndOfStream] ExchangeProtocol: EndOfStream message received from 1::42::0::0(threadId=3)[m
[32m[10:08:03.541852] [I] [thread 130492] [PartitionManager.cpp:99] [unregisterSubpartitionConsumer] PartitionManager: Unregistering Consumer 1::42::0::0; newCnt(1)[m
[36m[10:08:03.541961] [D] [thread 130492] [PartitionManager.cpp:101] [unregisterSubpartitionConsumer] PartitionManager: Consumer 1::42::0::0, counter is at 1.[m
[36m[10:08:03.542186] [D] [thread 130492] [NetworkSource.cpp:260] [onEndOfStream] Going to inject eos for query Id:1 OperatorId:42 PartitionId: 0 SubpartitionID: 0 terminationType=HardStop[m
[33m[1m[10:08:03.542245] [W] [thread 130492] [NetworkSource.cpp:264] [onEndOfStream] Ignoring forceful EoS on query Id:1 OperatorId:42 PartitionId: 0 SubpartitionID: 0[m
[36m[10:08:03.781663] [D] [thread 130493] [ZmqServer.cpp:404] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): EndOfStream received for channel [m
[36m[10:08:03.781651] [D] [thread 130492] [ZmqServer.cpp:404] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): EndOfStream received for channel [m
[36m[10:08:03.781858] [D] [thread 130493] [ExchangeProtocol.cpp:111] [onEndOfStream] ExchangeProtocol: EndOfStream message received from 1::33::0::0(threadId=0)[m
[36m[10:08:03.781859] [D] [thread 130492] [ExchangeProtocol.cpp:111] [onEndOfStream] ExchangeProtocol: EndOfStream message received from 1::33::0::0(threadId=3)[m
[32m[10:08:03.782022] [I] [thread 130493] [PartitionManager.cpp:99] [unregisterSubpartitionConsumer] PartitionManager: Unregistering Consumer 1::33::0::0; newCnt(4)[m
[32m[10:08:03.782161] [I] [thread 130492] [PartitionManager.cpp:99] [unregisterSubpartitionConsumer] PartitionManager: Unregistering Consumer 1::33::0::0; newCnt(3)[m
[36m[10:08:03.782287] [D] [thread 130492] [ExchangeProtocol.cpp:125] [onEndOfStream] ExchangeProtocol: EndOfStream message received on data channel from 1::33::0::0(threadId=3) but there is still some active subpartition: 3[m
[36m[10:08:03.782375] [D] [thread 130492] [ZmqServer.cpp:404] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): EndOfStream received for channel [m
[36m[10:08:03.782353] [D] [thread 130493] [ExchangeProtocol.cpp:125] [onEndOfStream] ExchangeProtocol: EndOfStream message received on data channel from 1::33::0::0(threadId=0) but there is still some active subpartition: 3[m
[36m[10:08:03.782444] [D] [thread 130492] [ExchangeProtocol.cpp:111] [onEndOfStream] ExchangeProtocol: EndOfStream message received from 1::33::0::0(threadId=2)[m
[32m[10:08:03.782656] [I] [thread 130492] [PartitionManager.cpp:99] [unregisterSubpartitionConsumer] PartitionManager: Unregistering Consumer 1::33::0::0; newCnt(2)[m
[36m[10:08:03.782748] [D] [thread 130492] [ExchangeProtocol.cpp:125] [onEndOfStream] ExchangeProtocol: EndOfStream message received on data channel from 1::33::0::0(threadId=2) but there is still some active subpartition: 2[m
[36m[10:08:03.782805] [D] [thread 130493] [ZmqServer.cpp:404] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): EndOfStream received for channel [m
[36m[10:08:03.782884] [D] [thread 130493] [ExchangeProtocol.cpp:111] [onEndOfStream] ExchangeProtocol: EndOfStream message received from 1::33::0::0(threadId=1)[m
[32m[10:08:03.782972] [I] [thread 130493] [PartitionManager.cpp:99] [unregisterSubpartitionConsumer] PartitionManager: Unregistering Consumer 1::33::0::0; newCnt(1)[m
[36m[10:08:03.783065] [D] [thread 130493] [PartitionManager.cpp:101] [unregisterSubpartitionConsumer] PartitionManager: Consumer 1::33::0::0, counter is at 1.[m
[36m[10:08:03.783301] [D] [thread 130493] [NetworkSource.cpp:260] [onEndOfStream] Going to inject eos for query Id:1 OperatorId:33 PartitionId: 0 SubpartitionID: 0 terminationType=HardStop[m
[33m[1m[10:08:03.783557] [W] [thread 130493] [NetworkSource.cpp:264] [onEndOfStream] Ignoring forceful EoS on query Id:1 OperatorId:33 PartitionId: 0 SubpartitionID: 0[m
[31m[1m[10:08:04.154680] [E] [thread 130503] [WorkerRPCClient.cpp:430] [checkHealth]  WorkerRPCClient::checkHealth error=14: failed to connect to all addresses[m
[33m[1m[10:08:04.155654] [W] [thread 130503] [CoordinatortHealthCheckService.cpp:55] [operator()] NesCoordinator::healthCheck: node=192.168.2.30:35153 went dead so we remove it[m
[32m[10:08:04.155813] [I] [thread 130503] [Topology.cpp:45] [removePhysicalNode] Topology: Removing Node PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=1][m
[32m[10:08:04.155839] [I] [thread 130503] [Node.cpp:187] [removeAllParent] Node: Removing all parents for current node[m
[32m[10:08:04.155869] [I] [thread 130503] [Node.cpp:193] [removeAllParent] Node: Removed node as parent of this node[m
[32m[10:08:04.155877] [I] [thread 130503] [Node.cpp:198] [removeChildren] Node: Removing all children for current node[m
[32m[10:08:04.155932] [I] [thread 130503] [Node.cpp:204] [removeChildren] Node: Removed node as child of this node[m
[32m[10:08:04.155943] [I] [thread 130503] [Node.cpp:204] [removeChildren] Node: Removed node as child of this node[m
[36m[10:08:04.155990] [D] [thread 130503] [Topology.cpp:66] [removePhysicalNode] Topology: Successfully removed the node.[m
[36m[10:08:04.174537] [D] [thread 130492] [ZmqServer.cpp:404] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): EndOfStream received for channel [m
[36m[10:08:04.174537] [D] [thread 130493] [ZmqServer.cpp:404] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): EndOfStream received for channel [m
[36m[10:08:04.174682] [D] [thread 130492] [ExchangeProtocol.cpp:111] [onEndOfStream] ExchangeProtocol: EndOfStream message received from 1::51::0::0(threadId=1)[m
[36m[10:08:04.174768] [D] [thread 130493] [ExchangeProtocol.cpp:111] [onEndOfStream] ExchangeProtocol: EndOfStream message received from 1::51::0::0(threadId=3)[m
[32m[10:08:04.174774] [I] [thread 130492] [PartitionManager.cpp:99] [unregisterSubpartitionConsumer] PartitionManager: Unregistering Consumer 1::51::0::0; newCnt(4)[m
[32m[10:08:04.174852] [I] [thread 130493] [PartitionManager.cpp:99] [unregisterSubpartitionConsumer] PartitionManager: Unregistering Consumer 1::51::0::0; newCnt(3)[m
[36m[10:08:04.174924] [D] [thread 130492] [ExchangeProtocol.cpp:125] [onEndOfStream] ExchangeProtocol: EndOfStream message received on data channel from 1::51::0::0(threadId=1) but there is still some active subpartition: 3[m
[36m[10:08:04.174932] [D] [thread 130493] [ExchangeProtocol.cpp:125] [onEndOfStream] ExchangeProtocol: EndOfStream message received on data channel from 1::51::0::0(threadId=3) but there is still some active subpartition: 3[m
[36m[10:08:04.175016] [D] [thread 130493] [ZmqServer.cpp:404] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): EndOfStream received for channel [m
[36m[10:08:04.175063] [D] [thread 130493] [ExchangeProtocol.cpp:111] [onEndOfStream] ExchangeProtocol: EndOfStream message received from 1::51::0::0(threadId=2)[m
[32m[10:08:04.175196] [I] [thread 130493] [PartitionManager.cpp:99] [unregisterSubpartitionConsumer] PartitionManager: Unregistering Consumer 1::51::0::0; newCnt(2)[m
[36m[10:08:04.175252] [D] [thread 130493] [ExchangeProtocol.cpp:125] [onEndOfStream] ExchangeProtocol: EndOfStream message received on data channel from 1::51::0::0(threadId=2) but there is still some active subpartition: 2[m
[36m[10:08:04.179101] [D] [thread 130492] [ZmqServer.cpp:404] [messageHandlerEventLoop] ZmqServer(192.168.2.11:40903): EndOfStream received for channel [m
[36m[10:08:04.179250] [D] [thread 130492] [ExchangeProtocol.cpp:111] [onEndOfStream] ExchangeProtocol: EndOfStream message received from 1::51::0::0(threadId=0)[m
[32m[10:08:04.179350] [I] [thread 130492] [PartitionManager.cpp:99] [unregisterSubpartitionConsumer] PartitionManager: Unregistering Consumer 1::51::0::0; newCnt(1)[m
[36m[10:08:04.179384] [D] [thread 130492] [PartitionManager.cpp:101] [unregisterSubpartitionConsumer] PartitionManager: Consumer 1::51::0::0, counter is at 1.[m
[36m[10:08:04.179442] [D] [thread 130492] [NetworkSource.cpp:260] [onEndOfStream] Going to inject eos for query Id:1 OperatorId:51 PartitionId: 0 SubpartitionID: 0 terminationType=HardStop[m
[33m[1m[10:08:04.179470] [W] [thread 130492] [NetworkSource.cpp:264] [onEndOfStream] Ignoring forceful EoS on query Id:1 OperatorId:51 PartitionId: 0 SubpartitionID: 0[m
[36m[10:08:04.476617] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
[31m[1m[10:08:04.601963] [E] [thread 131171] [CoordinatorRPCServer.cpp:317] [SendErrors] CoordinatorRPCServer::sendErrors: failure message received.Id of worker: 2 Reason for failure: onFatalException: exception=[Failed assertion on metadata.count() == 0 error message: PartitionManager: Consumer Partition 1::27::0::0 is still alive: 4:: callstack:
Stack trace (most recent call last):
#8    Object "/home/ubuntu/git/nebulastream/build/nes-core/nesWorker", at 0xaaaabc13426f, in $x
#7    Object "/usr/lib/aarch64-linux-gnu/libc-2.31.so", at 0xffffaf601d4f, in __libc_start_main
#6    Object "/home/ubuntu/git/nebulastream/build/nes-core/nesWorker", at 0xaaaabc134c27, in main
#5    Object "/home/ubuntu/git/nebulastream/build/nes-core/libnes.so", at 0xffffb94e041f, in NES::NesWorker::stop(bool)
#4    Object "/home/ubuntu/git/nebulastream/build/nes-core/libnes.so", at 0xffffb92f9053, in NES::Runtime::NodeEngine::stop(bool)
#3    Object "/home/ubuntu/git/nebulastream/build/nes-runtime/libnes-runtime.so", at 0xffffb169d6c7, in NES::Network::PartitionManager::clear()
#2    Object "/home/ubuntu/git/nebulastream/build/nes-common/libnes-common.so", at 0xffffafd15b17, in NES::collectAndPrintStacktrace[abi:cxx11]()
#1    Object "/home/ubuntu/git/nebulastream/build/nes-runtime/libnes-runtime.so", at 0xffffb16afca7, in backward::StackTraceImpl<backward::system_tag::linux_tag>::load_here(unsigned long, void*, void*)
#0    Object "/home/ubuntu/git/nebulastream/build/nes-runtime/libnes-runtime.so", at 0xffffb16b0c33, in unsigned long backward::details::unwind<backward::StackTraceImpl<backward::system_tag::linux_tag>::callback>(backward::StackTraceImpl<backward::system_tag::linux_tag>::callback, unsigned long)
] callstack=
Stack trace (most recent call last):
#8    Object "/home/ubuntu/git/nebulastream/build/nes-core/nesWorker", at 0xaaaabc13426f, in $x
#7    Object "/usr/lib/aarch64-linux-gnu/libc-2.31.so", at 0xffffaf601d4f, in __libc_start_main
#6    Object "/home/ubuntu/git/nebulastream/build/nes-core/nesWorker", at 0xaaaabc134c27, in main
#5    Object "/home/ubuntu/git/nebulastream/build/nes-core/libnes.so", at 0xffffb94e041f, in NES::NesWorker::stop(bool)
#4    Object "/home/ubuntu/git/nebulastream/build/nes-core/libnes.so", at 0xffffb92f9053, in NES::Runtime::NodeEngine::stop(bool)
#3    Object "/home/ubuntu/git/nebulastream/build/nes-runtime/libnes-runtime.so", at 0xffffb169d6c7, in NES::Network::PartitionManager::clear()
#2    Object "/home/ubuntu/git/nebulastream/build/nes-common/libnes-common.so", at 0xffffafd15b17, in NES::collectAndPrintStacktrace[abi:cxx11]()
#1    Object "/home/ubuntu/git/nebulastream/build/nes-runtime/libnes-runtime.so", at 0xffffb16afca7, in backward::StackTraceImpl<backward::system_tag::linux_tag>::load_here(unsigned long, void*, void*)
#0    Object "/home/ubuntu/git/nebulastream/build/nes-runtime/libnes-runtime.so", at 0xffffb16b0c33, in unsigned long backward::details::unwind<backward::StackTraceImpl<backward::system_tag::linux_tag>::callback>(backward::StackTraceImpl<backward::system_tag::linux_tag>::callback, unsigned long)
[m
[36m[10:08:04.654529] [D] [thread 130499] [WorkerRPCServer.cpp:90] [StopQuery] WorkerRPCServer::StopQuery: got request for 1[m
[36m[10:08:04.654641] [D] [thread 130499] [NodeEngine.cpp:250] [stopQuery] Runtime:stopQuery for qep= 1  termination= HardStop[m
[36m[10:08:04.654725] [D] [thread 130499] [QueryManagerLifecycle.cpp:312] [stopQuery] AbstractQueryManager::stopQuery: query sub-plan id  10  type= HardStop[m
[36m[10:08:04.654764] [D] [thread 130499] [NetworkSource.cpp:132] [stop] NetworkSource: stop called on query Id:1 OperatorId:33 PartitionId: 0 SubpartitionID: 0[m
[36m[10:08:04.654827] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:377] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 18446744073709551615 blocking=false type HardEndOfStream[m
[36m[10:08:04.655057] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:395] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 18446744073709551615 blocking=false type HardEndOfStream[m
[36m[10:08:04.655579] [D] [thread 130499] [ExecutableQueryPlan.cpp:293] [notifySourceCompletion] QEP 10 Source 33 is notifying completion: HardStop[m
[36m[10:08:04.655665] [D] [thread 130499] [ExecutableQueryPlan.cpp:301] [notifySourceCompletion] QEP 10 Source 33 is terminated; tokens left = 4[m
[36m[10:08:04.655701] [D] [thread 130499] [QueryManagerLifecycle.cpp:546] [addEndOfStream] AbstractQueryManager: AbstractQueryManager::addEndOfStream for source operator 33 terminationType=HardStop[m
[36m[10:08:04.655698] [D] [thread 130494] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::33::0::0[m
[36m[10:08:04.655744] [D] [thread 130496] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::33::0::0[m
[36m[10:08:04.655823] [D] [thread 130496] [NetworkSource.cpp:219] [reconfigure] NetworkSource: reconfigure() released channel on 1::33::0::0 Thread 2[m
[36m[10:08:04.655832] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:377] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=false type HardEndOfStream[m
[36m[10:08:04.655823] [D] [thread 130494] [NetworkSource.cpp:219] [reconfigure] NetworkSource: reconfigure() released channel on 1::33::0::0 Thread 1[m
[36m[10:08:04.655698] [D] [thread 130497] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::33::0::0[m
[36m[10:08:04.655986] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:395] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=false type HardEndOfStream[m
[36m[10:08:04.655984] [D] [thread 130497] [NetworkSource.cpp:219] [reconfigure] NetworkSource: reconfigure() released channel on 1::33::0::0 Thread 3[m
[36m[10:08:04.656093] [D] [thread 130495] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::33::0::0[m
[36m[10:08:04.656132] [D] [thread 130495] [NetworkSource.cpp:219] [reconfigure] NetworkSource: reconfigure() released channel on 1::33::0::0 Thread 0[m
[36m[10:08:04.656157] [D] [thread 130495] [NetworkSource.cpp:224] [postReconfigurationCallback] NetworkSource: postReconfigurationCallback() called 1::33::0::0[m
[36m[10:08:04.656183] [D] [thread 130495] [NetworkSource.cpp:245] [postReconfigurationCallback] NetworkSource: postReconfigurationCallback(): unregistering SubpartitionConsumer 1::33::0::0[m
[36m[10:08:04.656209] [D] [thread 130495] [NetworkManager.cpp:85] [unregisterSubpartitionConsumer] NetworkManager: Unregistering SubpartitionConsumer: 1::33::0::0[m
[32m[10:08:04.656267] [I] [thread 130495] [PartitionManager.cpp:99] [unregisterSubpartitionConsumer] PartitionManager: Unregistering Consumer 1::33::0::0; newCnt(0)[m
[36m[10:08:04.656489] [D] [thread 130499] [QueryManagerLifecycle.cpp:467] [addHardEndOfStream] hard end-of-stream Sink opId=33 reconfType=HardEndOfStream queryId=1 querySubPlanId=10 threadPool->getNumberOfThreads()=4[m
[36m[10:08:04.656573] [D] [thread 130499] [NetworkSource.cpp:141] [stop] NetworkSource: stop called on query Id:1 OperatorId:33 PartitionId: 0 SubpartitionID: 0 sent hard eos[m
[36m[10:08:04.656699] [D] [thread 130499] [NetworkSource.cpp:132] [stop] NetworkSource: stop called on query Id:1 OperatorId:42 PartitionId: 0 SubpartitionID: 0[m
[36m[10:08:04.656822] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:377] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 18446744073709551615 blocking=false type HardEndOfStream[m
[36m[10:08:04.657048] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:395] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 18446744073709551615 blocking=false type HardEndOfStream[m
[36m[10:08:04.657483] [D] [thread 130499] [ExecutableQueryPlan.cpp:293] [notifySourceCompletion] QEP 10 Source 42 is notifying completion: HardStop[m
[36m[10:08:04.657581] [D] [thread 130499] [ExecutableQueryPlan.cpp:301] [notifySourceCompletion] QEP 10 Source 42 is terminated; tokens left = 3[m
[36m[10:08:04.657651] [D] [thread 130499] [QueryManagerLifecycle.cpp:546] [addEndOfStream] AbstractQueryManager: AbstractQueryManager::addEndOfStream for source operator 42 terminationType=HardStop[m
[36m[10:08:04.657744] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:377] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=false type HardEndOfStream[m
[36m[10:08:04.657927] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:395] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=false type HardEndOfStream[m
[36m[10:08:04.658198] [D] [thread 130497] [SinkMedium.cpp:130] [postReconfigurationCallback] Got EoS on Sink  FileSink()[m
[36m[10:08:04.658229] [D] [thread 130499] [QueryManagerLifecycle.cpp:467] [addHardEndOfStream] hard end-of-stream Sink opId=42 reconfType=HardEndOfStream queryId=1 querySubPlanId=10 threadPool->getNumberOfThreads()=4[m
[36m[10:08:04.658282] [D] [thread 130499] [NetworkSource.cpp:141] [stop] NetworkSource: stop called on query Id:1 OperatorId:42 PartitionId: 0 SubpartitionID: 0 sent hard eos[m
[36m[10:08:04.658332] [D] [thread 130499] [NetworkSource.cpp:132] [stop] NetworkSource: stop called on query Id:1 OperatorId:51 PartitionId: 0 SubpartitionID: 0[m
[36m[10:08:04.658373] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:377] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 18446744073709551615 blocking=false type HardEndOfStream[m
[36m[10:08:04.658449] [D] [thread 130497] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::42::0::0[m
[36m[10:08:04.658449] [D] [thread 130496] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::42::0::0[m
[36m[10:08:04.658495] [D] [thread 130495] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::42::0::0[m
[36m[10:08:04.658512] [D] [thread 130496] [NetworkSource.cpp:219] [reconfigure] NetworkSource: reconfigure() released channel on 1::42::0::0 Thread 2[m
[36m[10:08:04.658512] [D] [thread 130497] [NetworkSource.cpp:219] [reconfigure] NetworkSource: reconfigure() released channel on 1::42::0::0 Thread 3[m
[36m[10:08:04.658520] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:395] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 18446744073709551615 blocking=false type HardEndOfStream[m
[36m[10:08:04.658528] [D] [thread 130495] [NetworkSource.cpp:219] [reconfigure] NetworkSource: reconfigure() released channel on 1::42::0::0 Thread 0[m
[36m[10:08:04.658449] [D] [thread 130494] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::42::0::0[m
[36m[10:08:04.658670] [D] [thread 130494] [NetworkSource.cpp:219] [reconfigure] NetworkSource: reconfigure() released channel on 1::42::0::0 Thread 1[m
[36m[10:08:04.658698] [D] [thread 130494] [NetworkSource.cpp:224] [postReconfigurationCallback] NetworkSource: postReconfigurationCallback() called 1::42::0::0[m
[36m[10:08:04.658717] [D] [thread 130494] [NetworkSource.cpp:245] [postReconfigurationCallback] NetworkSource: postReconfigurationCallback(): unregistering SubpartitionConsumer 1::42::0::0[m
[36m[10:08:04.658731] [D] [thread 130499] [ExecutableQueryPlan.cpp:293] [notifySourceCompletion] QEP 10 Source 51 is notifying completion: HardStop[m
[36m[10:08:04.658736] [D] [thread 130494] [NetworkManager.cpp:85] [unregisterSubpartitionConsumer] NetworkManager: Unregistering SubpartitionConsumer: 1::42::0::0[m
[36m[10:08:04.658763] [D] [thread 130499] [ExecutableQueryPlan.cpp:301] [notifySourceCompletion] QEP 10 Source 51 is terminated; tokens left = 2[m
[36m[10:08:04.658786] [D] [thread 130499] [QueryManagerLifecycle.cpp:546] [addEndOfStream] AbstractQueryManager: AbstractQueryManager::addEndOfStream for source operator 51 terminationType=HardStop[m
[32m[10:08:04.658789] [I] [thread 130494] [PartitionManager.cpp:99] [unregisterSubpartitionConsumer] PartitionManager: Unregistering Consumer 1::42::0::0; newCnt(0)[m
[36m[10:08:04.658850] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:377] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=false type HardEndOfStream[m
[36m[10:08:04.659010] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:395] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=false type HardEndOfStream[m
[36m[10:08:04.659210] [D] [thread 130496] [SinkMedium.cpp:130] [postReconfigurationCallback] Got EoS on Sink  FileSink()[m
[36m[10:08:04.659458] [D] [thread 130495] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::51::0::0[m
[36m[10:08:04.659406] [D] [thread 130499] [QueryManagerLifecycle.cpp:467] [addHardEndOfStream] hard end-of-stream Sink opId=51 reconfType=HardEndOfStream queryId=1 querySubPlanId=10 threadPool->getNumberOfThreads()=4[m
[36m[10:08:04.659510] [D] [thread 130495] [NetworkSource.cpp:219] [reconfigure] NetworkSource: reconfigure() released channel on 1::51::0::0 Thread 0[m
[36m[10:08:04.659417] [D] [thread 130496] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::51::0::0[m
[36m[10:08:04.659633] [D] [thread 130499] [NetworkSource.cpp:141] [stop] NetworkSource: stop called on query Id:1 OperatorId:51 PartitionId: 0 SubpartitionID: 0 sent hard eos[m
[36m[10:08:04.659423] [D] [thread 130497] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::51::0::0[m
[36m[10:08:04.659671] [D] [thread 130496] [NetworkSource.cpp:219] [reconfigure] NetworkSource: reconfigure() released channel on 1::51::0::0 Thread 2[m
[36m[10:08:04.659698] [D] [thread 130497] [NetworkSource.cpp:219] [reconfigure] NetworkSource: reconfigure() released channel on 1::51::0::0 Thread 3[m
[36m[10:08:04.659803] [D] [thread 130494] [NetworkSource.cpp:164] [reconfigure] NetworkSource: reconfigure() called 1::51::0::0[m
[36m[10:08:04.659842] [D] [thread 130494] [NetworkSource.cpp:219] [reconfigure] NetworkSource: reconfigure() released channel on 1::51::0::0 Thread 1[m
[36m[10:08:04.659870] [D] [thread 130494] [NetworkSource.cpp:224] [postReconfigurationCallback] NetworkSource: postReconfigurationCallback() called 1::51::0::0[m
[36m[10:08:04.659889] [D] [thread 130494] [NetworkSource.cpp:245] [postReconfigurationCallback] NetworkSource: postReconfigurationCallback(): unregistering SubpartitionConsumer 1::51::0::0[m
[36m[10:08:04.659909] [D] [thread 130494] [NetworkManager.cpp:85] [unregisterSubpartitionConsumer] NetworkManager: Unregistering SubpartitionConsumer: 1::51::0::0[m
[32m[10:08:04.659957] [I] [thread 130494] [PartitionManager.cpp:99] [unregisterSubpartitionConsumer] PartitionManager: Unregistering Consumer 1::51::0::0; newCnt(0)[m
2023-11-13 10:08:04.661 postReconfigurationCallback: queryId=1, querySubPlanId=10; queryId=1 subPlanId=10 processedTasks=47 processedTuple=94 processedBuffers=47 processedWatermarks=0 latencyAVG=1699869935196 queueSizeAVG=0 availableGlobalBufferAVG=511 availableFixedBufferAVG=0
[36m[10:08:04.660294] [D] [thread 130496] [SinkMedium.cpp:130] [postReconfigurationCallback] Got EoS on Sink  FileSink()[m
[36m[10:08:04.660504] [D] [thread 130496] [ExecutableQueryPlan.cpp:352] [notifySinkCompletion] QEP 10 Sink FileSink() is terminated; tokens left = 1[m
[36m[10:08:04.660574] [D] [thread 130496] [QueryManagerTaskScheduler.cpp:377] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=false type HardEndOfStream[m
[36m[10:08:04.660708] [D] [thread 130496] [QueryManagerTaskScheduler.cpp:395] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=false type HardEndOfStream[m
[36m[10:08:04.661126] [D] [thread 130496] [SinkMedium.cpp:136] [postReconfigurationCallback] Sink [ FileSink() ] is completed with  HardStop[m
[36m[10:08:04.661897] [D] [thread 130495] [ExecutableQueryPlan.cpp:231] [postReconfigurationCallback] Executing HardEndOfStream on qep queryId=1 querySubPlanId=10[m
[36m[10:08:04.661987] [D] [thread 130495] [ExecutableQueryPlan.cpp:172] [stop] QueryExecutionPlan: stop queryId=1 querySubPlanId=10[m
[36m[10:08:04.662037] [D] [thread 130495] [ExecutableQueryPlan.cpp:174] [stop] QueryExecutionPlan: stop 1-10 is marked as stopped now[m
[36m[10:08:04.662312] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:377] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=true type Destroy[m
[36m[10:08:04.662451] [D] [thread 130499] [QueryManagerTaskScheduler.cpp:395] [addReconfigurationMessage] QueryManager: AbstractQueryManager::addReconfigurationMessage begins on plan 10 blocking=true type Destroy[m
[36m[10:08:04.663137] [D] [thread 130499] [QueryManager.cpp:312] [postReconfigurationCallback] AbstractQueryManager: removed running QEP  10[m
[36m[10:08:04.663298] [D] [thread 130499] [QueryManagerLifecycle.cpp:380] [stopQuery] AbstractQueryManager::stopQuery: query 10 was successful[m
[36m[10:08:04.663324] [D] [thread 130499] [NodeEngine.cpp:265] [stopQuery] Runtime: stop of QEP  10  succeeded[m
[36m[10:08:04.663343] [D] [thread 130499] [WorkerRPCServer.cpp:97] [StopQuery] WorkerRPCServer::StopQuery: success[m
[1m[41m[10:08:04.671115] [C] [thread 130483] [RequestProcessorService.cpp:236] [start] QueryProcessingService: Received unexpected exception while scheduling the queryIdAndCatalogEntryMapping: [m
[32m[10:08:04.671311] [I] [thread 130483] [RequestProcessorService.cpp:255] [shutDown] Request Processor Service is shutting down! No further requests can be processed![m
[32m[10:08:04.671331] [I] [thread 130483] [RequestQueue.cpp:63] [insertPoisonPill] QueryRequestQueue: Shutdown is called. Inserting Poison pill in the query request queue.[m
[33m[1m[10:08:04.671400] [W] [thread 130483] [RequestProcessorService.cpp:240] [start] QueryProcessingService: Terminated[m
[32m[10:08:04.671410] [I] [thread 130483] [RequestProcessorService.cpp:255] [shutDown] Request Processor Service is shutting down! No further requests can be processed![m
[33m[1m[10:08:04.671418] [W] [thread 130483] [NesCoordinator.cpp:171] [operator()] NesCoordinator: finished queryRequestProcessor[m
[31m[1m[10:08:05.096546] [E] [thread 131171] [CoordinatorRPCServer.cpp:317] [SendErrors] CoordinatorRPCServer::sendErrors: failure message received.Id of worker: 4 Reason for failure: onFatalException: exception=[Failed assertion on metadata.count() == 0 error message: PartitionManager: Consumer Partition 1::48::0::0 is still alive: 1:: callstack:
Stack trace (most recent call last):
#8    Object "/home/ubuntu/git/nebulastream/build/nes-core/nesWorker", at 0xaaaab882826f, in $x
#7    Object "/usr/lib/aarch64-linux-gnu/libc-2.31.so", at 0xffff848b8e0f, in __libc_start_main
#6    Object "/home/ubuntu/git/nebulastream/build/nes-core/nesWorker", at 0xaaaab8828c27, in main
#5    Object "/home/ubuntu/git/nebulastream/build/nes-core/libnes.so", at 0xffff8e79741f, in NES::NesWorker::stop(bool)
#4    Object "/home/ubuntu/git/nebulastream/build/nes-core/libnes.so", at 0xffff8e5b0053, in NES::Runtime::NodeEngine::stop(bool)
#3    Object "/home/ubuntu/git/nebulastream/build/nes-runtime/libnes-runtime.so", at 0xffff869546c7, in NES::Network::PartitionManager::clear()
#2    Object "/home/ubuntu/git/nebulastream/build/nes-common/libnes-common.so", at 0xffff84fccb17, in NES::collectAndPrintStacktrace[abi:cxx11]()
#1    Object "/home/ubuntu/git/nebulastream/build/nes-runtime/libnes-runtime.so", at 0xffff86966ca7, in backward::StackTraceImpl<backward::system_tag::linux_tag>::load_here(unsigned long, void*, void*)
#0    Object "/home/ubuntu/git/nebulastream/build/nes-runtime/libnes-runtime.so", at 0xffff86967c33, in unsigned long backward::details::unwind<backward::StackTraceImpl<backward::system_tag::linux_tag>::callback>(backward::StackTraceImpl<backward::system_tag::linux_tag>::callback, unsigned long)
] callstack=
Stack trace (most recent call last):
#8    Object "/home/ubuntu/git/nebulastream/build/nes-core/nesWorker", at 0xaaaab882826f, in $x
#7    Object "/usr/lib/aarch64-linux-gnu/libc-2.31.so", at 0xffff848b8e0f, in __libc_start_main
#6    Object "/home/ubuntu/git/nebulastream/build/nes-core/nesWorker", at 0xaaaab8828c27, in main
#5    Object "/home/ubuntu/git/nebulastream/build/nes-core/libnes.so", at 0xffff8e79741f, in NES::NesWorker::stop(bool)
#4    Object "/home/ubuntu/git/nebulastream/build/nes-core/libnes.so", at 0xffff8e5b0053, in NES::Runtime::NodeEngine::stop(bool)
#3    Object "/home/ubuntu/git/nebulastream/build/nes-runtime/libnes-runtime.so", at 0xffff869546c7, in NES::Network::PartitionManager::clear()
#2    Object "/home/ubuntu/git/nebulastream/build/nes-common/libnes-common.so", at 0xffff84fccb17, in NES::collectAndPrintStacktrace[abi:cxx11]()
#1    Object "/home/ubuntu/git/nebulastream/build/nes-runtime/libnes-runtime.so", at 0xffff86966ca7, in backward::StackTraceImpl<backward::system_tag::linux_tag>::load_here(unsigned long, void*, void*)
#0    Object "/home/ubuntu/git/nebulastream/build/nes-runtime/libnes-runtime.so", at 0xffff86967c33, in unsigned long backward::details::unwind<backward::StackTraceImpl<backward::system_tag::linux_tag>::callback>(backward::StackTraceImpl<backward::system_tag::linux_tag>::callback, unsigned long)
[m
[31m[1m[10:08:05.287996] [E] [thread 130503] [WorkerRPCClient.cpp:430] [checkHealth]  WorkerRPCClient::checkHealth error=14: failed to connect to all addresses[m
[33m[1m[10:08:05.288964] [W] [thread 130503] [CoordinatortHealthCheckService.cpp:55] [operator()] NesCoordinator::healthCheck: node=192.168.2.12:35153 went dead so we remove it[m
[32m[10:08:05.289114] [I] [thread 130503] [Topology.cpp:45] [removePhysicalNode] Topology: Removing Node PhysicalNode[id=2, ip=192.168.2.12, resourceCapacity=65535, usedResource=1][m
[32m[10:08:05.289140] [I] [thread 130503] [Node.cpp:187] [removeAllParent] Node: Removing all parents for current node[m
[32m[10:08:05.289168] [I] [thread 130503] [Node.cpp:193] [removeAllParent] Node: Removed node as parent of this node[m
[32m[10:08:05.289215] [I] [thread 130503] [Node.cpp:198] [removeChildren] Node: Removing all children for current node[m
[32m[10:08:05.289229] [I] [thread 130503] [Node.cpp:204] [removeChildren] Node: Removed node as child of this node[m
[32m[10:08:05.289238] [I] [thread 130503] [Node.cpp:204] [removeChildren] Node: Removed node as child of this node[m
[36m[10:08:05.289264] [D] [thread 130503] [Topology.cpp:66] [removePhysicalNode] Topology: Successfully removed the node.[m
[31m[1m[10:08:05.294228] [E] [thread 130503] [WorkerRPCClient.cpp:430] [checkHealth]  WorkerRPCClient::checkHealth error=14: failed to connect to all addresses[m
[33m[1m[10:08:05.295138] [W] [thread 130503] [CoordinatortHealthCheckService.cpp:55] [operator()] NesCoordinator::healthCheck: node=192.168.2.30:35153 went dead so we remove it[m
[32m[10:08:05.295287] [I] [thread 130503] [Topology.cpp:45] [removePhysicalNode] Topology: Removing Node PhysicalNode[id=3, ip=192.168.2.30, resourceCapacity=65535, usedResource=1][m
[33m[1m[10:08:05.295316] [W] [thread 130503] [Topology.cpp:49] [removePhysicalNode] Topology: The physical node 3 doesn't exists in the system.[m
[31m[1m[10:08:05.300244] [E] [thread 130503] [WorkerRPCClient.cpp:430] [checkHealth]  WorkerRPCClient::checkHealth error=14: failed to connect to all addresses[m
[33m[1m[10:08:05.301286] [W] [thread 130503] [CoordinatortHealthCheckService.cpp:55] [operator()] NesCoordinator::healthCheck: node=192.168.2.31:42843 went dead so we remove it[m
[32m[10:08:05.301433] [I] [thread 130503] [Topology.cpp:45] [removePhysicalNode] Topology: Removing Node PhysicalNode[id=4, ip=192.168.2.31, resourceCapacity=65535, usedResource=1][m
[32m[10:08:05.301459] [I] [thread 130503] [Node.cpp:187] [removeAllParent] Node: Removing all parents for current node[m
[32m[10:08:05.301482] [I] [thread 130503] [Node.cpp:193] [removeAllParent] Node: Removed node as parent of this node[m
[32m[10:08:05.301497] [I] [thread 130503] [Node.cpp:198] [removeChildren] Node: Removing all children for current node[m
[32m[10:08:05.301515] [I] [thread 130503] [Node.cpp:204] [removeChildren] Node: Removed node as child of this node[m
[32m[10:08:05.301524] [I] [thread 130503] [Node.cpp:204] [removeChildren] Node: Removed node as child of this node[m
[36m[10:08:05.301549] [D] [thread 130503] [Topology.cpp:66] [removePhysicalNode] Topology: Successfully removed the node.[m
[31m[1m[10:08:05.318513] [E] [thread 130503] [WorkerRPCClient.cpp:430] [checkHealth]  WorkerRPCClient::checkHealth error=14: failed to connect to all addresses[m
[33m[1m[10:08:05.319508] [W] [thread 130503] [CoordinatortHealthCheckService.cpp:55] [operator()] NesCoordinator::healthCheck: node=192.168.2.33:46447 went dead so we remove it[m
[32m[10:08:05.319668] [I] [thread 130503] [Topology.cpp:45] [removePhysicalNode] Topology: Removing Node PhysicalNode[id=6, ip=192.168.2.33, resourceCapacity=65535, usedResource=3][m
[32m[10:08:05.319697] [I] [thread 130503] [Node.cpp:187] [removeAllParent] Node: Removing all parents for current node[m
[32m[10:08:05.319709] [I] [thread 130503] [Node.cpp:198] [removeChildren] Node: Removing all children for current node[m
[36m[10:08:05.319736] [D] [thread 130503] [Topology.cpp:66] [removePhysicalNode] Topology: Successfully removed the node.[m
[31m[1m[10:08:05.325331] [E] [thread 130503] [WorkerRPCClient.cpp:430] [checkHealth]  WorkerRPCClient::checkHealth error=14: failed to connect to all addresses[m
[33m[1m[10:08:05.326274] [W] [thread 130503] [CoordinatortHealthCheckService.cpp:55] [operator()] NesCoordinator::healthCheck: node=192.168.2.34:42085 went dead so we remove it[m
[32m[10:08:05.326427] [I] [thread 130503] [Topology.cpp:45] [removePhysicalNode] Topology: Removing Node PhysicalNode[id=7, ip=192.168.2.34, resourceCapacity=65535, usedResource=3][m
[32m[10:08:05.326453] [I] [thread 130503] [Node.cpp:187] [removeAllParent] Node: Removing all parents for current node[m
[32m[10:08:05.326464] [I] [thread 130503] [Node.cpp:198] [removeChildren] Node: Removing all children for current node[m
[36m[10:08:05.326489] [D] [thread 130503] [Topology.cpp:66] [removePhysicalNode] Topology: Successfully removed the node.[m
[36m[10:08:05.477934] [D] [thread 130502] [RestServer.cpp:170] [operator()] checking if stop request has arrived for rest server listening on port 8081.[m
